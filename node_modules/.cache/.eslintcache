[{"C:\\frontend\\src\\index.js":"1","C:\\frontend\\src\\App.js":"2","C:\\frontend\\src\\reportWebVitals.js":"3","C:\\frontend\\src\\routes.js":"4","C:\\frontend\\src\\store.js":"5","C:\\frontend\\src\\magic\\lib\\UserContext.js":"6","C:\\frontend\\src\\magic\\lib\\magic.js":"7","C:\\frontend\\src\\magic\\login.js":"8","C:\\frontend\\src\\magic\\callback.js":"9","C:\\frontend\\src\\pages\\LandingPage\\LandingPage.js":"10","C:\\frontend\\src\\pages\\ProfilePage\\ProfilePage.js":"11","C:\\frontend\\src\\pages\\SignInPage\\SignInPage.js":"12","C:\\frontend\\src\\pages\\Dashboard\\Dashboard.js":"13","C:\\frontend\\src\\magic\\email-form.js":"14","C:\\frontend\\src\\modules\\reducers\\index.js":"15","C:\\frontend\\src\\magic\\loading.js":"16","C:\\frontend\\src\\modules\\actions\\actor.action.js":"17","C:\\frontend\\src\\services\\api.js":"18","C:\\frontend\\src\\services\\magicweb3.js":"19","C:\\frontend\\src\\constants\\component.constant.js":"20","C:\\frontend\\src\\services\\web3.js":"21","C:\\frontend\\src\\pages\\ManageCertificate\\ManageCertificate.js":"22","C:\\frontend\\src\\pages\\ManageCertificate\\CertificateTypeMaster\\CertificateTypeMaster.js":"23","C:\\frontend\\src\\components\\Header\\Header.js":"24","C:\\frontend\\src\\components\\Table\\TableCertificate.js":"25","C:\\frontend\\src\\components\\SearchCertifcate\\SearchCertificate.js":"26","C:\\frontend\\src\\components\\Footer\\Footer.js":"27","C:\\frontend\\src\\components\\Sidebar\\Sidebar.js":"28","C:\\frontend\\src\\pages\\ManageUser\\InstitutionMaster\\InstitutionMaster.js":"29","C:\\frontend\\src\\pages\\ManageUser\\UserMaster\\UserMaster.js":"30","C:\\frontend\\src\\components\\elements\\SubmitButton\\SubmitButton.js":"31","C:\\frontend\\src\\pages\\ManageUser\\AdminMaster\\AdminMaster.js":"32","C:\\frontend\\src\\modules\\reducers\\actor.reducer.js":"33","C:\\frontend\\src\\modules\\reducers\\delete.reducer.js":"34","C:\\frontend\\src\\constants\\action.type.js":"35","C:\\frontend\\src\\components\\elements\\InputField\\InputField.js":"36","C:\\frontend\\src\\pages\\ManageCertificate\\CreateCertificate3.js":"37","C:\\frontend\\src\\pages\\ManageCertificate\\CreateCertificate1.js":"38","C:\\frontend\\src\\pages\\ManageCertificate\\ViewCertificate.js":"39","C:\\frontend\\src\\pages\\ManageCertificate\\CreateCertificate2.js":"40","C:\\frontend\\src\\components\\Table\\TableCertificateTypes.js":"41","C:\\frontend\\src\\modules\\actions\\delete.action.js":"42","C:\\frontend\\src\\pages\\ManageUser\\InstitutionMaster\\AddEditInstitution.js":"43","C:\\frontend\\src\\components\\Table\\TableInstitution.js":"44","C:\\frontend\\src\\components\\Notification\\Notification.js":"45","C:\\frontend\\src\\components\\elements\\Pagination\\Pagination.js":"46","C:\\frontend\\src\\contracts\\digital_certificate_factory.js":"47","C:\\frontend\\src\\components\\Modal\\ModalSelectCertType.js":"48","C:\\frontend\\src\\pages\\ManageCertificate\\CreateCertificateMember\\CreateCertificateMember1.js":"49","C:\\frontend\\src\\components\\Modal\\ModalCertificateType.js":"50","C:\\frontend\\src\\components\\elements\\ProgressBar\\ProgressBar.js":"51","C:\\frontend\\src\\contracts\\digital_certificate.js":"52","C:\\frontend\\src\\components\\Popup\\Delete.js":"53","C:\\frontend\\src\\pages\\ManageUser\\AdminMaster\\AddEditAdmin.js":"54","C:\\frontend\\src\\pages\\ManageUser\\AdminMaster\\ViewDataAdmin.js":"55","C:\\frontend\\src\\components\\Table\\TableAdmin.js":"56","C:\\frontend\\src\\pages\\ManageUser\\UserMaster\\ViewDataUser.js":"57","C:\\frontend\\src\\pages\\ManageUser\\UserMaster\\AddEditUser.js":"58","C:\\frontend\\src\\components\\Table\\TableUser.js":"59","C:\\frontend\\src\\contracts\\source_code.js":"60","C:\\frontend\\src\\components\\elements\\Status\\Status.js":"61","C:\\frontend\\src\\components\\CertificatePDF\\CertificatePDF.js":"62","C:\\frontend\\src\\components\\elements\\InputField\\InputFieldControl.js":"63","C:\\frontend\\src\\components\\CertificatePDF\\CertificateMemberPDF.js":"64","C:\\frontend\\src\\components\\elements\\Button\\index.js":"65","C:\\frontend\\src\\pages\\ProfilePage\\ProfilePageContent.js":"66"},{"size":787,"mtime":1706517608831,"results":"67","hashOfConfig":"68"},{"size":1077,"mtime":1706517608581,"results":"69","hashOfConfig":"68"},{"size":375,"mtime":1706517608935,"results":"70","hashOfConfig":"68"},{"size":909,"mtime":1707194522546,"results":"71","hashOfConfig":"68"},{"size":1917,"mtime":1706517608935,"results":"72","hashOfConfig":"68"},{"size":91,"mtime":1706517608847,"results":"73","hashOfConfig":"68"},{"size":296,"mtime":1706517608847,"results":"74","hashOfConfig":"68"},{"size":2199,"mtime":1706517608847,"results":"75","hashOfConfig":"68"},{"size":3043,"mtime":1706517608847,"results":"76","hashOfConfig":"68"},{"size":1524,"mtime":1706517608863,"results":"77","hashOfConfig":"68"},{"size":4397,"mtime":1707300458214,"results":"78","hashOfConfig":"68"},{"size":4340,"mtime":1706517608927,"results":"79","hashOfConfig":"68"},{"size":4320,"mtime":1706517608863,"results":"80","hashOfConfig":"68"},{"size":1234,"mtime":1706517608847,"results":"81","hashOfConfig":"68"},{"size":235,"mtime":1706517608863,"results":"82","hashOfConfig":"68"},{"size":200,"mtime":1706517608847,"results":"83","hashOfConfig":"68"},{"size":332,"mtime":1706517608863,"results":"84","hashOfConfig":"68"},{"size":9200,"mtime":1706779223963,"results":"85","hashOfConfig":"68"},{"size":188,"mtime":1706517608935,"results":"86","hashOfConfig":"68"},{"size":402,"mtime":1707299534331,"results":"87","hashOfConfig":"68"},{"size":173,"mtime":1706517608935,"results":"88","hashOfConfig":"68"},{"size":22089,"mtime":1706577838701,"results":"89","hashOfConfig":"68"},{"size":4331,"mtime":1706517608878,"results":"90","hashOfConfig":"68"},{"size":3725,"mtime":1707194602349,"results":"91","hashOfConfig":"68"},{"size":2972,"mtime":1706518382374,"results":"92","hashOfConfig":"68"},{"size":4183,"mtime":1706586843267,"results":"93","hashOfConfig":"68"},{"size":289,"mtime":1706517608769,"results":"94","hashOfConfig":"68"},{"size":8013,"mtime":1706517608800,"results":"95","hashOfConfig":"68"},{"size":8565,"mtime":1706666614094,"results":"96","hashOfConfig":"68"},{"size":2973,"mtime":1706517608919,"results":"97","hashOfConfig":"68"},{"size":605,"mtime":1706517608816,"results":"98","hashOfConfig":"68"},{"size":3245,"mtime":1706517608902,"results":"99","hashOfConfig":"68"},{"size":694,"mtime":1706517608863,"results":"100","hashOfConfig":"68"},{"size":509,"mtime":1706517608863,"results":"101","hashOfConfig":"68"},{"size":184,"mtime":1706517608831,"results":"102","hashOfConfig":"68"},{"size":2706,"mtime":1706517608816,"results":"103","hashOfConfig":"68"},{"size":2583,"mtime":1706517608885,"results":"104","hashOfConfig":"68"},{"size":6466,"mtime":1706517608878,"results":"105","hashOfConfig":"68"},{"size":18684,"mtime":1707282108009,"results":"106","hashOfConfig":"68"},{"size":6175,"mtime":1706517608883,"results":"107","hashOfConfig":"68"},{"size":2431,"mtime":1706517608800,"results":"108","hashOfConfig":"68"},{"size":175,"mtime":1706517608863,"results":"109","hashOfConfig":"68"},{"size":6275,"mtime":1706517608908,"results":"110","hashOfConfig":"68"},{"size":2674,"mtime":1706517608800,"results":"111","hashOfConfig":"68"},{"size":1887,"mtime":1706517608784,"results":"112","hashOfConfig":"68"},{"size":1234,"mtime":1706517608816,"results":"113","hashOfConfig":"68"},{"size":279,"mtime":1706517608831,"results":"114","hashOfConfig":"68"},{"size":2128,"mtime":1706517608784,"results":"115","hashOfConfig":"68"},{"size":5371,"mtime":1706517608886,"results":"116","hashOfConfig":"68"},{"size":2693,"mtime":1706517608784,"results":"117","hashOfConfig":"68"},{"size":940,"mtime":1706517608816,"results":"118","hashOfConfig":"68"},{"size":1807,"mtime":1706587612137,"results":"119","hashOfConfig":"68"},{"size":1461,"mtime":1706517608784,"results":"120","hashOfConfig":"68"},{"size":11958,"mtime":1706517608899,"results":"121","hashOfConfig":"68"},{"size":2023,"mtime":1706517608906,"results":"122","hashOfConfig":"68"},{"size":1961,"mtime":1706517608800,"results":"123","hashOfConfig":"68"},{"size":1716,"mtime":1706517608922,"results":"124","hashOfConfig":"68"},{"size":8268,"mtime":1706517608916,"results":"125","hashOfConfig":"68"},{"size":1848,"mtime":1706517608800,"results":"126","hashOfConfig":"68"},{"size":37757,"mtime":1706517608831,"results":"127","hashOfConfig":"68"},{"size":566,"mtime":1707299537241,"results":"128","hashOfConfig":"68"},{"size":2384,"mtime":1707282596336,"results":"129","hashOfConfig":"68"},{"size":1271,"mtime":1706517608816,"results":"130","hashOfConfig":"68"},{"size":604,"mtime":1706517608769,"results":"131","hashOfConfig":"68"},{"size":700,"mtime":1706517608816,"results":"132","hashOfConfig":"68"},{"size":4529,"mtime":1707300977497,"results":"133","hashOfConfig":"68"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},"jmssmq",{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"136"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"136"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"136"},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"136"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"136"},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"176","messages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"136"},{"filePath":"185","messages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"136"},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"136"},{"filePath":"191","messages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"136"},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"136"},{"filePath":"197","messages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"136"},{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"136"},{"filePath":"203","messages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"136"},{"filePath":"206","messages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"136"},{"filePath":"209","messages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"211","messages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"136"},{"filePath":"214","messages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"136"},{"filePath":"219","messages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"221","messages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"136"},{"filePath":"224","messages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"136"},{"filePath":"227","messages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"136"},{"filePath":"230","messages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"136"},{"filePath":"233","messages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"136"},{"filePath":"236","messages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"136"},{"filePath":"239","messages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"241","messages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"136"},{"filePath":"244","messages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"246","messages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"136"},{"filePath":"249","messages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"136"},{"filePath":"252","messages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"254","messages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"136"},{"filePath":"257","messages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"136"},{"filePath":"260","messages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"136"},{"filePath":"263","messages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"265","messages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"136"},{"filePath":"268","messages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"270","messages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272","usedDeprecatedRules":"136"},{"filePath":"273","messages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"136"},{"filePath":"276","messages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"278","messages":"279","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"136"},{"filePath":"281","messages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"136"},{"filePath":"284","messages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"286","messages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"136"},{"filePath":"289","messages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"291","messages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293","usedDeprecatedRules":"136"},{"filePath":"294","messages":"295","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"296","messages":"297","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"298","messages":"299","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"300","messages":"301","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\frontend\\src\\index.js",[],["302","303"],"C:\\frontend\\src\\App.js",["304"],"import \"./App.css\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Routes } from \"./routes\";\r\nimport { Provider } from \"react-redux\";\r\nimport { configureStore } from \"./store\";\r\nimport { magic } from \"./magic/lib/magic\";\r\nimport { UserContext } from \"./magic/lib/UserContext\";\r\n\r\nfunction App() {\r\n  const [userNormal, setUserNormal] = useState();\r\n\r\n  // If isLoggedIn is true, set the UserContext with user data\r\n  // Otherwise, set it to {user: null}\r\n  useEffect(() => {\r\n    // setUserNormal({ loading: true });\r\n    // magic.user.isLoggedIn().then((isLoggedIn) => {\r\n    //   return isLoggedIn\r\n    //     ? magic.user.getMetadata().then((userData) => {\r\n    //         setUserNormal(userData);\r\n    //       })\r\n    //     : setUserNormal({ user: null });\r\n    // });\r\n  }, []);\r\n  \r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Provider store={configureStore()}>\r\n        <UserContext.Provider value={[userNormal, setUserNormal]}>\r\n          <Routes />\r\n        </UserContext.Provider>\r\n      </Provider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\frontend\\src\\reportWebVitals.js",[],"C:\\frontend\\src\\routes.js",[],"C:\\frontend\\src\\store.js",[],"C:\\frontend\\src\\magic\\lib\\UserContext.js",[],"C:\\frontend\\src\\magic\\lib\\magic.js",[],"C:\\frontend\\src\\magic\\login.js",[],"C:\\frontend\\src\\magic\\callback.js",["305"],"import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { magic } from './lib/magic';\r\nimport Loading from './loading';\r\nimport { useHistory } from 'react-router-dom';\r\nimport API from '../services/api';\r\nimport magicweb3 from '../services/magicweb3';\r\nimport { setActorType } from '../modules/actions/actor.action';\r\nimport { ACTOR, ACTOR_TOKEN } from \"../constants/component.constant\";\r\n\r\nconst Callback = (props) => {\r\n  const history = useHistory();\r\n  // The redirect contains a `provider` query param if the user is logging in with a social provider\r\n  useEffect(() => {\r\n    let magicCredential = new URLSearchParams(props.location.search).get('magic_credential');\r\n    if (magicCredential) magic.auth.loginWithCredential().then((didToken) => authenticateWithServer(didToken));\r\n  }, [props.location.search]);\r\n\r\n  // Send token to server to validate\r\n  const authenticateWithServer = async (didToken) => {\r\n    let res = await fetch(`${process.env.REACT_APP_SERVER_URL}/api/login`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: 'Bearer ' + didToken,\r\n      },\r\n    });\r\n\r\n    if (res.status === 200) {\r\n      // Set the UserContext to the now logged in user\r\n            let userMetadata = await magic.user.getMetadata();\r\n            let user;\r\n\r\n            const admin = await API.getAdminByPublicKey(userMetadata.publicAddress);\r\n            if (!admin) {\r\n              user = await API.getUserByPublicKey(userMetadata.publicAddress);\r\n              if (!user) {\r\n                let request = {\r\n                  name: userMetadata.email.split(\"@\")[0],\r\n                  email: userMetadata.email,\r\n                  public_key: userMetadata.publicAddress\r\n                  // phone_number: userMetadata.phoneNumber, //defaulted\r\n                  // photo: 'a23ebf30-8beb-11ed-ada9-05a51e9dd947.png' //defaulted\r\n                }\r\n                user = await API.createUser(request);\r\n              }\r\n            }\r\n            const message = `DIGICERT${(admin) ? admin.login_nonce : user.login_nonce}`;\r\n            const dataToSign = magicweb3.utils.sha3(message);\r\n            const signature = await magicweb3.eth.personal.sign(dataToSign, (admin) ? admin.public_key : user.public_key);  \r\n            const result = (admin) ? await API.adminLogin({admin_id: admin.admin_id, signature}) : await API.userLogin({user_id: user.user_id, signature});\r\n            localStorage.setItem((admin) ? ACTOR_TOKEN.DIGICERT_ADMIN_TOKEN : ACTOR_TOKEN.DIGICERT_USER_TOKEN, result.token);\r\n            props.setActorType((admin) ? ACTOR.ADMIN : ACTOR.USER);\r\n            history.push((admin) ? '/dashboard/ADMIN' : '/dashboard/USER');\r\n    }\r\n  };\r\n\r\n  return <Loading />;\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n      async setActorType(type) {\r\n          dispatch(setActorType(type));\r\n      }\r\n  }\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(React.memo(Callback));\r\n// export default Callback;\r\n","C:\\frontend\\src\\pages\\LandingPage\\LandingPage.js",["306","307","308","309","310","311"],"import { useEffect, useRef, useState } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport Footer from '../../components/Footer/Footer';\r\nimport SearchCertificate from '../../components/SearchCertifcate/SearchCertificate';\r\nimport { history } from '../../store';\r\nimport './LandingPage.scss';\r\nimport logo from '../../assets/images/ani-logo-img.png';\r\n\r\nconst LandingPage = (props) => {\r\n    // const myRef = useRef(null);\r\n    // const executeScroll = () => myRef.current.scrollIntoView();\r\n    // const contractAddress = new URLSearchParams(props.location.search).get(\"contract_address\");\r\n    // const tokenId = new URLSearchParams(props.location.search).get(\"token_id\");\r\n\r\n    // useEffect(() => {\r\n    //     if (contractAddress && tokenId) {\r\n    //         executeScroll();\r\n    //     }\r\n    // }, [])\r\n\r\n    return (\r\n        <div className=\"landing-page\">\r\n            <div className=\"first-section\">\r\n                <h1>BLOCKCHAIN DIGITAL CERTIFICATE</h1><br/>\r\n                <br/>\r\n                <button className=\"signin-btn\" onClick={() => history.push(\"/signin\")}>Sign In</button>\r\n                {/* <button className=\"search-btn\" onClick={() => executeScroll()}>Search Certificate</button> */}\r\n            </div>\r\n            {/* <div className=\"second-section\" ref={myRef}>\r\n                <SearchCertificate contractAddress={contractAddress} tokenId={tokenId}/>\r\n            </div> \r\n            <Footer/>*/}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withRouter(LandingPage);","C:\\frontend\\src\\pages\\ProfilePage\\ProfilePage.js",["312","313","314","315","316","317","318"],"C:\\frontend\\src\\pages\\SignInPage\\SignInPage.js",["319","320","321","322"],"import { faExclamationCircle, faSpinner } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport axios from 'axios';\r\nimport jsConvert from 'js-convert-case';\r\nimport React from 'react';\r\nimport { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport SubmitButton from '../../components/elements/SubmitButton/SubmitButton';\r\nimport { ACTOR, ACTOR_TOKEN } from '../../constants/component.constant';\r\nimport { setActorType } from '../../modules/actions/actor.action';\r\nimport API from '../../services/api';\r\nimport web3 from '../../services/web3';\r\nimport { history } from '../../store';\r\nimport './SignInPage.scss';\r\n\r\nconst SignInPage = (props) => {\r\n    const [isProcessing, setIsProcessing] = useState(false);\r\n    const [isFailed, setIsFailed] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState('Test');\r\n\r\n    // const userLogin = async () => {\r\n    //     if (!web3) {\r\n    //         return;\r\n    //     }\r\n    //     setIsProcessing(true);\r\n    //     setIsFailed(false);\r\n    //     try {\r\n    //         const accounts = await web3.eth.getAccounts();\r\n    //         const user = await API.getUserByPublicKey(accounts[0]);\r\n    //         if (!user) {\r\n    //             throw 'User with your address not found';\r\n    //         }\r\n    //         const message = `DIGICERT${user.login_nonce}`;\r\n    //         const dataToSign = web3.utils.sha3(message);\r\n    //         const signature = await web3.eth.personal.sign(dataToSign, accounts[0]);\r\n    //         const result = await API.userLogin({user_id: user.user_id, signature});\r\n    //         localStorage.setItem(ACTOR_TOKEN.DIGICERT_USER_TOKEN, result.token);\r\n    //         props.setActorType(ACTOR.USER);\r\n    //         history.push('/dashboard/USER');\r\n    //     } catch (e) {\r\n    //         setIsFailed(true);\r\n    //         setErrorMessage(typeof e === 'string' ? e : e.message);\r\n    //     }\r\n    //     setIsProcessing(false);\r\n    // }\r\n\r\n    const adminLogin = async () => {\r\n        if (!web3) {\r\n            return;\r\n        }\r\n        setIsProcessing(true);\r\n        setIsFailed(false);\r\n        try {\r\n            const accounts = await web3.eth.getAccounts();\r\n            // console.log(accounts[0]);\r\n            const admin = await API.getAdminByPublicKey(accounts[0]);\r\n            if (!admin) {\r\n                throw 'Admin with your address not found';\r\n            }\r\n            const message = `DIGICERT${admin.login_nonce}`;\r\n            const dataToSign = web3.utils.sha3(message);\r\n            const signature = await web3.eth.personal.sign(dataToSign, accounts[0]);\r\n            const result = await API.adminLogin({admin_id: admin.admin_id, signature});\r\n            localStorage.setItem(ACTOR_TOKEN.DIGICERT_ADMIN_TOKEN, result.token);\r\n            props.setActorType(ACTOR.ADMIN);\r\n            history.push('/dashboard/ADMIN');\r\n        } catch (e) {\r\n            setIsFailed(true);\r\n            setErrorMessage(typeof e === 'string' ? e : e.message);\r\n        }\r\n        setIsProcessing(false);\r\n    }\r\n\r\n    return (\r\n        <div className=\"signin\">\r\n            <div className=\"signin-form\">\r\n                <div className=\"title\">\r\n                    <h2>Login</h2>\r\n                    <hr></hr>\r\n                    <h5>Make sure you choose the right account on Metamask</h5>\r\n                </div>\r\n                {isFailed ? \r\n                    <span className=\"error-flag\"><FontAwesomeIcon icon={faExclamationCircle} className=\"error-icon\"/>{errorMessage}</span> : <></>}\r\n                {web3 ?\r\n                    <div className=\"button\">\r\n                        <SubmitButton isProcessing={isProcessing} buttonText={\"Login as Admin\"} onClick={() => adminLogin()}/>\r\n                        <SubmitButton isProcessing={isProcessing} buttonText={\"Login as User\"} onClick={() => history.push('/userlogin')}/>\r\n                    </div> : <FontAwesomeIcon icon={faSpinner} className=\"big-spinner\"></FontAwesomeIcon>}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        async setActorType(type) {\r\n            dispatch(setActorType(type));\r\n        }\r\n    }\r\n};\r\n  \r\nexport default connect(null, mapDispatchToProps)(React.memo(SignInPage));","C:\\frontend\\src\\pages\\Dashboard\\Dashboard.js",["323"],"import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect, useParams, withRouter } from \"react-router-dom\";\r\nimport Header from \"../../components/Header/Header\";\r\nimport SearchCertificate from \"../../components/SearchCertifcate/SearchCertificate\";\r\nimport Sidebar from \"../../components/Sidebar/Sidebar\";\r\nimport { ACTOR, ACTOR_TOKEN } from \"../../constants/component.constant\";\r\nimport {\r\n  setActorType,\r\n  setAdmin,\r\n  setUser,\r\n} from \"../../modules/actions/actor.action\";\r\nimport ManageCertificate from \"../ManageCertificate/ManageCertificate\";\r\nimport InstitutionMaster from \"../ManageUser/InstitutionMaster/InstitutionMaster\";\r\nimport UserMaster from \"../ManageUser/UserMaster/UserMaster\";\r\nimport API from \"../../services/api\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport \"./Dashboard.scss\";\r\nimport { history } from \"../../store\";\r\nimport AdminMaster from \"../ManageUser/AdminMaster/AdminMaster\";\r\nimport CertificateTypeMaster from \"../ManageCertificate/CertificateTypeMaster/CertificateTypeMaster\";\r\n\r\nconst Dashboard = (props) => {\r\n  const actor = useParams().actor;\r\n  const menu = new URLSearchParams(props.location.search).get(\"menu\");\r\n\r\n  const getToken = () => {\r\n    let token = localStorage.getItem(ACTOR_TOKEN.DIGICERT_USER_TOKEN);\r\n    if (actor === ACTOR.ADMIN) {\r\n      token = localStorage.getItem(ACTOR_TOKEN.DIGICERT_ADMIN_TOKEN);\r\n    }\r\n\r\n    return token;\r\n  };\r\n\r\n  const getActorDetails = async () => {\r\n    const token = getToken();\r\n    if (!token) {\r\n      history.push(\"/\");\r\n      return;\r\n    }\r\n    const decodedToken = jwt.decode(token);\r\n    if (actor === ACTOR.ADMIN) {\r\n      await props.getAdmin(decodedToken.public_key);\r\n    } else if (actor === ACTOR.USER) {\r\n      await props.getUser(decodedToken.public_key);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getActorDetails();\r\n  }, []);\r\n\r\n  const resolveContent = () => {\r\n    switch (menu) {\r\n      case \"institution-master\":\r\n        return <InstitutionMaster />;\r\n      case \"user-master\":\r\n        return <UserMaster />;\r\n      case \"admin-master\":\r\n        return <AdminMaster />;\r\n      case \"certificate-type-master\":\r\n        return <CertificateTypeMaster />;\r\n      case \"manage-certificate\":\r\n        return <ManageCertificate />;\r\n      default:\r\n        return <SearchCertificate />;\r\n    }\r\n  };\r\n\r\n  const resolveActor = () => {\r\n    let actorObj;\r\n\r\n    if (actor === ACTOR.ADMIN && props.admin) {\r\n      actorObj = props.admin;\r\n    } else if (actor === ACTOR.USER && props.admin) {\r\n      actorObj = props.user;\r\n    }\r\n\r\n    return actorObj;\r\n  };\r\n\r\n  const logout = () => {\r\n    switch (actor) {\r\n      case ACTOR.ADMIN:\r\n        localStorage.removeItem(ACTOR_TOKEN.DIGICERT_ADMIN_TOKEN);\r\n        props.logoutAdmin();\r\n        break;\r\n      case ACTOR.USER:\r\n        localStorage.removeItem(ACTOR_TOKEN.DIGICERT_USER_TOKEN);\r\n        props.logoutUser();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    history.push(\"/\");\r\n  };\r\n\r\n  if (!actor) {\r\n    return <Redirect to=\"/dashboard/USER\" />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"dashboard\">\r\n      <Header type={actor} actor={resolveActor()} logout={logout} />\r\n      <div className=\"dashboard-body\">\r\n        <Sidebar menu={menu} actor={actor} />\r\n        <div className=\"dashboard-content\">{resolveContent()}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  user: state.getIn([\"actor\", \"user\"]).toJS(),\r\n  admin: state.getIn([\"actor\", \"admin\"]).toJS(),\r\n  type: state.getIn([\"actor\", \"type\"]),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    async getUser(publicKey) {\r\n      try {\r\n        dispatch(setActorType(ACTOR.USER));\r\n        dispatch(setUser(await API.getUserByPublicKey(publicKey)));\r\n      } catch (e) {\r\n        console.log(e);\r\n        throw e;\r\n      }\r\n    },\r\n    async getAdmin(publicKey) {\r\n      try {\r\n        dispatch(setActorType(ACTOR.ADMIN));\r\n        dispatch(setAdmin(await API.getAdminByPublicKey(publicKey)));\r\n      } catch (e) {\r\n        console.log(e);\r\n        throw e;\r\n      }\r\n    },\r\n    logoutUser() {\r\n      setUser({});\r\n    },\r\n    logoutAdmin() {\r\n      setAdmin({});\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(React.memo(withRouter(Dashboard)));\r\n","C:\\frontend\\src\\magic\\email-form.js",[],"C:\\frontend\\src\\modules\\reducers\\index.js",[],"C:\\frontend\\src\\magic\\loading.js",[],"C:\\frontend\\src\\modules\\actions\\actor.action.js",[],"C:\\frontend\\src\\services\\api.js",[],"C:\\frontend\\src\\services\\magicweb3.js",[],"C:\\frontend\\src\\constants\\component.constant.js",[],"C:\\frontend\\src\\services\\web3.js",[],"C:\\frontend\\src\\pages\\ManageCertificate\\ManageCertificate.js",["324","325","326","327","328","329","330","331","332","333","334","335","336"],"import htmlToText from \"html-to-text\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { connect, useSelector } from \"react-redux\";\r\nimport { useParams, withRouter } from \"react-router-dom\";\r\nimport { createNotification } from \"../../components/Notification/Notification\";\r\nimport TableCertificate from \"../../components/Table/TableCertificate\";\r\nimport Pagination from \"../../components/elements/Pagination/Pagination\";\r\nimport ProgressBar from \"../../components/elements/ProgressBar/ProgressBar\";\r\nimport SubmitButton from \"../../components/elements/SubmitButton/SubmitButton\";\r\nimport { ACTOR, INPUT_STATUS } from \"../../constants/component.constant\";\r\nimport CertificateSet from \"../../contracts/digital_certificate\";\r\nimport API from \"../../services/api\";\r\nimport web3 from \"../../services/web3\";\r\nimport { history } from \"../../store\";\r\nimport CreateCertificate1 from \"./CreateCertificate1\";\r\nimport CreateCertificate2 from \"./CreateCertificate2\";\r\nimport CreateCertificate3 from \"./CreateCertificate3\";\r\nimport \"./ManageCertificate.scss\";\r\nimport ViewCertificate from \"./ViewCertificate\";\r\nimport name from \"ipfs-http-client/src/name\";\r\nimport ModalSelectCertType from \"../../components/Modal/ModalSelectCertType\";\r\nimport CreateCertificateMember1 from \"./CreateCertificateMember/CreateCertificateMember1\";\r\nconst { Buffer } = require(\"buffer\");\r\n\r\nconst ManageCertificate = (props) => {\r\n  const [isDelete, setIsDelete] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [itemsPerPage] = useState(10);\r\n  const [certificateLogo, setCertificateLogo] = useState(null);\r\n  const [documentName, setDocumentName] = useState({\r\n    status: INPUT_STATUS.INIT,\r\n    value: \"\",\r\n    errorMessage: \"\",\r\n  });\r\n  const [receiverName, setReceiverName] = useState({\r\n    status: INPUT_STATUS.INIT,\r\n    value: \"\",\r\n    errorMessage: \"\",\r\n  });\r\n  const [certificateNo, setCertificateNo] = useState({\r\n    status: INPUT_STATUS.INIT,\r\n    value: \"\",\r\n    errorMessage: \"\",\r\n  });\r\n  const [certificateTitle, setCertificateTitle] = useState({\r\n    status: INPUT_STATUS.INIT,\r\n    value: \"\",\r\n    errorMessage: \"\",\r\n  });\r\n  const [certificateDescription, setCertificateDescription] = useState({\r\n    status: INPUT_STATUS.INIT,\r\n    value: \"\",\r\n    errorMessage: \"\",\r\n  });\r\n  const [certificateScore, setCertificateScore] = useState({\r\n    status: INPUT_STATUS.INIT,\r\n    value: \"\",\r\n    errorMessage: \"\",\r\n  });\r\n  const [certificateType, setCertificateType] = useState({\r\n    status: INPUT_STATUS.INIT,\r\n    value: \"\",\r\n    errorMessage: \"\",\r\n  });\r\n  const [certificateDate, setCertificateDate] = useState({\r\n    status: INPUT_STATUS.INIT,\r\n    value: \"\",\r\n    errorMessage: \"\",\r\n  });\r\n  const [sendToPubKey, setSendToPubKey] = useState({\r\n    status: INPUT_STATUS.INIT,\r\n    value: \"\",\r\n    errorMessage: \"\",\r\n  });\r\n  const [sendToUser, setSendToUser] = useState({});\r\n  const [assignToPubKeys, setAssignToPubKeys] = useState([\r\n    { status: INPUT_STATUS.INIT, value: \"\", errorMessage: \"\" },\r\n  ]);\r\n  const [assignToUsers, setAssignToUsers] = useState([{}]);\r\n  const [certificates, setCertificates] = useState([]);\r\n\r\n  const [showModalCertType, setShowModalCertType] = useState(false);\r\n  const [selectedCertType, setSelectedCertType] = useState(null);\r\n\r\n  const step = new URLSearchParams(props.location.search).get(\r\n    \"create_certificate_step\"\r\n  );\r\n  const memberStep = new URLSearchParams(props.location.search).get(\r\n    \"create_certificate_member_step\"\r\n  );\r\n  const view = new URLSearchParams(props.location.search).get(\r\n    \"view_certificate\"\r\n  );\r\n  const certificateId = new URLSearchParams(props.location.search).get(\r\n    \"certificate_id\"\r\n  );\r\n  const actor = useParams().actor;\r\n\r\n  const deleteSelectedData = useSelector((state) =>\r\n    state.getIn([\"delete\", \"selectedData\"]).toJS()\r\n  );\r\n\r\n  const [admins, setAdmins] = useState([]);\r\n  const [selectedAdmin, setSelectedAdmin] = useState({});\r\n\r\n  useEffect(() => {\r\n    getAllCertificates(currentPage - 1, itemsPerPage);\r\n  }, [step, currentPage, itemsPerPage, props?.type, props?.user]);\r\n\r\n  useEffect(() => {\r\n    if (selectedCertType) {\r\n      handleSelectCertType();\r\n    }\r\n  }, [selectedCertType]);\r\n\r\n  const handleSelectCertType = () => {\r\n    if (selectedCertType?.label?.toLowerCase()?.includes(\"keanggotaan\")) {\r\n      history.push(\r\n        `/dashboard/${actor}?menu=manage-certificate&create_certificate_member_step=1`\r\n      );\r\n    } \r\n    else \r\n    {\r\n      history.push(\r\n        `/dashboard/${actor}?menu=manage-certificate&create_certificate_step=1`\r\n      );\r\n    }\r\n  };\r\n\r\n  const getAllAdmins = async (offset, limit) => {\r\n    const results = await API.getAllAdmins(offset, limit);\r\n    if (results.length > 0) {\r\n      setAdmins(results);\r\n    }\r\n  };\r\n\r\n  const getAllCertificates = async (offset, limit) => {\r\n    let results = [];\r\n    if (props.type === ACTOR.USER && props.user) {\r\n      results = await API.getCertificatesByUser(\r\n        props.user.user_id,\r\n        offset,\r\n        limit\r\n      );\r\n    } else if (props.type === ACTOR.ADMIN && props.admin) {\r\n      let creatorId = props.admin.admin_id;\r\n      if (props.admin.name !== \"creator\") {\r\n        await getAllAdmins(0, 1000);\r\n        setSelectedAdmin(\r\n          admins.find((admin) => {\r\n            return (\r\n              admin.name === \"creator\" &&\r\n              admin.institution_id === props.admin.institution_id\r\n            );\r\n          })\r\n        );\r\n        if (selectedAdmin) creatorId = selectedAdmin.admin_id;\r\n      }\r\n\r\n      results = await API.getCertificatesByAdmin(creatorId, offset, limit);\r\n    }\r\n\r\n    const newCertificates = [];\r\n    const composeApprovers = (approvers) => {\r\n      let names = \"\";\r\n      for (const approver of approvers) {\r\n        names = names + ` ,${approver.User.name}`;\r\n      }\r\n\r\n      return names.substring(2, names.length);\r\n    };\r\n\r\n    for (const result of results) {\r\n      newCertificates.push({\r\n        id: result.certificate_id,\r\n        date: result.date,\r\n        documentName: result.name,\r\n        sendTo: result.User.name,\r\n        signaturedBy: composeApprovers(result.CertificateSigners),\r\n        status: result.status,\r\n        scAddress: result.sc_address,\r\n        tokenId: result.token_id,\r\n      });\r\n    }\r\n    if (newCertificates.length > 0) {\r\n      setCertificates(newCertificates);\r\n    }\r\n  };\r\n\r\n  const indexOfLastPost = currentPage * itemsPerPage;\r\n  const indexOfFirstPost = indexOfLastPost - itemsPerPage;\r\n  const currentItems = certificates.slice(indexOfFirstPost, indexOfLastPost);\r\n\r\n  const getInputValue = (key) => {\r\n    switch (key) {\r\n      case \"documentName\":\r\n        return documentName;\r\n      case \"receiverName\":\r\n        return receiverName;\r\n      case \"certificateNo\":\r\n        return certificateNo;\r\n      case \"certificateTitle\":\r\n        return certificateTitle;\r\n      case \"certificateDescription\":\r\n        return certificateDescription;\r\n      case \"certificateScore\":\r\n        return certificateScore;\r\n      case \"certificateDate\":\r\n        return certificateDate;\r\n      case \"sendToPubKey\":\r\n        return sendToPubKey;\r\n      case \"certificateLogo\":\r\n        return certificateLogo;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const loadSendToUser = async (publicKey) => {\r\n    const user = await API.getUserByPublicKey(publicKey);\r\n    setSendToUser(user ? user : {});\r\n    const status = user ? INPUT_STATUS.VALID : INPUT_STATUS.INVALID;\r\n    setSendToPubKey({\r\n      status,\r\n      value: publicKey,\r\n      errorMessage:\r\n        status === INPUT_STATUS.INVALID\r\n          ? !user\r\n            ? \"user not found\"\r\n            : \"required field\"\r\n          : \"\",\r\n    });\r\n  };\r\n\r\n  const setInputValue = (key, value) => {\r\n    let status =\r\n      value && value != \"\" ? INPUT_STATUS.VALID : INPUT_STATUS.INVALID;\r\n\r\n    switch (key) {\r\n      case \"documentName\":\r\n        setDocumentName({\r\n          status,\r\n          value: value,\r\n          errorMessage: status === INPUT_STATUS.INVALID ? \"required field\" : \"\",\r\n        });\r\n        break;\r\n      case \"receiverName\":\r\n        setReceiverName({\r\n          status,\r\n          value: value,\r\n          errorMessage: status === INPUT_STATUS.INVALID ? \"required field\" : \"\",\r\n        });\r\n        break;\r\n      case \"certificateNo\":\r\n        setCertificateNo({\r\n          status,\r\n          value: value,\r\n          errorMessage: status === INPUT_STATUS.INVALID ? \"required field\" : \"\",\r\n        });\r\n        break;\r\n      case \"certificateTitle\":\r\n        setCertificateTitle({\r\n          status,\r\n          value: value,\r\n          errorMessage: status === INPUT_STATUS.INVALID ? \"required field\" : \"\",\r\n        });\r\n        break;\r\n      case \"certificateDescription\":\r\n        const text = htmlToText.fromString(value).replace(/(\\r\\n|\\n|\\r)/gm, \"\");\r\n        status = text ? status : INPUT_STATUS.INVALID;\r\n        setCertificateDescription({\r\n          status,\r\n          value: value,\r\n          errorMessage: status === INPUT_STATUS.INVALID ? \"required field\" : \"\",\r\n        });\r\n        break;\r\n      case \"certificateScore\":\r\n        setCertificateScore({\r\n          status,\r\n          value: value,\r\n          errorMessage: status === INPUT_STATUS.INVALID ? \"required field\" : \"\",\r\n        });\r\n        break;\r\n      case \"certificateType\":\r\n        setCertificateType({\r\n          status,\r\n          value: value,\r\n          errorMessage: status === INPUT_STATUS.INVALID ? \"required field\" : \"\",\r\n        });\r\n        break;\r\n      case \"certificateDate\":\r\n        setCertificateDate({\r\n          status,\r\n          value: value,\r\n          errorMessage: status === INPUT_STATUS.INVALID ? \"required field\" : \"\",\r\n        });\r\n        break;\r\n      case \"certificateLogo\":\r\n        setCertificateLogo(value);\r\n        break;\r\n      case \"sendToPubKey\":\r\n        if (value.length === 42) {\r\n          loadSendToUser(value);\r\n        } else {\r\n          status = INPUT_STATUS.INVALID;\r\n          setSendToUser({});\r\n        }\r\n        setSendToPubKey({\r\n          status,\r\n          value: value,\r\n          errorMessage:\r\n            status === INPUT_STATUS.INVALID\r\n              ? \"public key length must be 42 characters\"\r\n              : \"\",\r\n        });\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const getDataToSign = (certificate) => {\r\n    const { receiver_name, no, title, description, score, date } = certificate;\r\n    const descriptionText = htmlToText\r\n      .fromString(description)\r\n      .replace(/(\\r\\n|\\n|\\r| )/gm, \"\");\r\n    const mergeCertificateData = (\r\n      receiver_name +\r\n      no +\r\n      title +\r\n      descriptionText +\r\n      score +\r\n      date\r\n    ).replace(/(\\r\\n|\\n|\\r| )/gm, \"\");\r\n    return web3.utils.keccak256(mergeCertificateData);\r\n  };\r\n\r\n  const submit = async () => {\r\n    if (assignToPubKeys) {\r\n      const certificateHash = getDataToSign({\r\n        receiver_name: receiverName.value,\r\n        no: certificateNo.value,\r\n        title: certificateTitle.value,\r\n        description: certificateDescription.value,\r\n        score: certificateScore.value,\r\n        date: certificateDate.value,\r\n      });\r\n\r\n      let approvers = [];\r\n      for (const assignToPubKey of assignToPubKeys) {\r\n        approvers.push(assignToPubKey.value);\r\n      }\r\n\r\n      const accounts = await web3.eth.getAccounts();\r\n\r\n      //jika signernya hanya admin, langsung Minting\r\n      // if (approvers[0] === accounts[0] && approvers.length === 1) {\r\n      const institution = await API.getInstitutionById(\r\n        props.admin.institution_id\r\n      );\r\n      // const certificateSet = CertificateSet.getNewInstance(\r\n      //   institution.sc_address\r\n      // );\r\n      // const today = new Date();\r\n      // const thisMonth = today.getMonth();\r\n      // const tx = certificateSet.methods.mint(\r\n      //   sendToPubKey.value,\r\n      //   0,\r\n      //   Math.floor(new Date(today.setMonth(thisMonth + 12)).getTime() / 1000),\r\n      //   certificateHash,\r\n      //   approvers\r\n      // );\r\n\r\n      try {\r\n        // createNotification({\r\n        //   type: \"Minting...\",\r\n        //   value:\r\n        //     \"Please check your metamask and stay on this page until Certificate is Minted to blockchain\",\r\n        // });\r\n\r\n        // tx.send({\r\n        //   from: accounts[0],\r\n        //   gas: 3000000,\r\n        //   gasPrice: \"30000000000\",\r\n        // }).then(async function (receipt) {\r\n        //   const tokenId = await certificateSet.methods\r\n        //     .encodeTokenId(0, sendToPubKey.value)\r\n        //     .call();\r\n\r\n        const certificate_signers = [];\r\n        let index = 0;\r\n        for (const assignToUser of assignToUsers) {\r\n          certificate_signers.push({\r\n            user_id: assignToUser.user_id,\r\n            priority: index,\r\n          });\r\n          index++;\r\n        }\r\n\r\n        //save to database\r\n        API.addCertificate({\r\n          admin_id: props.admin.admin_id,\r\n          user_id: sendToUser.user_id,\r\n          logo: certificateLogo,\r\n          name: documentName.value,\r\n          title: certificateTitle.value,\r\n          no: certificateNo.value,\r\n          description: certificateDescription.value,\r\n          score: certificateScore.value,\r\n          date: certificateDate.value,\r\n          sc_address: institution.sc_address,\r\n          token_id: \"0\", //tokenId, (default tokenid before minting)\r\n          receiver_name: receiverName.value,\r\n          certificate_type_id: selectedCertType.value,\r\n          certificate_signers,\r\n        });\r\n\r\n        createNotification({\r\n          type: \"success\",\r\n          value: \"Your certificate has been created\", //already on blockchain\",\r\n        });\r\n\r\n        history.push(`/dashboard/${actor}?menu=manage-certificate`);\r\n        // });\r\n      } catch (e) {\r\n        console.log(e);\r\n        createNotification({\r\n          type: \"error\",\r\n          value: \"Something went wrong\",\r\n        });\r\n      }\r\n      // }\r\n    }\r\n  };\r\n\r\n  // old submit deploying new contract\r\n  // const submit = async () => {\r\n  //   const certificateHash = getDataToSign({\r\n  //     receiver_name: receiverName.value,\r\n  //     no: certificateNo.value,\r\n  //     title: certificateTitle.value,\r\n  //     description: certificateDescription.value,\r\n  //     score: certificateScore.value,\r\n  //     date: certificateDate.value\r\n  //   });\r\n\r\n  //   let approvers = [];\r\n  //   for (const assignToPubKey of assignToPubKeys) {\r\n  //     approvers.push(assignToPubKey.value);\r\n  //   }\r\n\r\n  //   const tx = DigitalCertificate.deploy(certificateHash, sendToPubKey.value, approvers);\r\n  //   const accounts = await web3.eth.getAccounts();\r\n  //   try {\r\n  //     createNotification({\r\n  //       type: \"info\",\r\n  //       value: \"Please check your metamask and stay on this page until certificate has been deployed to blockchain\"});\r\n  //     const res = await tx.send({\r\n  //       from: accounts[0],\r\n  //       gas: 3000000,\r\n  //       gasPrice: '30000000000'\r\n  //     });\r\n\r\n  //     const certificate_signers = [];\r\n  //     let index = 0;\r\n  //     for (const assignToUser of assignToUsers) {\r\n  //       certificate_signers.push({\r\n  //         user_id: assignToUser.user_id,\r\n  //         priority: index\r\n  //       });\r\n  //       index++;\r\n  //     }\r\n\r\n  //     API.addCertificate({\r\n  //       admin_id: props.admin.admin_id,\r\n  //       user_id: sendToUser.user_id,\r\n  //       logo: certificateLogo,\r\n  //       name: documentName.value,\r\n  //       title: certificateTitle.value,\r\n  //       no: certificateNo.value,\r\n  //       description: certificateDescription.value,\r\n  //       score: certificateScore.value,\r\n  //       date: certificateDate.value,\r\n  //       sc_address: res._address,\r\n  //       token_id: res._tokenId,\r\n  //       receiver_name: receiverName.value,\r\n  //       certificate_signers\r\n  //     });\r\n\r\n  //     await CertificateSet.verify(res._address, [certificateHash, sendToPubKey.value, approvers]);\r\n\r\n  //     createNotification({\r\n  //       type: \"success\",\r\n  //       value: \"Your certificate already on blockchain\"});\r\n\r\n  //       history.push(`/dashboard/${actor}?menu=manage-certificate`);\r\n  //   } catch(e) {\r\n  //     console.log(e);\r\n  //     createNotification({\r\n  //       type: \"error\",\r\n  //       value: \"Something went wrong\"\r\n  //     })\r\n  //   }\r\n  // }\r\n\r\n  // const onDelete = async () => {\r\n  //   try {\r\n  //     if (!web3.utils.isAddress(deleteSelectedData.scAddress)) {\r\n  //       throw \"Certificate not exist on blockchain\";\r\n  //     }\r\n\r\n  //     const certificateSet = CertificateSet.getNewInstance(deleteSelectedData.scAddress);\r\n  //     const accounts = await web3.eth.getAccounts();\r\n  //     createNotification({\r\n  //       type: \"info\",\r\n  //       value: \"Please check your metamask\"\r\n  //     });\r\n  //     await certificateSet.methods.dropCertificate().send({\r\n  //       from: accounts[0],\r\n  //       gas: await certificateSet.methods.dropCertificate().estimateGas({from: accounts[0]}),\r\n  //       gasPrice: '100000000000'\r\n  //     });\r\n  //     createNotification({\r\n  //       type: \"success\",\r\n  //       value: `Drop certificate success`\r\n  //     });\r\n  //     getAllCertificates(currentPage - 1, itemsPerPage);\r\n  //   } catch (e) {\r\n  //     const message = typeof e === 'object' ? e.message : e;\r\n  //     createNotification({\r\n  //       type: \"error\",\r\n  //       value: message\r\n  //     });\r\n\r\n  //   }\r\n  // }\r\n\r\n  const resolveContent = () => {\r\n    if (view) {\r\n      return <ViewCertificate actor={actor} certificateId={certificateId} />;\r\n    } else if (step) {\r\n      switch (step) {\r\n        case \"1\":\r\n          return (\r\n            <CreateCertificate1\r\n              getInputValue={getInputValue}\r\n              setInputValue={setInputValue}\r\n            />\r\n          );\r\n        case \"2\":\r\n          return (\r\n            <CreateCertificate2\r\n              getInputValue={getInputValue}\r\n              setInputValue={setInputValue}\r\n              sendToUser={sendToUser}\r\n              assignToPubKeys={assignToPubKeys}\r\n              setAssignToPubKeys={setAssignToPubKeys}\r\n              assignToUsers={assignToUsers}\r\n              setAssignToUsers={setAssignToUsers}\r\n            />\r\n          );\r\n        case \"3\":\r\n          return (\r\n            <CreateCertificate3\r\n              sendToUser={sendToUser}\r\n              assignToUsers={assignToUsers}\r\n              getInputValue={getInputValue}\r\n              submit={submit}\r\n            />\r\n          );\r\n        default:\r\n          return;\r\n      }\r\n    } else if (memberStep) {\r\n      switch (memberStep) {\r\n        case \"1\":\r\n          return (\r\n            <CreateCertificateMember1\r\n              getInputValue={getInputValue}\r\n              setInputValue={setInputValue}\r\n            />\r\n          );\r\n        default:\r\n          return;\r\n      }\r\n    } else {\r\n      return (\r\n        <React.Fragment>\r\n          {actor === ACTOR.ADMIN && props.admin.name === \"creator\" ? (\r\n            <div className=\"bef-table\">\r\n              <div className=\"btn-add-certificate\">\r\n                <SubmitButton\r\n                  buttonText={\"Create Certificate\"}\r\n                  onClick={() => {\r\n                    setShowModalCertType(true);\r\n                  }}\r\n                ></SubmitButton>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <></>\r\n          )}\r\n          <TableCertificate\r\n            certificates={certificates}\r\n            setIsDelete={setIsDelete}\r\n            actor={actor}\r\n          />\r\n          <Pagination\r\n            currentPage={currentPage}\r\n            itemsPerPage={itemsPerPage}\r\n            totalItem={certificates.length}\r\n            setCurrentPage={setCurrentPage}\r\n            reloadFunction={getAllCertificates}\r\n          />\r\n          <ModalSelectCertType\r\n            visible={showModalCertType}\r\n            onSubmit={(val) => {\r\n              setShowModalCertType(false);\r\n              setSelectedCertType(val);\r\n            }}\r\n            onCancel={() => {\r\n              setShowModalCertType(false);\r\n            }}\r\n          />\r\n        </React.Fragment>\r\n      );\r\n    }\r\n  };\r\n\r\n  const resolveSubtitle = () => {\r\n    if (view) {\r\n      return (\r\n        <h6 className=\"breadcrumb-path\"> Manage Certificate - View Document</h6>\r\n      );\r\n    } else if (step) {\r\n      switch (step) {\r\n        case \"1\":\r\n        case \"2\":\r\n        case \"3\":\r\n          return (\r\n            <h6 className=\"breadcrumb-path\">\r\n              {\" \"}\r\n              Manage Certificate - Create Document\r\n            </h6>\r\n          );\r\n        default:\r\n          return <div></div>;\r\n      }\r\n    } else if (memberStep) {\r\n      switch (memberStep) {\r\n        case \"1\":\r\n          return (\r\n            <h6 className=\"breadcrumb-path\">\r\n              Manage Certificate - Create Document Member\r\n            </h6>\r\n          );\r\n\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    } else {\r\n      return <div />;\r\n    }\r\n  };\r\n\r\n  const resolveProgressBarContent = () => {\r\n    if (!step) {\r\n      return [];\r\n    }\r\n\r\n    return [\r\n      {\r\n        success: Number(step) >= 1 ? true : false,\r\n        text: \"Add Document\",\r\n      },\r\n      {\r\n        success: Number(step) >= 2 ? true : false,\r\n        text: \"Assign Document\",\r\n      },\r\n      {\r\n        success: Number(step) >= 3 ? true : false,\r\n        text: \"Preview\",\r\n      },\r\n    ];\r\n  };\r\n\r\n  return (\r\n    <div className=\"certificate-content\">\r\n      <div className=\"breadcrumb\">\r\n        <h1>Manage Certificate</h1>\r\n        {resolveSubtitle()}\r\n      </div>\r\n      <ProgressBar progress={resolveProgressBarContent()} />\r\n      {resolveContent()}\r\n      {/* <Delete delete={isDelete} setIsDelete={setIsDelete} del={onDelete} /> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  admin: state.getIn([\"actor\", \"admin\"]).toJS(),\r\n  user: state.getIn([\"actor\", \"user\"]).toJS(),\r\n  type: state.getIn([\"actor\", \"type\"]),\r\n});\r\n\r\nexport default connect(mapStateToProps)(\r\n  React.memo(withRouter(ManageCertificate))\r\n);\r\n","C:\\frontend\\src\\pages\\ManageCertificate\\CertificateTypeMaster\\CertificateTypeMaster.js",["337","338"],"import { withRouter } from \"react-router-dom\";\r\nimport SubmitButton from \"../../../components/elements/SubmitButton/SubmitButton\";\r\n// import AddEditInstitution from \"./AddEditInstitution\";\r\nimport { useEffect, useState } from \"react\";\r\nimport ModalCertificateType from \"../../../components/Modal/ModalCertificateType\";\r\nimport Delete from \"../../../components/Popup/Delete\";\r\nimport TableCertificateTypes from \"../../../components/Table/TableCertificateTypes\";\r\nimport Pagination from \"../../../components/elements/Pagination/Pagination\";\r\nimport API from \"../../../services/api\";\r\nimport styles from \"./CertificateTypeMaster.module.scss\";\r\n\r\nconst CertificateTypeMaster = (props) => {\r\n  const [isDelete, setIsDelete] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [itemsPerPage] = useState(10);\r\n  const [certTypes, setCertTypes] = useState([]);\r\n  const [selectedCert, setSelectedCert] = useState(null);\r\n\r\n  const [isLoading, setLoading] = useState(false);\r\n  const [isLoadingDelete, setLoadingDelete] = useState(false);\r\n\r\n  const [modalChange, setModalChange] = useState(false);\r\n\r\n  useEffect(() => {\r\n    getAllCertificateTypes(currentPage - 1, itemsPerPage);\r\n  }, []);\r\n\r\n  const getAllCertificateTypes = async (offset, limit) => {\r\n    if (!isLoading) {\r\n      setLoading(true);\r\n    }\r\n    try {\r\n      const results = await API.getAllCertificateTypes(offset, limit);\r\n      const certTypes = [];\r\n      for (const result of results) {\r\n        certTypes.push({\r\n          name: result?.type,\r\n          id: result?.certificate_type_id,\r\n        });\r\n      }\r\n      if (certTypes.length > 0) {\r\n        setCertTypes(certTypes);\r\n      }\r\n    } catch (error) {\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleDelete = async () => {\r\n    setLoadingDelete(true);\r\n    try {\r\n      const response = await API.deleteCertificateType({\r\n        certificate_type_id: selectedCert?.id,\r\n      });\r\n      setSelectedCert(null);\r\n      getAllCertificateTypes(currentPage - 1, itemsPerPage);\r\n    } catch (error) {\r\n    } finally {\r\n      setLoadingDelete(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={styles[\"certificatetype-content\"]}>\r\n      <div className={styles[\"breadcrumb\"]}>\r\n        <h1>Certificate Type Master</h1>\r\n      </div>\r\n      <div className={styles[\"bef-table\"]}>\r\n        <div className={styles[\"btn-add-certificatetype\"]}>\r\n          <SubmitButton\r\n            buttonText={\"Add Certificate Type\"}\r\n            onClick={() => setModalChange(true)}\r\n          ></SubmitButton>\r\n        </div>\r\n      </div>\r\n      <TableCertificateTypes\r\n        loading={isLoading}\r\n        // setInputValue={setInputValue}\r\n        certTypes={certTypes}\r\n        // setIsEdit={setIsEdit}\r\n        onDelete={(certType) => {\r\n          setIsDelete(true);\r\n          setSelectedCert(certType);\r\n        }}\r\n        onEdit={(certType) => {\r\n          setModalChange(true);\r\n          setSelectedCert(certType);\r\n        }}\r\n      />\r\n      <Pagination\r\n        currentPage={currentPage}\r\n        itemsPerPage={itemsPerPage}\r\n        totalItem={certTypes.length}\r\n        setCurrentPage={setCurrentPage}\r\n        reloadFunction={getAllCertificateTypes}\r\n      />\r\n      {modalChange && (\r\n        <ModalCertificateType\r\n          onCancel={() => {\r\n            setModalChange(false);\r\n            if (selectedCert) {\r\n              setSelectedCert(null);\r\n            }\r\n          }}\r\n          onSubmitted={() => {\r\n            getAllCertificateTypes(currentPage - 1, itemsPerPage);\r\n            setModalChange(false);\r\n            if (selectedCert) {\r\n              setSelectedCert(null);\r\n            }\r\n          }}\r\n          selectedData={selectedCert}\r\n          visible={modalChange}\r\n          title={\"Add Certificate Type\"}\r\n        />\r\n      )}\r\n      {/* <AddEditInstitution\r\n        add={isAdd}\r\n        edit={isEdit}\r\n        setIsAdd={setIsAdd}\r\n        setIsEdit={setIsEdit}\r\n        submit={submit}\r\n        update={update}\r\n        getInputValue={getInputValue}\r\n        setInputValue={setInputValue}\r\n      /> */}\r\n      <Delete\r\n        loading={isLoadingDelete}\r\n        delete={isDelete}\r\n        setIsDelete={setIsDelete}\r\n        del={handleDelete}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(CertificateTypeMaster);\r\n","C:\\frontend\\src\\components\\Header\\Header.js",["339"],"import \"./Header.scss\";\r\n// import logo from \"../../assets/images/logo.svg\";\r\n// import aniLogoWhite from \"../../assets/images/ani-logo-white.png\";\r\n// import avatar from \"../../assets/images/avatar.svg\";\r\nimport iconMore from \"../../assets/icons/circle-chevron-down.svg\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSignOutAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { useMemo, useState } from \"react\";\r\nimport { history } from \"../../store\";\r\nimport { ACTOR } from \"../../constants/component.constant\";\r\n// import SubmitButton from \"../elements/SubmitButton/SubmitButton\";\r\n// import { HOST } from \"../../services/api\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst Header = (props) => {\r\n  const [menuVisible, setMenuVisible] = useState(false);\r\n  const admin = useSelector((state) => state.getIn([\"actor\", \"admin\"]).toJS());\r\n\r\n  // const profilePhoto = useMemo(() => {\r\n  //   return props.actor && props.actor.photo\r\n  //     ? `${HOST}/api/files/${props.actor.photo}`\r\n  //     : avatar;\r\n  // }, [props.actor]);\r\n\r\n  const profileName = useMemo(() => {\r\n    return props.actor && props.actor.name ? props.actor.name : \"User\";\r\n  }, [props.actor]);\r\n\r\n  const profileRole = useMemo(() => {\r\n    return props.actor && props.actor.admin_role\r\n      ? props.actor.admin_role\r\n      : \"User\";\r\n  }, [props.actor]);\r\n\r\n  const actorPubKey = useMemo(() => {\r\n    return props.actor\r\n      ? props.type === ACTOR.ADMIN\r\n        ? props.actor.public_key\r\n        : props.actor.public_key\r\n      : undefined;\r\n  }, [props.actor]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"header\">\r\n        <div className=\"header-left\">\r\n          <div\r\n            className=\"\"\r\n            onClick={() =>\r\n              history.push(`/dashboard/${admin?.admin_id ? \"ADMIN\" : \"USER\"}`)\r\n            }\r\n          >\r\n            {/* <img alt=\"logo-white\" src={aniLogoWhite}></img> */}\r\n          </div>\r\n        </div>\r\n        <div className=\"header-right\">\r\n          {props.actor ? (\r\n            <div className=\"profile\">\r\n              {/* <img className=\"avatar\" src={profilePhoto} alt=\"profile\" /> */}\r\n              <div className=\"right\">\r\n                <span className=\"name\">{profileName}</span>\r\n                <div className=\"role\">{profileRole}</div>\r\n              </div>\r\n              <img\r\n                className=\"more\"\r\n                src={iconMore}\r\n                onClick={() => setMenuVisible(!menuVisible)}\r\n                alt=\"more\"\r\n              />\r\n            </div>\r\n          ) : (\r\n            <></>\r\n          )}\r\n          {menuVisible ? (\r\n            <div className=\"profile-options\">\r\n              <div className=\"menu\">\r\n                <div\r\n                  className=\"sub-menu\"\r\n                  onClick={() => {\r\n                    if (props.logout) {\r\n                      history.push(\r\n                        `/profile?actor_type=${props.type}&actor_public_key=${actorPubKey}`\r\n                      );\r\n                    }\r\n                  }}\r\n                >\r\n                  <span>Details</span>\r\n                  <FontAwesomeIcon icon={faSignOutAlt} />\r\n                </div>\r\n                <div\r\n                  className=\"sub-menu\"\r\n                  onClick={() => {\r\n                    if (props.logout) {\r\n                      props.logout();\r\n                    }\r\n                  }}\r\n                >\r\n                  <span>Logout</span>\r\n                  <FontAwesomeIcon icon={faSignOutAlt} />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div></div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","C:\\frontend\\src\\components\\Table\\TableCertificate.js",["340","341","342","343","344","345","346","347","348"],"import { Component, useEffect, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { ACTOR, CERTIFICATE_STATUS } from \"../../constants/component.constant\";\r\nimport CertificateSet from \"../../contracts/digital_certificate\";\r\nimport { setDeleteSelectedData } from \"../../modules/actions/delete.action\";\r\nimport web3 from \"../../services/web3\";\r\nimport \"./Table.scss\";\r\n\r\nexport default (props) => {\r\n  const [certificateStatus, setCertificateStatus] = useState({});\r\n  const dispatch = useDispatch();\r\n  \r\n  // const getCertificateStatus = async (tokenId) => {\r\n  //   const newCertificateStatus = { ...certificateStatus };\r\n  //   for (const {scAddress} of props.certificates) {\r\n  //     if (!web3.utils.isAddress(scAddress)) {\r\n  //       continue;\r\n  //     }\r\n  //     const certificateSet = CertificateSet.getNewInstance(scAddress);\r\n  //     newCertificateStatus[scAddress] = CERTIFICATE_STATUS[await certificateSet.methods.status(tokenId).call()];\r\n  //     // newCertificateStatus[scAddress] = CERTIFICATE_STATUS[await certificateSet.methods.status().call()];\r\n  //   }\r\n  //   setCertificateStatus(newCertificateStatus);\r\n  // }\r\n\r\n  // useEffect(() => {\r\n  //   getCertificateStatus(0);\r\n  // }, [props.certificates] );\r\n\r\n  const renderTableData = () => {\r\n    return props.certificates.map((certificate, index) => {\r\n      const { id, date, documentName, sendTo, signaturedBy, status, scAddress, tokenId } = certificate; //destructuring\r\n      return (\r\n        <tr key={id}>\r\n          <td>{date}</td>\r\n          <td>{documentName}</td>\r\n          <td>{sendTo}</td>\r\n          <td>{signaturedBy}</td>\r\n          <td>{CERTIFICATE_STATUS[status]}</td>\r\n          <td>\r\n            <Link\r\n              style={{ color: \"black\" }}\r\n              to={`/dashboard/${props.actor}?menu=manage-certificate&view_certificate=true&certificate_id=${id}`}\r\n            >\r\n              View\r\n            </Link>\r\n            {props.actor === ACTOR.ADMIN ? ',' : ''}\r\n            {props.actor === ACTOR.ADMIN ?\r\n            <Link\r\n              style={{ color: \"red\" }}\r\n              to=\"\"\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                props.setIsDelete(true);\r\n                dispatch(setDeleteSelectedData(certificate));\r\n              }}\r\n            >\r\n              Delete\r\n            </Link> : <></>}\r\n          </td>\r\n        </tr>\r\n      );\r\n    });\r\n  }\r\n\r\n  const renderTableHeader = () => {\r\n    return (\r\n      <tr>\r\n        <th>Date</th>\r\n        <th>Document Name</th>\r\n        <th>Send To</th>\r\n        <th>Signed By</th>\r\n        <th>Status</th>\r\n        <th>Action</th>\r\n      </tr>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <table className=\"certificate-table\">\r\n        <thead>{renderTableHeader()}</thead>\r\n        <tbody className=\"content-table\">\r\n          {renderTableData(props)}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n","C:\\frontend\\src\\components\\SearchCertifcate\\SearchCertificate.js",["349"],"import SubmitButton from \"../elements/SubmitButton/SubmitButton\";\r\nimport InputField from \"../elements/InputField/InputField\";\r\nimport { useEffect, useState } from \"react\";\r\nimport ViewCertificate from \"../../pages/ManageCertificate/ViewCertificate\";\r\nimport searchIcon from \"../../assets/icons/search.svg\";\r\nimport API from \"../../services/api\";\r\nimport { createNotification } from \"../Notification/Notification\";\r\nimport { INPUT_STATUS } from \"../../constants/component.constant\";\r\n\r\nimport styles from \"./SearchCertificate.module.scss\";\r\n\r\nconst SearchCertifcate = (props) => {\r\n  const [scAddress, setScAddress] = useState({\r\n    status: INPUT_STATUS.INIT,\r\n    value: \"\",\r\n    errorMessage: \"\",\r\n  });\r\n\r\n  const [tokenId, setTokenId] = useState({\r\n    status: INPUT_STATUS.INIT,\r\n    value: \"\",\r\n    errorMessage: \"\",\r\n  });\r\n\r\n  const [isProcessing, setProcessing] = useState(false);\r\n  const [certificateId, setCertificateId] = useState(null);\r\n\r\n  const getCertificateId = async (address, tokenId) => {\r\n\r\n    let status =\r\n      address && tokenId !== \"\"\r\n        ? INPUT_STATUS.VALID\r\n        : INPUT_STATUS.INVALID;\r\n    let errorMessage =\r\n      status === INPUT_STATUS.INVALID ? `Contract Address and NFT Id are required` : \"\";\r\n      \r\n    if ( status !== \"VALID\")\r\n    {\r\n      createNotification({\r\n        type: \"error\",\r\n        value: errorMessage,\r\n      });\r\n      return;\r\n    }\r\n\r\n    setCertificateId(null);\r\n    if (!address || address === \"\") {\r\n      return;\r\n    }\r\n    setProcessing(true);\r\n    const certificate = await API.getCertificateByScAddressAndTokenId(\r\n      address,\r\n      tokenId\r\n    );\r\n\r\n    if (certificate) {\r\n      setCertificateId(certificate.certificate_id);\r\n    } else {\r\n      createNotification({\r\n        type: \"error\",\r\n        value: `Certificate can't be found`,\r\n      });\r\n    }\r\n    setProcessing(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props.contractAddress) {\r\n      setScAddress({\r\n        status: INPUT_STATUS.VALID,\r\n        value: props.contractAddress,\r\n      });\r\n      getCertificateId(props.contractAddress);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <div className={styles.searchCertificate}>\r\n        <h4>Certificate Search</h4>\r\n\r\n        <p>\r\n            Contract Address <font color=\"red\">*</font>\r\n        </p>\r\n        <InputField\r\n          type=\"text\"\r\n          name=\"search-input\"\r\n          placeholder=\"Contract Address\"\r\n          value={scAddress}\r\n          onChange={(e) => {\r\n            setScAddress({\r\n              status: !e?.target?.value\r\n                ? INPUT_STATUS.INIT\r\n                : INPUT_STATUS.VALID,\r\n              value: e.target.value,\r\n              errorMessage: \"\",\r\n            });\r\n          }}\r\n        />\r\n        <div className=\"mt-2\" />\r\n        <p>\r\n            NFT ID <font color=\"red\">*</font>\r\n        </p>\r\n        <InputField\r\n          type=\"text\"\r\n          name=\"search-input\"\r\n          placeholder=\"NFT Id\"\r\n          value={tokenId}\r\n          onChange={(e) => {\r\n            setTokenId({\r\n              status: !e?.target?.value\r\n                ? INPUT_STATUS.INIT\r\n                : INPUT_STATUS.VALID,\r\n              value: e.target.value,\r\n              errorMessage: \"\",\r\n            });\r\n          }}\r\n        />\r\n        <div className=\"mt-6\" />\r\n        <SubmitButton\r\n          isProcessing={isProcessing}\r\n          buttonText={\"Search\"}\r\n          onClick={() => getCertificateId(scAddress?.value, tokenId?.value)}\r\n        />\r\n      </div>\r\n      <div className=\"separator mt-6 mb-8\" />\r\n      {certificateId ? (\r\n        <div className={styles.searchKeyword}>\r\n          <img\r\n            src={searchIcon}\r\n            className={styles.searchIcon}\r\n            alt=\"searchicon\"\r\n          />\r\n          <span className={styles.searchKeywordTitle}>You search for: </span>\r\n          <span className={styles.searchKeywordValue}>{scAddress?.value}</span>\r\n        </div>\r\n      ) : (\r\n        <div />\r\n      )}\r\n\r\n      {certificateId ? (\r\n        <ViewCertificate certificateId={certificateId} />\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchCertifcate;\r\n","C:\\frontend\\src\\components\\Footer\\Footer.js",["350"],"import './Footer.scss';\r\n\r\nexport default () => {\r\n    return (\r\n        <div className=\"footer\">\r\n            <div className=\"title\">\r\n                <h5>BLOCKCHAIN - BASED EDUCATIONAL CERTIFICATES</h5>\r\n            </div>\r\n            <p>Copyright 2020 ©</p>\r\n        </div>\r\n    );\r\n}","C:\\frontend\\src\\components\\Sidebar\\Sidebar.js",["351","352"],"import \"./Sidebar.scss\";\r\nimport menuIcon from \"../../assets/icons/menu.svg\";\r\nimport homeActiveIcon from \"../../assets/icons/home-active.svg\";\r\nimport homeInactiveIcon from \"../../assets/icons/home-inactive.svg\";\r\nimport folderActiveIcon from \"../../assets/icons/folder-active.svg\";\r\nimport folderInactiveIcon from \"../../assets/icons/folder-inactive.svg\";\r\n\r\nimport { history } from \"../../store\";\r\nimport { useEffect, useState } from \"react\";\r\nimport React from \"react\";\r\nimport { ACTOR } from \"../../constants/component.constant\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst Sidebar = (props) => {\r\n  const [isManageUser, setIsManageUser] = useState(false);\r\n  const admin = useSelector((state) => state.getIn([\"actor\", \"admin\"]).toJS());\r\n\r\n  useEffect(() => {\r\n    if (\r\n      !props.menu &&\r\n      (props.menu === \"role-master\" ||\r\n        props.menu === \"instution-master\" ||\r\n        props.menu === \"user-master\")\r\n    ) {\r\n      setIsManageUser(true);\r\n    } else {\r\n      setIsManageUser(false);\r\n    }\r\n  }, []);\r\n\r\n  const mainAdminMenu = () => {\r\n    return (\r\n      <React.Fragment>\r\n        <div\r\n          className={(!props.menu ? \"menu active\" : \"menu\") + \" separator-menu\"}\r\n          onClick={() => history.push(`/dashboard/${props.actor}`)}\r\n        >\r\n          <div className=\"iconName\">\r\n            <img\r\n              alt=\"ic-home\"\r\n              src={!props.menu ? homeActiveIcon : homeInactiveIcon}\r\n            />\r\n            <span>Dashboard</span>\r\n            {!props.menu ? (\r\n              <div className=\"dotActive\" />\r\n            ) : (\r\n              <div className=\"dotInactive\" />\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div\r\n          className={\r\n            (props.menu === \"manage_user\" ? \"menu active\" : \"menu\") +\r\n            \" separator-sub-menu\"\r\n          }\r\n          onClick={() => setIsManageUser(!isManageUser)}\r\n        >\r\n          <div className=\"iconName\">\r\n            <img\r\n              alt=\"ic-manage\"\r\n              src={\r\n                props.menu === \"manage_user\"\r\n                  ? folderActiveIcon\r\n                  : folderInactiveIcon\r\n              }\r\n            />\r\n            <span>Manage Admin</span>\r\n            {props.menu === \"manage-user\" ? (\r\n              <div className=\"dotActive\" />\r\n            ) : (\r\n              <div className=\"dotInactive\" />\r\n            )}\r\n          </div>\r\n        </div>\r\n        {isManageUser ? (\r\n          <React.Fragment>\r\n            <div\r\n              className={\r\n                props.menu === \"institution-master\"\r\n                  ? \"menu sub active\"\r\n                  : \"menu sub\"\r\n              }\r\n              onClick={() =>\r\n                history.push(\r\n                  `/dashboard/${props.actor}?menu=institution-master`\r\n                )\r\n              }\r\n            >\r\n              <div className=\"iconName\">\r\n                <span>Institution Master</span>\r\n                {props.menu === \"institution-master\" ? (\r\n                  <div className=\"dotActive\" />\r\n                ) : (\r\n                  <div className=\"dotInactive\" />\r\n                )}\r\n              </div>\r\n            </div>\r\n            <div\r\n              className={\r\n                props.menu === \"admin-master\" ? \"menu sub active\" : \"menu sub\"\r\n              }\r\n              onClick={() =>\r\n                history.push(`/dashboard/${props.actor}?menu=admin-master`)\r\n              }\r\n            >\r\n              <div className=\"iconName\">\r\n                <span>Admin Master</span>\r\n                {props.menu === \"admin-master\" ? (\r\n                  <div className=\"dotActive\" />\r\n                ) : (\r\n                  <div className=\"dotInactive\" />\r\n                )}\r\n              </div>\r\n            </div>\r\n            <div\r\n              className={\r\n                props.menu === \"certificate-type-master\"\r\n                  ? \"menu sub active\"\r\n                  : \"menu sub\"\r\n              }\r\n              onClick={() =>\r\n                history.push(\r\n                  `/dashboard/${props.actor}?menu=certificate-type-master`\r\n                )\r\n              }\r\n            >\r\n              <div className=\"iconName\">\r\n                <span>Certificate Type Master</span>\r\n                {props.menu === \"certificate-type-master\" ? (\r\n                  <div className=\"dotActive\" />\r\n                ) : (\r\n                  <div className=\"dotInactive\" />\r\n                )}\r\n              </div>\r\n            </div>\r\n          </React.Fragment>\r\n        ) : (\r\n          <div></div>\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  const institutionAdminMenu = () => {\r\n    return (\r\n      <React.Fragment>\r\n        <div\r\n          className={(!props.menu ? \"menu active\" : \"menu\") + \" separator-menu\"}\r\n          onClick={() => history.push(`/dashboard/${props.actor}`)}\r\n        >\r\n          <div className=\"iconName\">\r\n            <img\r\n              alt=\"ic-home\"\r\n              src={!props.menu ? homeActiveIcon : homeInactiveIcon}\r\n            />\r\n            <span>Dashboard</span>\r\n            {!props.menu ? (\r\n              <div className=\"dotActive\" />\r\n            ) : (\r\n              <div className=\"dotInactive\" />\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div\r\n          className={\r\n            props.menu === \"manage-certificate\" ? \"menu active\" : \"menu\"\r\n          }\r\n          onClick={() =>\r\n            history.push(`/dashboard/${props.actor}?menu=manage-certificate`)\r\n          }\r\n        >\r\n          <div className=\"iconName\">\r\n            <img\r\n              alt=\"ic-home\"\r\n              src={\r\n                props.menu === \"manage-certificate\"\r\n                  ? folderActiveIcon\r\n                  : folderInactiveIcon\r\n              }\r\n            />\r\n            <span>Manage Certificates</span>\r\n\r\n            {props.menu === \"manage-certificate\" ? (\r\n              <div className=\"dotActive\" />\r\n            ) : (\r\n              <div className=\"dotInactive\" />\r\n            )}\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  const adminMenu = () => {\r\n    if (admin && admin.admin_role === \"MAIN\") {\r\n      return mainAdminMenu();\r\n    }\r\n\r\n    return institutionAdminMenu();\r\n  };\r\n\r\n  const userMenu = () => {\r\n    return (\r\n      <React.Fragment>\r\n        <div\r\n          className={(!props.menu ? \"menu active\" : \"menu\") + \" separator-menu\"}\r\n          onClick={() => history.push(`/dashboard`)}\r\n        >\r\n          <div className=\"iconName\">\r\n            <img\r\n              alt=\"ic-home\"\r\n              src={!props.menu ? homeActiveIcon : homeInactiveIcon}\r\n            />\r\n            <span>Dashboard</span>\r\n            {!props.menu ? (\r\n              <div className=\"dotActive\" />\r\n            ) : (\r\n              <div className=\"dotInactive\" />\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div\r\n          className={\r\n            props.menu === \"manage-certificate\" ? \"menu active\" : \"menu\"\r\n          }\r\n          onClick={() =>\r\n            history.push(\"/dashboard/USER?menu=manage-certificate\")\r\n          }\r\n        >\r\n          <div className=\"iconName\">\r\n            <img\r\n              alt=\"ic-home\"\r\n              src={\r\n                props.menu === \"manage-certificate\"\r\n                  ? folderActiveIcon\r\n                  : folderInactiveIcon\r\n              }\r\n            />\r\n            <span>Manage Certificates</span>\r\n\r\n            {props.menu === \"manage-certificate\" ? (\r\n              <div className=\"dotActive\" />\r\n            ) : (\r\n              <div className=\"dotInactive\" />\r\n            )}\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  const resolveMenu = () => {\r\n    switch (props.actor) {\r\n      case ACTOR.ADMIN:\r\n        return adminMenu();\r\n      case ACTOR.USER:\r\n        return userMenu();\r\n      default:\r\n        return <div />;\r\n    }\r\n  };\r\n\r\n  return <div className=\"sidebar\">{resolveMenu()}</div>;\r\n};\r\n\r\nexport default Sidebar;\r\n","C:\\frontend\\src\\pages\\ManageUser\\InstitutionMaster\\InstitutionMaster.js",["353","354","355","356","357","358","359","360"],"import { useParams, withRouter } from \"react-router-dom\";\r\nimport SubmitButton from \"../../../components/elements/SubmitButton/SubmitButton\";\r\nimport TableInstitution from \"../../../components/Table/TableInstitution\";\r\nimport AddEditInstitution from \"./AddEditInstitution\";\r\nimport Delete from \"../../../components/Popup/Delete\";\r\nimport Pagination from \"../../../components/elements/Pagination/Pagination\";\r\nimport { useEffect, useState } from \"react\";\r\nimport \"./InstitutionMaster.scss\";\r\nimport API from \"../../../services/api\";\r\nimport { INPUT_STATUS } from \"../../../constants/component.constant\";\r\nimport { createNotification } from \"../../../components/Notification/Notification\";\r\nimport { history } from \"../../../store\";\r\nimport web3 from \"../../../services/web3\";\r\nimport CertificateSetFactory from \"../../../contracts/digital_certificate_factory\";\r\n\r\nconst InstitutionMaster = (props) => {\r\n  const value = {};\r\n\r\n  const [isAdd, setIsAdd] = useState(false);\r\n  const [isEdit, setIsEdit] = useState(false);\r\n  const [isDelete, setIsDelete] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [itemsPerPage] = useState(10);\r\n  const [institutions, setInstitutions] = useState([]);\r\n  const [institutionId, setInstitutionId] = useState({\r\n    value: \"\",\r\n  });\r\n  const [institutionName, setInstitutionName] = useState({\r\n    status: INPUT_STATUS.INIT,\r\n    value: \"\",\r\n    errorMessage: \"\",\r\n  });\r\n  const [email, setEmail] = useState({\r\n    status: INPUT_STATUS.INIT,\r\n    value: \"\",\r\n    errorMessage: \"\",\r\n  });\r\n  const [phoneNumber, setPhoneNumber] = useState({\r\n    status: INPUT_STATUS.INIT,\r\n    value: \"\",\r\n    errorMessage: \"\",\r\n  });\r\n  const [address, setAddress] = useState({\r\n    status: INPUT_STATUS.INIT,\r\n    value: \"\",\r\n    errorMessage: \"\",\r\n  });\r\n  const [type, setType] = useState({\r\n    status: INPUT_STATUS.INIT,\r\n    value: \"UNIVERSITY\",\r\n    errorMessage: \"\",\r\n  });\r\n  const actor = useParams().actor;\r\n\r\n  const getAllInstitutions = async (offset, limit) => {\r\n    const results = await API.getAllInstitutions(offset, limit);\r\n    const newInstitutions = [];\r\n    for (const result of results) {\r\n      newInstitutions.push({\r\n        id: result.institution_id,\r\n        institutionName: result.name,\r\n        email: result.email,\r\n        phoneNumber: result.phone_number,\r\n        address: result.address,\r\n        type: result.type,\r\n        deletedDate: result.deleted_date,\r\n      });\r\n    }\r\n    if (newInstitutions.length > 0) {\r\n      setInstitutions(newInstitutions);\r\n    }\r\n  };\r\n\r\n  const submit = async () => {\r\n    try {\r\n      \r\n      const certificateSetFactory = CertificateSetFactory.getNewInstance('0x51DA842355Bf9536DB563766A60C559915bBeed9');//'0xfBEce0ED5143A6778a5DdFED685dCa33AC4c0B4e');\r\n      const accounts = await web3.eth.getAccounts();\r\n      const tx = certificateSetFactory.methods.createCertificateSet(accounts[0], institutionName.value);\r\n\r\n      createNotification({\r\n        type: \"Deploy...\", \r\n        value: \"Please check your metamask and stay on this page until new smartcontract is deployed for this Institution\"});\r\n\r\n      const res = await tx.send({\r\n        from: accounts[0],\r\n        gas: 3000000,\r\n        gasPrice: '30000000000'\r\n      });\r\n\r\n      const contractAddresses = await certificateSetFactory.methods.certificateSets().call();\r\n      const institutionContractAddress = contractAddresses[contractAddresses.length-1];\r\n\r\n      await API.addInstitution({\r\n        name: institutionName.value,\r\n        email: email.value,\r\n        phone_number: phoneNumber.value,\r\n        address: address.value,\r\n        type: type.value,\r\n        sc_address: institutionContractAddress,\r\n      });\r\n      createNotification({\r\n        type: \"success\",\r\n        value: \"Create institution success\",\r\n      });\r\n      getAllInstitutions(currentPage - 1, itemsPerPage);\r\n    } catch (e) {\r\n      console.log(e);\r\n      createNotification({\r\n        type: \"error\",\r\n        value: \"Something went wrong\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const update = async () => {\r\n    try {\r\n      await API.updateInstitution({\r\n        institution_id: institutionId.value,\r\n        name: institutionName.value,\r\n        email: email.value,\r\n        phone_number: phoneNumber.value,\r\n        address: address.value,\r\n        type: type.value,\r\n      });\r\n      createNotification({\r\n        type: \"success\",\r\n        value: \"Update institution success\",\r\n      });\r\n      getAllInstitutions(currentPage - 1, itemsPerPage);\r\n    } catch (e) {\r\n      console.log(e);\r\n      createNotification({\r\n        type: \"error\",\r\n        value: \"Something went wrong\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const del = async () => {\r\n    try {\r\n      await API.deleteInstitution({\r\n        institution_id: institutionId.value,\r\n      });\r\n      createNotification({\r\n        type: \"success\",\r\n        value: \"Delete institution success\",\r\n      });\r\n      getAllInstitutions(currentPage - 1, itemsPerPage);\r\n    } catch (e) {\r\n      console.log(e);\r\n      createNotification({\r\n        type: \"error\",\r\n        value: \"Something went wrong\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getAllInstitutions(currentPage - 1, itemsPerPage);\r\n  }, []);\r\n\r\n  const getInputValue = (key) => {\r\n    switch (key) {\r\n      case \"institutionId\":\r\n        return institutionId;\r\n      case \"institutionName\":\r\n        return institutionName;\r\n      case \"email\":\r\n        return email;\r\n      case \"phoneNumber\":\r\n        return phoneNumber;\r\n      case \"address\":\r\n        return address;\r\n      case \"type\":\r\n        return type;\r\n    }\r\n  };\r\n\r\n  const setInputValue = (key, value, setStatus) => {\r\n    let status =\r\n      !setStatus ? value && value != \"\" ? INPUT_STATUS.VALID : INPUT_STATUS.INVALID : setStatus;\r\n\r\n    switch (key) {\r\n      case \"institutionId\":\r\n        setInstitutionId({\r\n          value: value,\r\n        });\r\n        break;\r\n      case \"institutionName\":\r\n        setInstitutionName({\r\n          status,\r\n          value: value,\r\n          errorMessage: status === INPUT_STATUS.INVALID ? \"required field\" : \"\",\r\n        });\r\n        break;\r\n      case \"email\":\r\n        setEmail({\r\n          status,\r\n          value: value,\r\n          errorMessage: status === INPUT_STATUS.INVALID ? \"required field\" : \"\",\r\n        });\r\n        break;\r\n      case \"phoneNumber\":\r\n        setPhoneNumber({\r\n          status,\r\n          value: value,\r\n          errorMessage: status === INPUT_STATUS.INVALID ? \"required field\" : \"\",\r\n        });\r\n        break;\r\n      case \"address\":\r\n        setAddress({\r\n          status,\r\n          value: value,\r\n          errorMessage: status === INPUT_STATUS.INVALID ? \"required field\" : \"\",\r\n        });\r\n        break;\r\n      case \"type\":\r\n        setType({\r\n          status,\r\n          value: value,\r\n          errorMessage: status === INPUT_STATUS.INVALID ? \"required field\" : \"\",\r\n        });\r\n        break;\r\n    }\r\n  };\r\n\r\n  const openAddModal = () => {\r\n    setInputValue(\"institutionId\", '', INPUT_STATUS.INIT);\r\n    setInputValue(\"institutionName\", '', INPUT_STATUS.INIT);\r\n    setInputValue(\"email\", '', INPUT_STATUS.INIT);\r\n    setInputValue(\"phoneNumber\", '', INPUT_STATUS.INIT);\r\n    setInputValue(\"address\", '', INPUT_STATUS.INIT);\r\n    setInputValue(\"type\", 'UNIVERSITY', INPUT_STATUS.INIT);\r\n    setIsAdd(true);\r\n  }\r\n\r\n  return (\r\n    <div className=\"institution-content\">\r\n      <div className=\"breadcrumb\">\r\n        <h1>Institution Master</h1>\r\n      </div>\r\n      <div className=\"bef-table\">\r\n        <div className=\"btn-add-institution\">\r\n          <SubmitButton\r\n            buttonText={\"Add Institution\"}\r\n            onClick={() => openAddModal()}\r\n          ></SubmitButton>\r\n        </div>\r\n      </div>\r\n      <TableInstitution\r\n        setInputValue={setInputValue}\r\n        institutions={institutions}\r\n        setIsEdit={setIsEdit}\r\n        setIsDelete={setIsDelete}\r\n      />\r\n      <Pagination\r\n        currentPage={currentPage}\r\n        itemsPerPage={itemsPerPage}\r\n        totalItem={institutions.length}\r\n        setCurrentPage={setCurrentPage}\r\n        reloadFunction={getAllInstitutions}\r\n      />\r\n      <AddEditInstitution\r\n        add={isAdd}\r\n        edit={isEdit}\r\n        setIsAdd={setIsAdd}\r\n        setIsEdit={setIsEdit}\r\n        submit={submit}\r\n        update={update}\r\n        getInputValue={getInputValue}\r\n        setInputValue={setInputValue}\r\n      />\r\n      <Delete delete={isDelete} setIsDelete={setIsDelete} del={del} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(InstitutionMaster);\r\n","C:\\frontend\\src\\pages\\ManageUser\\UserMaster\\UserMaster.js",["361","362"],"import { withRouter } from \"react-router-dom\";\r\nimport SubmitButton from \"../../../components/elements/SubmitButton/SubmitButton\";\r\nimport TableUser from \"../../../components/Table/TableUser\";\r\nimport \"./UserMaster.scss\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { history } from \"../../../store\";\r\nimport AddEditUser from \"./AddEditUser\";\r\nimport ViewDataUser from \"./ViewDataUser\";\r\nimport Pagination from \"../../../components/elements/Pagination/Pagination\";\r\nimport API from \"../../../services/api\";\r\n\r\nconst UserMaster = (props) => {\r\n  const [isDelete, setIsDelete] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [itemsPerPage] = useState(10);\r\n  const [users, setUsers] = useState([]);\r\n  const [selectedUser, setSelectedUser] = useState({});\r\n\r\n  const getAllUsers = async (offset, limit) => {\r\n    setUsers(await API.getAllUsers(offset, limit));\r\n  }\r\n\r\n  const add = new URLSearchParams(props.location.search).get(\"add_user\");\r\n  const edit = new URLSearchParams(props.location.search).get(\"edit_user\");\r\n  const view = new URLSearchParams(props.location.search).get(\"view_user\");\r\n\r\n  useEffect(() => {\r\n    getAllUsers(currentPage - 1, itemsPerPage);\r\n  }, [add, edit]);\r\n\r\n  const resolveContent = () => {\r\n    if (add || edit) {\r\n      return <AddEditUser add={add} edit={edit} selectedUser={selectedUser} />;\r\n    } else if (view) {\r\n      return <ViewDataUser />;\r\n    } else {\r\n      return (\r\n        <React.Fragment>\r\n          <div className=\"bef-table\">\r\n            <div className=\"btn-add-user\">\r\n              <SubmitButton\r\n                buttonText={\"Add User\"}\r\n                onClick={() => {\r\n                  history.push(`/dashboard/ADMIN?menu=user-master&add_user=true`);\r\n                }}\r\n              ></SubmitButton>\r\n            </div>\r\n          </div>\r\n          <TableUser \r\n            users={users}\r\n            setSelectedUser={setSelectedUser} \r\n            setIsDelete={setIsDelete} \r\n          />\r\n          <Pagination\r\n            itemsPerPage={itemsPerPage}\r\n            totalItem={users.length}\r\n            currentPage={currentPage}\r\n            setCurrentPage={setCurrentPage}\r\n            reloadFunction={getAllUsers}\r\n          />\r\n        </React.Fragment>\r\n      );\r\n    }\r\n  };\r\n\r\n  const resolveSubtitle = () => {\r\n    if (add) {\r\n      return <h6 className=\"breadcrumb-path\"> Manage User - Add User</h6>;\r\n    } else if (edit) {\r\n      return <h6 className=\"breadcrumb-path\"> Manage User - Edit User</h6>;\r\n    } else if (view) {\r\n      return <h6 className=\"breadcrumb-path\"> Manage User - View User</h6>;\r\n    } else return <div></div>;\r\n  };\r\n\r\n  const subtitle = resolveSubtitle();\r\n  const content = resolveContent();\r\n  return (\r\n    <div className=\"user-content\">\r\n      <div className=\"breadcrumb\">\r\n        <h1>Manage User</h1>\r\n        {subtitle}\r\n      </div>\r\n      {content}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(UserMaster);\r\n","C:\\frontend\\src\\components\\elements\\SubmitButton\\SubmitButton.js",[],"C:\\frontend\\src\\pages\\ManageUser\\AdminMaster\\AdminMaster.js",["363","364","365","366"],"import { withRouter } from \"react-router-dom\";\r\nimport SubmitButton from \"../../../components/elements/SubmitButton/SubmitButton\";\r\nimport \"./AdminMaster.scss\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { history } from \"../../../store\";\r\nimport Delete from \"../../../components/Popup/Delete\";\r\nimport Pagination from \"../../../components/elements/Pagination/Pagination\";\r\nimport TableAdmin from \"../../../components/Table/TableAdmin\";\r\nimport API from \"../../../services/api\";\r\nimport ViewDataAdmin from \"./ViewDataAdmin\";\r\nimport AddEditAdmin from \"./AddEditAdmin\";\r\nimport { createNotification } from \"../../../components/Notification/Notification\";\r\n\r\nconst AdminMaster = (props) => {\r\n  const [isDelete, setIsDelete] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [itemsPerPage] = useState(10);\r\n  const [admins, setAdmins] = useState([]);\r\n  const [selectedAdmin, setSelectedAdmin] = useState({});\r\n\r\n  const getAllAdmins = async (offset, limit) => {\r\n    const results = await API.getAllAdmins(offset, limit);\r\n    if (results.length > 0) {\r\n      setAdmins(results);\r\n    }\r\n  }\r\n\r\n  const add = new URLSearchParams(props.location.search).get(\"add_user\");\r\n  const edit = new URLSearchParams(props.location.search).get(\"edit_user\");\r\n  const view = new URLSearchParams(props.location.search).get(\"view_user\");\r\n\r\n  useEffect(() => {\r\n    getAllAdmins(currentPage - 1, itemsPerPage);\r\n  }, [add, edit, view]);\r\n\r\n  const resolveContent = () => {\r\n    if (add || edit) {\r\n      return <AddEditAdmin selectedAdmin={selectedAdmin} add={add} edit={edit} />;\r\n    } else if (view) {\r\n      return <ViewDataAdmin selectedAdmin={selectedAdmin} />;\r\n    } else {\r\n      return (\r\n        <React.Fragment>\r\n          <div className=\"bef-table\">\r\n            <div className=\"btn-add-user\">\r\n              <SubmitButton\r\n                buttonText={\"Add Admin\"}\r\n                onClick={() => {\r\n                  history.push(`/dashboard/ADMIN?menu=admin-master&add_user=true`);\r\n                }}\r\n              ></SubmitButton>\r\n            </div>\r\n          </div>\r\n          <TableAdmin \r\n            admins={admins} \r\n            setIsDelete={setIsDelete} \r\n            setSelectedAdmin={setSelectedAdmin}/>\r\n          <Pagination\r\n            currentPage={currentPage}\r\n            itemsPerPage={itemsPerPage}\r\n            totalItem={admins.length}\r\n            setCurrentPage={setCurrentPage}\r\n            reloadFunction={getAllAdmins}\r\n          />\r\n        </React.Fragment>\r\n      );\r\n    }\r\n  };\r\n\r\n  const resolveSubtitle = () => {\r\n    if (add) {\r\n      return <h6 className=\"breadcrumb-path\"> Admin Master - Add Admin</h6>;\r\n    } else if (edit) {\r\n      return <h6 className=\"breadcrumb-path\"> Admin Master - Edit Admin</h6>;\r\n    } else if (view) {\r\n      return <h6 className=\"breadcrumb-path\"> Admin Master - View Admin</h6>;\r\n    } else return <div></div>;\r\n  };\r\n\r\n  const subtitle = resolveSubtitle();\r\n  const content = resolveContent();\r\n  return (\r\n    <div className=\"user-content\">\r\n      <div className=\"breadcrumb\">\r\n        <h1>Admin Master</h1>\r\n        {subtitle}\r\n      </div>\r\n      {content}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(AdminMaster);\r\n","C:\\frontend\\src\\modules\\reducers\\actor.reducer.js",[],"C:\\frontend\\src\\modules\\reducers\\delete.reducer.js",["367","368"],"import { fromJS } from 'immutable';\r\nimport { ACTION_TYPE } from '../../constants/action.type';\r\nimport { ACTOR } from '../../constants/component.constant';\r\n\r\nconst initState = fromJS({\r\n    selectedData: fromJS({})\r\n});\r\n\r\nexport default (state = initState, action) => {\r\n    switch(action.type) {\r\n        case ACTION_TYPE.SET_DELETE_SELECTED_DATA:\r\n            return state.merge({\r\n                selectedData: fromJS(action.data)\r\n            });\r\n        default:\r\n            return state;\r\n    } \r\n}","C:\\frontend\\src\\constants\\action.type.js",[],"C:\\frontend\\src\\components\\elements\\InputField\\InputField.js",["369","370","371"],"import React from \"react\";\r\nimport {\r\n  faCheckCircle,\r\n  faExclamationCircle,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport \"./InputField.scss\";\r\nimport { INPUT_STATUS } from \"../../../constants/component.constant\";\r\nimport DatePicker from \"react-date-picker\";\r\nimport Dropdown from \"react-dropdown\";\r\nimport clsx from \"clsx\";\r\n\r\nconst TextField = (props) => {\r\n  let input;\r\n\r\n  switch (props.type) {\r\n    case \"text\":\r\n    case \"password\":\r\n      input = (\r\n        <input\r\n          className={clsx(\"text-input\")}\r\n          disabled={props.disabled ? props.disabled : false}\r\n          type={props.type ? props.type : \"text\"}\r\n          value={props.value.value}\r\n          name={props.name}\r\n          placeholder={props.placeholder}\r\n          onChange={(e) => (props.onChange ? props.onChange(e) : \"\")}\r\n          autoComplete=\"off\"\r\n        />\r\n      );\r\n      break;\r\n    case \"date\":\r\n      input = (\r\n        <DatePicker\r\n          value={props.value.value}\r\n          name={props.name}\r\n          onChange={(e) => props.onChange(e)}\r\n          format={\"dd-MM-yyyy\"}\r\n        />\r\n      );\r\n      break;\r\n    case \"dropdown\":\r\n      input = (\r\n        <Dropdown\r\n          name={props.name}\r\n          options={props.options}\r\n          onChange={(e) => (props.onChange ? props.onChange(e) : \"\")}\r\n          value={props.value.value}\r\n        />\r\n      );\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  return (\r\n    <div className={clsx(\"inputField\")}>\r\n      {props?.icon && <div className=\"inputIcon\">{props.icon}</div>}\r\n      <span\r\n        className={clsx(\r\n          props.value.status === INPUT_STATUS.INVALID\r\n            ? \"input-span error\"\r\n            : props.value.status === INPUT_STATUS.VALID\r\n            ? \"input-span success\"\r\n            : \"input-span default\",\r\n          props?.type === \"dropdown\" ? \"overflow-visible\" : \"\"\r\n        )}\r\n        style={{ paddingLeft: props.icon ? \"44px\" : \"16px\" }}\r\n      >\r\n        {input}\r\n        {/* {props.value.status === INPUT_STATUS.VALID ? (\r\n          <FontAwesomeIcon icon={faCheckCircle} className=\"faCheckCircle\" />\r\n        ) : (\r\n          <div></div>\r\n        )}\r\n        {props.value.status === INPUT_STATUS.INVALID ? (\r\n          <FontAwesomeIcon\r\n            icon={faExclamationCircle}\r\n            className=\"faExclamationCircle\"\r\n          />\r\n        ) : (\r\n          <div></div>\r\n        )} */}\r\n      </span>\r\n      {props.value.status === INPUT_STATUS.INVALID ? (\r\n        <small className=\"small-error\">{props.value.errorMessage}</small>\r\n      ) : (\r\n        <div></div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TextField;\r\n","C:\\frontend\\src\\pages\\ManageCertificate\\CreateCertificate3.js",["372"],"import SubmitButton from \"../../components/elements/SubmitButton/SubmitButton\";\r\nimport template from \"../../assets/images/CertificateTemplate.jpg\";\r\nimport \"./CreateCertificate3.scss\";\r\nimport React, { useState } from \"react\";\r\nimport { history } from \"../../store\";\r\nimport CertificatePDF from \"../../components/CertificatePDF/CertificatePDF\";\r\n\r\nconst CreateCertificate3 = (props) => {\r\n  const [isProcessing, setProcessing] = useState(false);\r\n\r\n  const composeAssignToName = () => {\r\n    let result = \"\";\r\n    for (const assignToUser of props.assignToUsers) {\r\n      console.log(assignToUser);\r\n      result += assignToUser.name + \", \";\r\n    }\r\n\r\n    return result.substr(0, result.length - 2);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <form className=\"form-sendTo-assignTo\">\r\n        <div className=\"sendTo-view\">\r\n          <p>Send to :</p>\r\n          <span>{props.sendToUser.name}</span>\r\n        </div>\r\n        <div className=\"assignTo-view\">\r\n          <p>Assign to :</p>\r\n          <span>{composeAssignToName()}</span>\r\n        </div>\r\n      </form>\r\n      <form className=\"form-certificate\">\r\n        <CertificatePDF\r\n          certificateTitle={props.getInputValue(\"certificateTitle\").value}\r\n          receiverName={props.getInputValue(\"receiverName\").value}\r\n          certificateNo={props.getInputValue(\"certificateNo\").value}\r\n          certificateDescription={\r\n            props.getInputValue(\"certificateDescription\").value\r\n          }\r\n          certificateScore={props.getInputValue(\"certificateScore\").value}\r\n          certificateDate={props.getInputValue(\"certificateDate\").value}\r\n          certificateLogo={props.getInputValue(\"certificateLogo\")}\r\n          certificateSigners={props.assignToUsers}\r\n        />\r\n      </form>\r\n      <div className=\"btn-back-next\">\r\n        <div className=\"btn-back\">\r\n          <SubmitButton\r\n            isProcessing={isProcessing}\r\n            buttonText=\"Back\"\r\n            onClick={() => {\r\n              history.push(\r\n                `/dashboard/ADMIN?menu=manage-certificate&create_certificate_step=2`\r\n              );\r\n            }}\r\n          ></SubmitButton>\r\n        </div>\r\n        <div className=\"btn-send\">\r\n          <SubmitButton\r\n            isProcessing={isProcessing}\r\n            buttonText=\"Send\"\r\n            onClick={async () => {\r\n              setProcessing(true);\r\n              await props.submit();\r\n              setProcessing(false);\r\n            }}\r\n          ></SubmitButton>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default CreateCertificate3;\r\n","C:\\frontend\\src\\pages\\ManageCertificate\\CreateCertificate1.js",["373","374","375","376","377"],"import SubmitButton from \"../../components/elements/SubmitButton/SubmitButton\";\r\nimport InputField from \"../../components/elements/InputField/InputField\";\r\nimport \"./CreateCertificate1.scss\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { history } from \"../../store\";\r\nimport { INPUT_STATUS } from \"../../constants/component.constant\";\r\nimport CertificatePDF from \"../../components/CertificatePDF/CertificatePDF\";\r\nimport { Editor } from \"react-draft-wysiwyg\";\r\nimport {\r\n  EditorState,\r\n  ContentState,\r\n  convertToRaw,\r\n  convertFromHTML,\r\n} from \"draft-js\";\r\nimport draftToHtml from \"draftjs-to-html\"\r\nimport API from \"../../services/api\";\r\n\r\nimport moment from \"moment\";\r\n\r\nconst CreateCertificate1 = (props) => {\r\n  const [isProcessing, setProcessing] = useState(false);\r\n  const [editorState, setEditorState] = useState(() =>\r\n    EditorState.createEmpty()\r\n  )\r\n  const [certificateDate, setCertificateDate] = useState({status: INPUT_STATUS.INIT, errorMessage: '', value: null});\r\n\r\n  const onEditorStateChange = () => {\r\n    const content = draftToHtml(convertToRaw(editorState.getCurrentContent()));\r\n    props.setInputValue(\"certificateDescription\", content);\r\n  }\r\n\r\n  useEffect(() => {\r\n    onEditorStateChange();\r\n  }, [editorState]);\r\n\r\n  const disabledButton = () => {\r\n    let disabled = false;\r\n    if (props.getInputValue(\"documentName\").status !== INPUT_STATUS.VALID) {\r\n      disabled = true;\r\n    } else if (props.getInputValue(\"receiverName\").status !== INPUT_STATUS.VALID) {\r\n      disabled = true;\r\n    } else if (props.getInputValue(\"certificateTitle\").status !== INPUT_STATUS.VALID) {\r\n      disabled = true;\r\n    } else if (props.getInputValue(\"certificateNo\").status !== INPUT_STATUS.VALID) {\r\n      disabled = true;\r\n    } else if (props.getInputValue(\"certificateDescription\").status !== INPUT_STATUS.VALID) {\r\n      disabled = true;\r\n    } else if (props.getInputValue(\"certificateScore\").status !== INPUT_STATUS.VALID) {\r\n      disabled = true;\r\n    } else if (props.getInputValue(\"certificateDate\").status !== INPUT_STATUS.VALID) {\r\n      disabled = true;\r\n    } \r\n\r\n    return disabled;\r\n  }\r\n\r\n  const onUpload = async (e) => {\r\n    setProcessing(true);\r\n    const result = await API.uploadFile(e.target.files[0]);\r\n    props.setInputValue(\"certificateLogo\", result.filename);\r\n    setProcessing(false);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"form-name-template\">\r\n        <div className=\"name-template\">\r\n          <p>Document Name</p>\r\n          <InputField\r\n            type=\"text\"\r\n            name=\"search-input\"\r\n            placeholder=\"Document name\"\r\n            value={props.getInputValue(\"documentName\")}\r\n            onChange={(e) => { props.setInputValue(\"documentName\", e.target.value) }}\r\n          ></InputField>\r\n        </div>\r\n      </div>\r\n      <div className=\"pdf\">\r\n        <CertificatePDF \r\n          certificateTitle={props.getInputValue(\"certificateTitle\").value} \r\n          receiverName={props.getInputValue(\"receiverName\").value}\r\n          certificateNo={props.getInputValue(\"certificateNo\").value}\r\n          certificateDescription={props.getInputValue(\"certificateDescription\").value}\r\n          certificateScore={props.getInputValue(\"certificateScore\").value}\r\n          certificateDate={props.getInputValue(\"certificateDate\").value}\r\n          certificateLogo={props.getInputValue(\"certificateLogo\")}/>\r\n      </div>\r\n      <div className=\"form-detail-certificate\">\r\n        <div className=\"title\">\r\n          <p>Title</p>\r\n          <InputField\r\n            type=\"text\"\r\n            name=\"title-input\"\r\n            placeholder=\"Certificate title\"\r\n            value={props.getInputValue(\"certificateTitle\")}\r\n            onChange={(e) => { props.setInputValue(\"certificateTitle\", e.target.value) }}\r\n          ></InputField>\r\n        </div>\r\n        <div className=\"no-certificate\">\r\n          <p>No Certificate</p>\r\n          <InputField\r\n            type=\"text\"\r\n            name=\"no-certificate-input\"\r\n            placeholder=\"Certificate number\"\r\n            value={props.getInputValue(\"certificateNo\")}\r\n            onChange={(e) => { props.setInputValue(\"certificateNo\", e.target.value) }}\r\n          ></InputField>\r\n        </div>\r\n        <div className=\"name-user\">\r\n          <p>Receiver Name</p>\r\n          <InputField\r\n            type=\"text\"\r\n            name=\"name-input\"\r\n            placeholder=\"Certificate receiver\"\r\n            value={props.getInputValue(\"receiverName\")}\r\n            onChange={(e) => { props.setInputValue(\"receiverName\", e.target.value) }}\r\n          ></InputField>\r\n        </div>\r\n        <div className=\"title\">\r\n          <p>Description</p>\r\n          <div className=\"certificate-desc\">\r\n            <Editor\r\n              editorState={editorState}\r\n              toolbarClassName=\"toolbarClassName\"\r\n              wrapperClassName=\"wrapperClassName\"\r\n              editorClassName=\"editor-class\"\r\n              onEditorStateChange={setEditorState}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"title\">\r\n          <p>Score</p>\r\n          <InputField\r\n            type=\"text\"\r\n            name=\"title-input\"\r\n            placeholder=\"Certificate score\"\r\n            value={props.getInputValue(\"certificateScore\")}\r\n            onChange={(e) => { props.setInputValue(\"certificateScore\", e.target.value) }}\r\n          ></InputField>\r\n        </div>\r\n        <div className=\"title\">\r\n          <p>Certificate Date</p>\r\n          <InputField\r\n            type=\"date\"\r\n            name=\"title-input\"\r\n            placeholder=\"Certificate date\"\r\n            value={certificateDate}\r\n            onChange={(value) => {\r\n              setCertificateDate({\r\n                status: value ? INPUT_STATUS.VALID : INPUT_STATUS.INVALID,\r\n                errorMessage: value ? '' : 'This field is required',\r\n                value: value}); \r\n              props.setInputValue(\"certificateDate\", moment(value).format('DD-MM-YYYY')) }}\r\n          ></InputField>\r\n        </div>\r\n      </div>\r\n      <div className=\"btn-next\">\r\n        <SubmitButton\r\n          buttonText=\"Next\"\r\n          disabled={disabledButton()}\r\n          onClick={() => {\r\n            history.push(\r\n              \"/dashboard/ADMIN?menu=manage-certificate&create_certificate_step=2\"\r\n            );\r\n          }}\r\n        ></SubmitButton>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default CreateCertificate1;\r\n","C:\\frontend\\src\\pages\\ManageCertificate\\ViewCertificate.js",["378","379"],"import React, { useEffect, useState } from \"react\";\r\nimport { withRouter, Link } from \"react-router-dom\";\r\nimport SubmitButton from \"../../components/elements/SubmitButton/SubmitButton\";\r\nimport { CERTIFICATE_STATUS } from \"../../constants/component.constant\";\r\nimport CertificateSet from \"../../contracts/digital_certificate\";\r\nimport API from \"../../services/api\";\r\nimport web3 from \"../../services/web3\";\r\nimport { history } from \"../../store\";\r\nimport ProgressBar from \"../../components/elements/ProgressBar/ProgressBar\";\r\nimport CertificatePDF from \"../../components/CertificatePDF/CertificatePDF\";\r\nimport jsPDF from \"jspdf\";\r\nimport DomToImage from \"dom-to-image\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { createNotification } from \"../../components/Notification/Notification\";\r\nimport htmlToText from \"html-to-text\";\r\nimport linkedinLogo from \"../../assets/images/linkedin.svg\";\r\n\r\nimport styles from \"./ViewCertificate.module.scss\";\r\nimport Status from \"../../components/elements/Status/Status\";\r\n\r\nconst ViewCertificate = (props) => {\r\n  const [certificate, setCertificate] = useState({});\r\n  const [certificateStatus, setCertificateStatus] = useState(0);\r\n  const [progressBarContent, setProgressBarContent] = useState([]);\r\n  const [isSigner, setSigner] = useState(false);\r\n  const [isSigned, setSigned] = useState(true);\r\n  const [isReceiver, setReceiver] = useState(false);\r\n  const [isProcessing, setProcessing] = useState(false);\r\n  const [allowToSigning, setAllowToSigning] = useState(false);\r\n  const user = useSelector((state) => state.getIn([\"actor\", \"user\"]).toJS());\r\n  const admin = useSelector((state) => state.getIn([\"actor\", \"admin\"]).toJS());\r\n  const certificateId = props.certificateId;\r\n\r\n  const decideSigner = () => {\r\n    // console.log(progressBarContent[progressBarContent.length - 1], admin);\r\n    if (\r\n      !(\r\n        Object.keys(certificate) <= 0 ||\r\n        progressBarContent.length <= 0 ||\r\n        (user?.user_id\r\n          ? !user || Object.keys(user) <= 0\r\n          : !admin || Object.keys(admin) <= 0)\r\n      )\r\n    ) {\r\n      let temp = {};\r\n      \r\n      setReceiver(\r\n        progressBarContent[progressBarContent.length - 1].user_id ===\r\n          user.user_id\r\n      );\r\n      for (const content of progressBarContent) {\r\n        if (user?.user_id) {\r\n          if (content.user_id === user.user_id) {\r\n            setSigner(true);\r\n            if (temp.success && !content.success) {\r\n              setAllowToSigning(true);\r\n              setSigned(false);\r\n            } else if (content.success) {\r\n              setAllowToSigning(false);\r\n              setSigned(true);\r\n            } else {\r\n              setSigned(false);\r\n              setAllowToSigning(false);\r\n            }\r\n          }\r\n        } else if (admin?.admin_id) {\r\n          if (content.user_id === admin.admin_id) {\r\n            setSigner(true);\r\n            if (temp.success && !content.success) {\r\n              setAllowToSigning(true);\r\n              setSigned(false);\r\n            } else if (content.success) {\r\n              setAllowToSigning(false);\r\n              setSigned(true);\r\n            } else {\r\n              setSigned(false);\r\n              setAllowToSigning(false);\r\n            }\r\n          }\r\n        }\r\n        temp = content;\r\n      }\r\n    }\r\n  };\r\n\r\n  //TO DO\r\n  const getCertificate = async () => {\r\n    const newCert = await API.getCertificateById(certificateId);\r\n    setCertificate(newCert);\r\n    getCertificateStatus(newCert.sc_address, newCert.token_id);\r\n\r\n    const newProgressBarContent = [\r\n      {\r\n        success: true,\r\n        text: (\r\n          <div>\r\n            <div className={styles[\"progress-title\"]}>Init By:</div>\r\n            <div className={styles[\"progress-link\"]}>{newCert.Admin.name}</div>\r\n          </div>\r\n        ),\r\n      },\r\n    ];\r\n\r\n    const sortedApprovers = newCert.CertificateSigners.sort((a, b) => {\r\n      return a.priority - b.priority;\r\n    });\r\n\r\n    const certificateSet = CertificateSet.getNewInstance(newCert.sc_address);\r\n    let index = 0;\r\n    const signedByReceiver = newCert.is_accepted;\r\n    const signedByApprovers = await certificateSet.methods\r\n      .signedByApprovers(newCert.token_id)\r\n      .call();\r\n\r\n    for (const approver of sortedApprovers) {\r\n\r\n      const signedByApprover = signedByApprovers[index];\r\n      const link = (\r\n        <Link\r\n          to=\"\"\r\n          onClick={(e) => {\r\n            e.preventDefault();\r\n            window.open(\r\n              `/profile?actor_type=USER&actor_public_key=${approver.User.public_key}`,\r\n              \"_blank\"\r\n            );\r\n          }}\r\n        >\r\n          {approver.User.name}\r\n        </Link>\r\n      );\r\n\r\n      newProgressBarContent.push({\r\n        success: signedByApprover,\r\n        text: signedByApprover ? (\r\n          <div>\r\n            <div className={styles[\"progress-title\"]}>Signed by :</div>\r\n            <div className={styles[\"progress-link\"]}>{link}</div>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <div className={styles[\"progress-title\"]}>Assign to:</div>\r\n            <div className={styles[\"progress-link\"]}>{link}</div>\r\n          </div>\r\n        ),\r\n        user_id: approver.user_id,\r\n      });\r\n      index++;\r\n    }\r\n\r\n    // const signedByReceiver = await certificateSet.methods\r\n    //   .signedByReceiver(newCert.token_id)\r\n    //   .call();\r\n\r\n    const link = (\r\n      <Link\r\n        to=\"\"\r\n        onClick={(e) => {\r\n          e.preventDefault();\r\n          window.open(\r\n            `/profile?actor_type=USER&actor_public_key=${newCert.User.public_key}`,\r\n            \"_blank\"\r\n          );\r\n        }}\r\n      >\r\n        {newCert.User.name}\r\n      </Link>\r\n    );\r\n    \r\n    newProgressBarContent.push({\r\n      success: signedByReceiver,\r\n      text: signedByReceiver ? (\r\n        <div>\r\n          <div className={styles[\"progress-title\"]}>Received by :</div>\r\n          <div className={styles[\"progress-link\"]}>{link}</div>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <div className={styles[\"progress-title\"]}>Send to :</div>\r\n          <div className={styles[\"progress-link\"]}>{link}</div>\r\n        </div>\r\n      ),\r\n      user_id: newCert.user_id,\r\n    });\r\n\r\n    setProgressBarContent(newProgressBarContent);\r\n  };\r\n\r\n  const getCertificateStatus = async (scAddress, tokenId) => {\r\n    if (!web3.utils.isAddress(scAddress)) {\r\n      return;\r\n    }\r\n    const certificateSet = CertificateSet.getNewInstance(scAddress);\r\n    setCertificateStatus(await certificateSet.methods.status(tokenId).call());\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(certificate) <= 0) {\r\n      getCertificate();\r\n    }\r\n\r\n    if (user || admin) {\r\n      decideSigner();\r\n    }\r\n  }, [props.certificateId, certificate, certificateStatus, progressBarContent]);\r\n\r\n  const LazyDownloadPDFButton = async () => {\r\n    const pdf = new jsPDF(\"l\", \"px\", [595, 842]);\r\n    if (pdf) {\r\n      const input = document.getElementById(\"certificateImage\");\r\n      DomToImage.toPng(input).then((imgData) => {\r\n        pdf.addImage(imgData, \"PNG\", 0, 0, 842, 595);\r\n        pdf.save(\"digital-certificate.pdf\");\r\n      });\r\n    }\r\n  };\r\n\r\n  const UploadPNGButton = async () => {\r\n    setProcessing(true);\r\n    const fileBlob = await DomToImage.toBlob(\r\n      document.getElementById(\"certificateImage\")\r\n    ).then(function (blob) {\r\n      return blob;\r\n    });\r\n    const ipfsURI = await API.uploadFileToIPFS(fileBlob, certificate.token_id);\r\n    const certificateSet = CertificateSet.getNewInstance(\r\n      certificate.sc_address\r\n    );\r\n    const accounts = await web3.eth.getAccounts();\r\n\r\n    const tx = certificateSet.methods.setURI(certificate.token_id, ipfsURI);\r\n\r\n    createNotification({\r\n      type: \"Set URI...\",\r\n      value:\r\n        \"Please check your metamask and stay on this page until new URI is set\",\r\n    });\r\n\r\n    const res = await tx.send({\r\n      from: accounts[0],\r\n      gas: 3000000,\r\n      gasPrice: \"30000000000\",\r\n    });\r\n    setProcessing(false);\r\n  };\r\n\r\n  const getDataToSign = (certificate) => {\r\n    const { receiver_name, no, title, description, score, date } = certificate;\r\n    const descriptionText = htmlToText\r\n      .fromString(description)\r\n      .replace(/(\\r\\n|\\n|\\r| )/gm, \"\");\r\n    const mergeCertificateData = (\r\n      receiver_name +\r\n      no +\r\n      title +\r\n      descriptionText +\r\n      score +\r\n      date\r\n    ).replace(/(\\r\\n|\\n|\\r| )/gm, \"\");\r\n\r\n    return web3.utils.keccak256(mergeCertificateData);\r\n  };\r\n\r\n  const getSignature = async (certificate) => {\r\n    const certificateHash = getDataToSign(certificate);\r\n    const accounts = await web3.eth.getAccounts();\r\n    const signature = await web3.eth.personal.sign(\r\n      certificateHash,\r\n      accounts[0]\r\n    );\r\n    return signature;\r\n  };\r\n\r\n  const onSign = async () => {\r\n    setProcessing(true);\r\n    createNotification({\r\n      type: \"Signing...\",\r\n      value: \"Please check your metamask and click SIGN\",\r\n    });\r\n    try {\r\n\r\n\r\n      let tokenId = certificate.token_id;\r\n\r\n      if (!isReceiver) { // Receiver tidak perlu klik Accept\r\n\r\n        const accounts = await web3.eth.getAccounts();\r\n        const certificateSet = CertificateSet.getNewInstance(\r\n          certificate.sc_address\r\n        );\r\n        const signature = await getSignature(certificate);\r\n  \r\n        let method;\r\n\r\n        if (tokenId === '0')\r\n        \r\n        {\r\n\r\n            const today = new Date();\r\n\r\n            const thisMonth = today.getMonth();\r\n\r\n            let approvers = [];\r\n            for (const signer of certificate.CertificateSigners) {\r\n              approvers.push(signer.User.public_key);\r\n            }\r\n\r\n            const tx = certificateSet.methods.mint(\r\n              certificate.User.public_key,\r\n              0,\r\n              Math.floor(new Date(today.setMonth(thisMonth + 12)).getTime() / 1000),\r\n              getDataToSign(certificate),\r\n              approvers\r\n            );\r\n\r\n            const accounts = await web3.eth.getAccounts();\r\n\r\n            try {\r\n              createNotification({\r\n                type: \"Minting...\",\r\n                value:\r\n                  \"Please check your metamask and stay on this page until Certificate is Minted to blockchain\",\r\n              });\r\n\r\n              await tx.send({\r\n                from: accounts[0],\r\n                gas: 3000000,\r\n                gasPrice: \"30000000000\",\r\n              }).then(async function (receipt) {\r\n                tokenId = receipt.events.TransferSingle.returnValues.id;\r\n                try {\r\n                  await API.updateCertificate({\r\n                    certificate_id: certificateId,\r\n                    admin_id: certificate.admin_id,\r\n                    user_id: certificate.user_id,\r\n                    logo: certificate.logo,\r\n                    name: certificate.name,\r\n                    title: certificate.title,\r\n                    no: certificate.no,\r\n                    description: certificate.description,\r\n                    score: certificate.score,\r\n                    date: certificate.date,\r\n                    sc_address: certificate.sc_address,\r\n                    token_id: tokenId,\r\n                    receiver_name: certificate.receiver_name,\r\n                    is_accepted: String(certificate.is_accepted),\r\n                    certificate_type_id: certificate.certificate_type_id,\r\n                    status: 2\r\n                    });\r\n          \r\n                    createNotification({\r\n                      type: \"success\",\r\n                      value: \"Update TokenId Success\",\r\n                    });\r\n      \r\n                  } catch (e) {\r\n                    console.log(e);\r\n                    createNotification({\r\n                      type: \"error\",\r\n                      value: \"Can't update TokenId to Database\",\r\n                    });\r\n                  }\r\n                });\r\n\r\n            } catch (e) {\r\n              console.log(e);\r\n              createNotification({\r\n                type: \"error\",\r\n                value: \"Minting Error\",\r\n              });\r\n            }\r\n\r\n        }\r\n\r\n        method = certificateSet.methods.approverSigning(\r\n          tokenId,\r\n          signature\r\n        );\r\n        await method.send({\r\n          from: accounts[0],\r\n          gasLimit: await method.estimateGas({ from: accounts[0] }),\r\n          gasPrice: \"100000000000\",\r\n        }).then(async function (receipt) {\r\n\r\n          await API.signingCertificate({\r\n            user_id: user.user_id || admin?.admin_id,\r\n            certificate_id: certificate.certificate_id,\r\n          });\r\n\r\n          createNotification({\r\n            type: \"success\",\r\n            value: \"Your signature submitted on blockchain and saved to database!\",\r\n          });\r\n        });\r\n\r\n\r\n        \r\n\r\n\r\n      }\r\n\r\n      else\r\n      {\r\n\r\n        try {\r\n          await API.updateCertificate({\r\n            certificate_id: certificateId,\r\n            admin_id: certificate.admin_id,\r\n            user_id: certificate.user_id,\r\n            logo: certificate.logo,\r\n            name: certificate.name,\r\n            title: certificate.title,\r\n            no: certificate.no,\r\n            description: certificate.description,\r\n            score: certificate.score,\r\n            date: certificate.date,\r\n            sc_address: certificate.sc_address,\r\n            token_id: tokenId,\r\n            receiver_name: certificate.receiver_name,\r\n            is_accepted: String(true),\r\n            certificate_type_id: certificate.certificate_type_id,\r\n            status: 2\r\n            });\r\n  \r\n            createNotification({\r\n              type: \"success\",\r\n              value: \"Update IsAccepted Success\",\r\n            });\r\n\r\n          } catch (e) {\r\n            console.log(e);\r\n            createNotification({\r\n              type: \"error\",\r\n              value: \"Can't update IsAccepted to Database\",\r\n            });\r\n          }\r\n\r\n          createNotification({\r\n            type: \"success\",\r\n            value: \"Your signature saved to database!\",\r\n          });\r\n\r\n        // } catch (e) {\r\n        //   createNotification({\r\n        //     type: \"error\",\r\n        //     value: typeof e === \"object\" ? e.message : e,\r\n        //   });\r\n        // }\r\n      }\r\n\r\n      getCertificate();\r\n\r\n\r\n    } catch (e) {\r\n      createNotification({\r\n        type: \"error\",\r\n        value: typeof e === \"object\" ? e.message : e,\r\n      });\r\n    }\r\n\r\n    setProcessing(false);\r\n  };\r\n\r\n  const shareToLinkedIn = () => {\r\n    const dateArr = certificate.date.split(\"-\");\r\n    //To Do : change ip address, add token id\r\n    window.open(\r\n      `https://www.linkedin.com/profile/add?startTask=Spasi%20Blockchain%20Based%20Digital%20Certificate&name=${certificate.name}&organizationId=75615928&issueYear=${dateArr[2]}&issueMonth=${dateArr[1]}&expirationYear=0&expirationMonth=0&certUrl=http%3A%2F%2F103.172.204.60%2F%3Fcontract_address%3D${certificate.sc_address}`\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <div className={styles.documentContainer}>\r\n        <form className={styles[\"form-document-status\"]}>\r\n          <div className={styles[\"document-name\"]}>\r\n            <span className={styles[\"document-name-title\"]}>\r\n              Document Name:\r\n            </span>\r\n            <span className={styles[\"document-name-value\"]}>\r\n              {certificate?.name}\r\n            </span>\r\n          </div>\r\n          <div className={styles[\"status\"]}>\r\n            <span className={styles[\"status-title\"]}>Status:</span>\r\n            <Status value={CERTIFICATE_STATUS[certificateStatus]} />\r\n          </div>\r\n        </form>\r\n        <ProgressBar progress={progressBarContent} />\r\n        <div className={styles[\"view-action-btn\"]}>\r\n          {isReceiver ? (\r\n            <div className={styles[\"share-btn\"]}>\r\n              <img\r\n                alt=\"\"\r\n                src={linkedinLogo}\r\n                onClick={() => {\r\n                  shareToLinkedIn();\r\n                }}\r\n              />\r\n            </div>\r\n          ) : (\r\n            <></>\r\n          )}\r\n          {isReceiver ? (\r\n            <SubmitButton\r\n              buttonText=\"Download\"\r\n              onClick={() => {\r\n                LazyDownloadPDFButton();\r\n              }}\r\n            ></SubmitButton>\r\n          ) : (\r\n            <></>\r\n          )}\r\n          {!isReceiver && admin.name === 'creator' ? (\r\n            <SubmitButton\r\n              buttonText=\"Upload\"\r\n              onClick={async () => {\r\n                await UploadPNGButton();\r\n              }}\r\n            ></SubmitButton>\r\n          ) : (\r\n            <div />\r\n          )}\r\n          <SubmitButton\r\n            buttonText=\"View\"\r\n            onClick={async () => {\r\n              window.open(\r\n                `https://testnets.opensea.io/assets/sepolia/${certificate.sc_address}/${certificate.token_id}`,\r\n                \"__blank\"\r\n              );\r\n            }}\r\n          ></SubmitButton>\r\n        </div>\r\n      </div>\r\n      <div className={styles[\"view-pdf\"]}>\r\n        <CertificatePDF\r\n          certificateTitle={certificate.title}\r\n          receiverName={certificate.receiver_name}\r\n          certificateNo={certificate.no}\r\n          certificateDescription={certificate.description}\r\n          certificateScore={certificate.score}\r\n          certificateDate={certificate.date}\r\n          scAddress={certificate.sc_address}\r\n          tokenId={certificate.token_id}\r\n          certificateLogo={certificate.logo}\r\n          certificateSigners={certificate.CertificateSigners}\r\n        />\r\n        \r\n        {isSigner ? ( \r\n          <div className={styles[\"btn-done\"]}>\r\n            <SubmitButton\r\n              isProcessing={isProcessing}\r\n              disabled={!allowToSigning || certificate.is_accepted}\r\n              buttonText={\r\n                isSigned && !isReceiver\r\n                  ? \"Signed\"\r\n                  : isSigned && isReceiver\r\n                  ? \"Accepted\"\r\n                  : isReceiver\r\n                  ? \"Accept\"\r\n                  : \"Sign\"\r\n              }\r\n              onClick={() => {\r\n                onSign();\r\n              }}\r\n            ></SubmitButton>\r\n          </div>\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </div>\r\n      {props.actor ? (\r\n        <div className={styles[\"btn-done\"]}>\r\n          <SubmitButton\r\n            buttonText=\"Back\"\r\n            onClick={() => {\r\n              history.push(`/dashboard/${props.actor}?menu=manage-certificate`);\r\n            }}\r\n          ></SubmitButton>\r\n        </div>\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(withRouter(ViewCertificate));\r\n","C:\\frontend\\src\\pages\\ManageCertificate\\CreateCertificate2.js",["380"],"import SubmitButton from \"../../components/elements/SubmitButton/SubmitButton\";\r\nimport InputField from \"../../components/elements/InputField/InputField\";\r\nimport \"./CreateCertificate2.scss\";\r\nimport { history } from \"../../store\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { INPUT_STATUS } from \"../../constants/component.constant\";\r\nimport API from \"../../services/api\";\r\nimport axios from \"axios\";\r\n\r\nconst CreateCertificate2 = (props) => {\r\n  const loadAssignToUsers = async (publicKey, index) => {\r\n    const user = await API.getUserByPublicKey(publicKey);\r\n    props.assignToUsers[index] = user ? user : {};\r\n    props.setAssignToUsers([...props.assignToUsers]);\r\n\r\n    const status = user ? INPUT_STATUS.VALID : INPUT_STATUS.INVALID;\r\n    props.assignToPubKeys[index] = {\r\n      status: status,\r\n      value: publicKey,\r\n      errorMessage:\r\n        status === INPUT_STATUS.INVALID && !user\r\n          ? \"user signer is not found\"\r\n          : \"\",\r\n    };\r\n    props.setAssignToPubKeys([...props.assignToPubKeys]);\r\n  };\r\n\r\n  const setAssignToPubKeys = (value, index) => {\r\n    let status = INPUT_STATUS.INVALID;\r\n\r\n    if (value.length === 42) {\r\n      loadAssignToUsers(value, index);\r\n      status = INPUT_STATUS.VALID;\r\n    } else {\r\n      props.assignToUsers[index] = {};\r\n      props.setAssignToUsers([...props.assignToUsers]);\r\n    }\r\n\r\n    props.assignToPubKeys[index] = {\r\n      status,\r\n      value: value,\r\n      errorMessage:\r\n        status === INPUT_STATUS.INVALID\r\n          ? \"public key length must be 42 characters\"\r\n          : \"\",\r\n    };\r\n    props.setAssignToPubKeys([...props.assignToPubKeys]);\r\n  };\r\n\r\n  const addAssignToInputs = () => {\r\n    props.assignToPubKeys.push({\r\n      status: INPUT_STATUS.INIT,\r\n      value: \"\",\r\n      errorMessage: \"\",\r\n    });\r\n    props.assignToUsers.push({});\r\n    props.setAssignToPubKeys([...props.assignToPubKeys]);\r\n    props.setAssignToUsers([...props.assignToUsers]);\r\n  };\r\n\r\n  const deleteAssignToInputs = () => {\r\n    props.assignToPubKeys.pop();\r\n    props.assignToUsers.pop();\r\n    props.setAssignToPubKeys([...props.assignToPubKeys]);\r\n    props.setAssignToUsers([...props.assignToUsers]);\r\n  };\r\n\r\n  const goToProfile = (e, pubKey) => {\r\n    e.preventDefault();\r\n    window.open(\r\n      `/profile?actor_type=USER&actor_public_key=${pubKey}`,\r\n      \"_blank\"\r\n    );\r\n  };\r\n\r\n  const disabledSumbitBtn = () => {\r\n    let disabled = false;\r\n    if (props.getInputValue(\"sendToPubKey\").status !== INPUT_STATUS.VALID) {\r\n      disabled = true;\r\n    } else {\r\n      for (const assignToPubKey of props.assignToPubKeys) {\r\n        if (assignToPubKey.status !== INPUT_STATUS.VALID) {\r\n          disabled = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return disabled;\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <form className=\"form-sendTo\">\r\n        <div className=\"sendTo-input\">\r\n          <p>Send to</p>\r\n          <InputField\r\n            type=\"text\"\r\n            name=\"search-input\"\r\n            placeholder=\"Public key\"\r\n            value={props.getInputValue(\"sendToPubKey\")}\r\n            onChange={(e) =>\r\n              props.setInputValue(\"sendToPubKey\", e.target.value)\r\n            }\r\n          ></InputField>\r\n          {props.sendToUser.user_id ? (\r\n            <span>\r\n              Name:{\" \"}\r\n              <Link\r\n                to=\"\"\r\n                onClick={(e) => goToProfile(e, props.sendToUser.public_key)}\r\n              >\r\n                {props.sendToUser.name}\r\n              </Link>\r\n            </span>\r\n          ) : (\r\n            <></>\r\n          )}\r\n        </div>\r\n      </form>\r\n      <div className=\"form-assignTo\">\r\n        <div className=\"assignTo-input\">\r\n          <p>Assign To</p>\r\n          {props.assignToPubKeys.map((assignToPubKey, key) => {\r\n            return (\r\n              <div className=\"assignTo-input-item\">\r\n                <InputField\r\n                  key={key}\r\n                  type=\"text\"\r\n                  name=\"search-input\"\r\n                  placeholder=\"Public key\"\r\n                  value={props.assignToPubKeys[key]}\r\n                  onChange={(e) => setAssignToPubKeys(e.target.value, key)}\r\n                ></InputField>\r\n                {props.assignToUsers[key].user_id ? (\r\n                  <span>\r\n                    Name:{\" \"}\r\n                    <Link\r\n                      to=\"\"\r\n                      onClick={(e) =>\r\n                        goToProfile(e, props.assignToUsers[key].public_key)\r\n                      }\r\n                    >\r\n                      {props.assignToUsers[key].name}\r\n                    </Link>\r\n                  </span>\r\n                ) : (\r\n                  <></>\r\n                )}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        <div className=\"btn-add-user\">\r\n          <SubmitButton\r\n            buttonText=\"Add User\"\r\n            onClick={() => addAssignToInputs()}\r\n          ></SubmitButton>\r\n          {props.assignToPubKeys.length > 1 ? (\r\n            <div className=\"btn-delete-user\">\r\n              <SubmitButton\r\n                className=\"delete-btn\"\r\n                buttonText=\"Delete User\"\r\n                onClick={() => deleteAssignToInputs()}\r\n              ></SubmitButton>\r\n            </div>\r\n          ) : (\r\n            <></>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className=\"btn-back-next\">\r\n        <div className=\"btn-back\">\r\n          <SubmitButton\r\n            buttonText=\"Back\"\r\n            onClick={() => {\r\n              history.push(\r\n                \"/dashboard/ADMIN?menu=manage-certificate&create_certificate_step=1\"\r\n              );\r\n            }}\r\n          ></SubmitButton>\r\n        </div>\r\n        <div className=\"btn-next\">\r\n          <SubmitButton\r\n            buttonText=\"Next\"\r\n            disabled={disabledSumbitBtn()}\r\n            onClick={() => {\r\n              history.push(\r\n                \"/dashboard/ADMIN?menu=manage-certificate&create_certificate_step=3\"\r\n              );\r\n            }}\r\n          ></SubmitButton>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default CreateCertificate2;\r\n","C:\\frontend\\src\\components\\Table\\TableCertificateTypes.js",["381"],"import { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Table.scss\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSpinner } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nclass TableCertificateTypes extends Component {\r\n  renderTableData(props) {\r\n    return props.certTypes.map((certType, index) => {\r\n      const { name, id } = certType; //destructuring\r\n      return (\r\n        <tr key={index}>\r\n          <td>{name}</td>\r\n          <td>\r\n            <>\r\n              <Link\r\n                style={{ color: \"black\" }}\r\n                to=\"\"\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  //   this.props.setInputValue(\"institutionId\", id);\r\n                  //   this.props.setInputValue(\"institutionName\", institutionName);\r\n                  //   this.props.setInputValue(\"email\", email);\r\n                  //   this.props.setInputValue(\"phoneNumber\", phoneNumber);\r\n                  //   this.props.setInputValue(\"address\", address);\r\n                  //   this.props.setInputValue(\"type\", type);\r\n                  //   this.props.setIsEdit(true);\r\n                  this.props.onEdit(certType);\r\n                }}\r\n              >\r\n                Edit\r\n              </Link>\r\n              ,{\" \"}\r\n              <Link\r\n                style={{ color: \"red\" }}\r\n                to=\"\"\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  //   this.props.setInputValue(\"institutionId\", id);\r\n                  this.props.onDelete(certType);\r\n                }}\r\n              >\r\n                Delete\r\n              </Link>\r\n            </>\r\n          </td>\r\n        </tr>\r\n      );\r\n    });\r\n  }\r\n\r\n  renderTableHeader() {\r\n    return (\r\n      <tr>\r\n        <th>Certificate Type Name</th>\r\n        <th>Action</th>\r\n      </tr>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.loading ? (\r\n          <div>\r\n            <FontAwesomeIcon icon={faSpinner} className=\"fa-spinner\" />\r\n          </div>\r\n        ) : (\r\n          <table className=\"institutions-table\">\r\n            <thead>{this.renderTableHeader()}</thead>\r\n            <tbody className=\"content-table\">\r\n              {this.renderTableData(this.props)}\r\n            </tbody>\r\n          </table>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TableCertificateTypes;\r\n","C:\\frontend\\src\\modules\\actions\\delete.action.js",[],"C:\\frontend\\src\\pages\\ManageUser\\InstitutionMaster\\AddEditInstitution.js",["382"],"import { useState } from \"react\";\r\nimport InputField from \"../../../components/elements/InputField/InputField\";\r\nimport \"./AddEditInstitution.scss\";\r\n\r\nconst AddEditInstitution = (props) => {\r\n  if (props.add) {\r\n    return (\r\n      <div className=\"modal-container\">\r\n        <div className=\"modal-box-institution\">\r\n          <h1>Add Institution</h1>\r\n          <div className=\"institution-name\">\r\n            <p>\r\n              Institution Name <font color=\"red\">*</font>\r\n            </p>\r\n            <InputField\r\n              type=\"text\"\r\n              name=\"institution-name-input\"\r\n              placeholder=\"Institution Name\"\r\n              value={props.getInputValue(\"institutionName\")}\r\n              onChange={(e) =>\r\n                props.setInputValue(\"institutionName\", e.target.value)\r\n              }\r\n            />\r\n          </div>\r\n          <div className=\"institution-email\">\r\n            <p>\r\n              Institution Email <font color=\"red\">*</font>\r\n            </p>\r\n            <InputField\r\n              type=\"text\"\r\n              name=\"institution-email-input\"\r\n              placeholder=\"Institution Email\"\r\n              value={props.getInputValue(\"email\")}\r\n              onChange={(e) => props.setInputValue(\"email\", e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"institution-phoneNumber\">\r\n            <p>\r\n              Institution Phone Number <font color=\"red\">*</font>\r\n            </p>\r\n            <InputField\r\n              type=\"text\"\r\n              name=\"institution-phoneNumber-input\"\r\n              placeholder=\"Institution Phone Number\"\r\n              value={props.getInputValue(\"phoneNumber\")}\r\n              onChange={(e) =>\r\n                props.setInputValue(\"phoneNumber\", e.target.value)\r\n              }\r\n            />\r\n          </div>\r\n          <div className=\"institution-address\">\r\n            <p>\r\n              Institution Address <font color=\"red\">*</font>\r\n            </p>\r\n            <InputField\r\n              type=\"text\"\r\n              name=\"institution-address\"\r\n              placeholder=\"Institution Address\"\r\n              value={props.getInputValue(\"address\")}\r\n              onChange={(e) => props.setInputValue(\"address\", e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"institution-type\">\r\n            <p>\r\n              Institution Type <font color=\"red\">*</font>\r\n            </p>\r\n            <InputField \r\n              value={props.getInputValue(\"type\")}\r\n              type=\"dropdown\" \r\n              onChange={(value) => props.setInputValue(\"type\", value.value)} \r\n              options={['UNIVERSITY','COMPANY']} />\r\n          </div>\r\n          <div className=\"btn-group\">\r\n            <button\r\n              className=\"btn-cancel\"\r\n              onClick={() => props.setIsAdd(false)}\r\n            >\r\n              Cancel\r\n            </button>\r\n            <button\r\n              className=\"btn-save\"\r\n              onClick={async () => {\r\n                await props.submit();\r\n                props.setIsAdd(false);\r\n              }}\r\n            >\r\n              Save\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else if (props.edit) {\r\n    return (\r\n      <div className=\"modal-container\">\r\n        <div className=\"modal-box-institution\">\r\n          <h1>Edit Institution</h1>\r\n          <div className=\"institution-name\">\r\n            <p>\r\n              Institution Name <font color=\"red\">*</font>\r\n            </p>\r\n            <InputField\r\n              type=\"text\"\r\n              name=\"Institution Name\"\r\n              placeholder=\"Institution Name\"\r\n              value={props.getInputValue(\"institutionName\")}\r\n              onChange={(e) =>\r\n                props.setInputValue(\"institutionName\", e.target.value)\r\n              }\r\n            />\r\n          </div>\r\n          <div className=\"institution-email\">\r\n            <p>\r\n              Institution Email <font color=\"red\">*</font>\r\n            </p>\r\n            <InputField\r\n              type=\"text\"\r\n              name=\"institution-email-input\"\r\n              placeholder=\"Institution Email\"\r\n              value={props.getInputValue(\"email\")}\r\n              onChange={(e) => props.setInputValue(\"email\", e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"institution-phoneNumber\">\r\n            <p>\r\n              Institution Phone Number <font color=\"red\">*</font>\r\n            </p>\r\n            <InputField\r\n              type=\"text\"\r\n              name=\"institution-phoneNumber-input\"\r\n              placeholder=\"Institution Phone Number\"\r\n              value={props.getInputValue(\"phoneNumber\")}\r\n              onChange={(e) =>\r\n                props.setInputValue(\"phoneNumber\", e.target.value)\r\n              }\r\n            />\r\n          </div>\r\n          <div className=\"institution-address\">\r\n            <p>\r\n              Institution Address <font color=\"red\">*</font>\r\n            </p>\r\n            <InputField\r\n              type=\"text\"\r\n              name=\"institution-address\"\r\n              placeholder=\"Institution Address\"\r\n              value={props.getInputValue(\"address\")}\r\n              onChange={(e) => props.setInputValue(\"address\", e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"institution-type\">\r\n            <p>\r\n              Institution Type <font color=\"red\">*</font>\r\n            </p>\r\n            <InputField \r\n              value={props.getInputValue(\"type\")}\r\n              type=\"dropdown\" \r\n              onChange={(value) => props.setInputValue(\"type\", value.value)} \r\n              options={['UNIVERSITY','COMPANY']} />\r\n          </div>\r\n          <div className=\"btn-group\">\r\n            <button\r\n              className=\"btn-cancel\"\r\n              onClick={() => props.setIsEdit(false)}\r\n            >\r\n              Cancel\r\n            </button>\r\n            <button\r\n              className=\"btn-save\"\r\n              onClick={async () => {\r\n                await props.update();\r\n                props.setIsEdit(false);\r\n              }}\r\n            >\r\n              Save\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else return null;\r\n};\r\n\r\nexport default AddEditInstitution;\r\n","C:\\frontend\\src\\components\\Table\\TableInstitution.js",[],"C:\\frontend\\src\\components\\Notification\\Notification.js",["383"],"import { Store as store } from \"react-notifications-component\";\r\n\r\nexport function createNotification({ type, value }) {\r\n  // return () => {\r\n  switch (type) {\r\n    case \"info\":\r\n      store.addNotification({\r\n        title: \"Info!\",\r\n        message: value,\r\n        type: \"info\",\r\n        insert: \"top\",\r\n        container: \"top-left\",\r\n        animationIn: [\"animate__animated\", \"animate__fadeIn\"],\r\n        animationOut: [\"animate__animated\", \"animate__fadeOut\"],\r\n        dismiss: {\r\n          duration: 30000,\r\n          onScreen: true,\r\n        },\r\n      });\r\n\r\n      break;\r\n    case \"success\":\r\n      store.addNotification({\r\n        title: \"Success\",\r\n        message: value,\r\n        type: \"success\",\r\n        insert: \"top\",\r\n        container: \"top-left\",\r\n        animationIn: [\"animate__animated\", \"animate__fadeIn\"],\r\n        animationOut: [\"animate__animated\", \"animate__fadeOut\"],\r\n        dismiss: {\r\n          duration: 30000,\r\n          onScreen: true,\r\n        },\r\n      });\r\n\r\n      break;\r\n    case \"warning\":\r\n      store.addNotification({\r\n        title: \"Warning!\",\r\n        message: value,\r\n        type: \"warning\",\r\n        insert: \"top\",\r\n        container: \"top-left\",\r\n        animationIn: [\"animate__animated\", \"animate__fadeIn\"],\r\n        animationOut: [\"animate__animated\", \"animate__fadeOut\"],\r\n        dismiss: {\r\n          duration: 30000,\r\n          onScreen: true,\r\n        },\r\n      });\r\n\r\n      break;\r\n    case \"error\":\r\n      store.addNotification({\r\n        title: \"Error!\",\r\n        message: value,\r\n        type: \"danger\",\r\n        insert: \"top\",\r\n        container: \"top-left\",\r\n        animationIn: [\"animate__animated\", \"animate__fadeIn\"],\r\n        animationOut: [\"animate__animated\", \"animate__fadeOut\"],\r\n        dismiss: {\r\n          duration: 10000,\r\n          onScreen: true,\r\n        },\r\n      });\r\n\r\n      break;\r\n  }\r\n  // }\r\n}\r\n","C:\\frontend\\src\\components\\elements\\Pagination\\Pagination.js",["384","385"],"import { faArrowLeft, faArrowRight } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport \"./Pagination.scss\";\r\n\r\nexport default ({ currentPage, itemsPerPage, totalItem, paginate, reloadFunction, setCurrentPage }) => {\r\n  const reload = async (type) => {\r\n    let newCurrentPage = currentPage;\r\n    switch(type) {\r\n      case 'prev':\r\n        if (currentPage - 1 >= 1) {\r\n          newCurrentPage = currentPage - 1;\r\n        }\r\n        break;\r\n      case 'next':\r\n        if (totalItem >= itemsPerPage) {\r\n          newCurrentPage = currentPage + 1;\r\n        }\r\n        break;\r\n    }\r\n\r\n    await reloadFunction(newCurrentPage - 1, itemsPerPage);\r\n    setCurrentPage(newCurrentPage);\r\n  }\r\n\r\n  return (\r\n    <nav>\r\n      <ul className=\"pagination\">\r\n        <li className=\"page-item\" onClick={() => reload('prev')}>\r\n          <div  className=\"page-link\">\r\n            <FontAwesomeIcon icon={faArrowLeft} />\r\n          </div>\r\n        </li>\r\n        <li className=\"page-item\" onClick={() => reload('next')}>\r\n          <div  className=\"page-link\">\r\n            <FontAwesomeIcon icon={faArrowRight} />\r\n          </div>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n","C:\\frontend\\src\\contracts\\digital_certificate_factory.js",[],"C:\\frontend\\src\\components\\Modal\\ModalSelectCertType.js",["386"],"import React, { useEffect, useState } from \"react\";\r\nimport styles from \"./ModalCertificateType.module.scss\";\r\nimport TextField from \"../elements/InputField/InputField\";\r\nimport { INPUT_STATUS } from \"../../constants/component.constant\";\r\nimport API from \"../../services/api\";\r\nimport Button from \"../elements/Button\";\r\n\r\nconst ModalSelectCertType = ({ visible, onSubmit, onCancel }) => {\r\n  const [type, setType] = useState({\r\n    status: INPUT_STATUS.INIT,\r\n    value: \"\",\r\n    label: \"\",\r\n    errorMessage: \"\",\r\n  });\r\n  const [certTypes, setCertTypes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (visible) {\r\n      getAllCertificateType();\r\n    }\r\n  }, [visible]);\r\n\r\n  const getAllCertificateType = async () => {\r\n    try {\r\n      const response = await API.getAllCertificateTypes(0, 1000);\r\n      const arr = [];\r\n      response?.map((val) => {\r\n        arr.push({\r\n          value: val?.certificate_type_id,\r\n          label: val?.type,\r\n        });\r\n      });\r\n      setCertTypes(arr);\r\n    } catch (error) {}\r\n  };\r\n\r\n  return (\r\n    <div className={visible ? \"modal-container\" : \"hidden\"}>\r\n      <div className={\"modal-box\"}>\r\n        <h1>SELECT CERTIFICATE TYPE</h1>\r\n        <form\r\n          onSubmit={(e) => {\r\n            e.preventDefault();\r\n            onSubmit && onSubmit(type);\r\n          }}\r\n        >\r\n          <TextField\r\n            type=\"dropdown\"\r\n            name=\"type\"\r\n            value={type}\r\n            options={certTypes}\r\n            onChange={(val) => {\r\n              setType({\r\n                status: INPUT_STATUS.VALID,\r\n                value: val?.value,\r\n                label: val?.label,\r\n              });\r\n            }}\r\n          />\r\n          <div className={styles[\"submit-btn-container\"]}>\r\n            <Button\r\n              type=\"button\"\r\n              className=\"bg-danger\"\r\n              buttonText=\"Cancel\"\r\n              onClick={() => onCancel && onCancel()}\r\n            />\r\n            <Button disabled={!type.value} buttonText=\"Next\" type=\"submit\" />\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ModalSelectCertType;\r\n","C:\\frontend\\src\\pages\\ManageCertificate\\CreateCertificateMember\\CreateCertificateMember1.js",["387","388","389","390","391","392","393","394","395","396"],"import SubmitButton from \"../../../components/elements/SubmitButton/SubmitButton\";\r\nimport InputField from \"../../../components/elements/InputField/InputField\";\r\nimport styles from \"./CreateCertificateMember1.module.scss\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { history } from \"../../../store\";\r\nimport { INPUT_STATUS } from \"../../../constants/component.constant\";\r\nimport CertificatePDF from \"../../../components/CertificatePDF/CertificatePDF\";\r\nimport { Editor } from \"react-draft-wysiwyg\";\r\nimport {\r\n  EditorState,\r\n  ContentState,\r\n  convertToRaw,\r\n  convertFromHTML,\r\n} from \"draft-js\";\r\nimport draftToHtml from \"draftjs-to-html\";\r\nimport API from \"../../../services/api\";\r\n\r\nimport moment from \"moment\";\r\nimport CertificateMemberPDF from \"../../../components/CertificatePDF/CertificateMemberPDF\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport Button from \"../../../components/elements/Button\";\r\n\r\nimport * as yup from \"yup\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport InputFieldControl from \"../../../components/elements/InputField/InputFieldControl\";\r\n\r\nconst createCertificateMemberSchema = yup.object({\r\n  card_number: yup.string().required(),\r\n  name: yup.string().required(),\r\n  address: yup.string().required(),\r\n  dob: yup.string().required(),\r\n});\r\n\r\nconst CreateCertificateMember1 = (props) => {\r\n  const [isProcessing, setProcessing] = useState(false);\r\n  const [editorState, setEditorState] = useState(() =>\r\n    EditorState.createEmpty()\r\n  );\r\n\r\n  const {\r\n    control,\r\n    formState: { errors },\r\n    handleSubmit,\r\n    watch,\r\n    setValue,\r\n  } = useForm({\r\n    resolver: yupResolver(createCertificateMemberSchema),\r\n  });\r\n\r\n  const [certificateDate, setCertificateDate] = useState({\r\n    status: INPUT_STATUS.INIT,\r\n    errorMessage: \"\",\r\n    value: null,\r\n  });\r\n\r\n  const onEditorStateChange = () => {\r\n    const content = draftToHtml(convertToRaw(editorState.getCurrentContent()));\r\n    props.setInputValue(\"certificateDescription\", content);\r\n  };\r\n\r\n  useEffect(() => {\r\n    onEditorStateChange();\r\n  }, [editorState]);\r\n\r\n  const onUpload = async (e) => {\r\n    setProcessing(true);\r\n    const result = await API.uploadFile(e.target.files[0]);\r\n    props.setInputValue(\"certificateLogo\", result.filename);\r\n    setProcessing(false);\r\n  };\r\n\r\n  const onSubmit = (values) => {};\r\n\r\n  return (\r\n    <div className={styles[\"container\"]}>\r\n      <div className={styles[\"pdf\"]}>\r\n        {/* <CertificatePDF \r\n          certificateTitle={props.getInputValue(\"certificateTitle\").value} \r\n          receiverName={props.getInputValue(\"receiverName\").value}\r\n          certificateNo={props.getInputValue(\"certificateNo\").value}\r\n          certificateDescription={props.getInputValue(\"certificateDescription\").value}\r\n          certificateScore={props.getInputValue(\"certificateScore\").value}\r\n          certificateDate={props.getInputValue(\"certificateDate\").value}\r\n          certificateLogo={props.getInputValue(\"certificateLogo\")}/> */}\r\n        <CertificateMemberPDF\r\n          cardNumber={watch(\"card_number\")}\r\n          cardName={watch(\"name\")}\r\n          cardAddress={watch(\"address\")}\r\n          cardDob={watch(\"dob\")}\r\n        />\r\n      </div>\r\n      <form onSubmit={handleSubmit((d) => onSubmit(d))}>\r\n        <div className={styles[\"form-detail-certificate\"]}>\r\n          <div className={styles[\"title\"]}>\r\n            <InputFieldControl\r\n              label=\"Card Number\"\r\n              control={control}\r\n              errors={errors.card_number}\r\n              name=\"card_number\"\r\n              placeholder=\"Card Number\"\r\n            />\r\n          </div>\r\n          <div className={styles[\"no-certificate\"]}>\r\n            <InputFieldControl\r\n              label=\"Name\"\r\n              control={control}\r\n              errors={errors.name}\r\n              name=\"name\"\r\n              placeholder=\"Name\"\r\n            />\r\n          </div>\r\n          <div className={styles[\"name-user\"]}>\r\n            <InputFieldControl\r\n              label=\"Address\"\r\n              control={control}\r\n              errors={errors.address}\r\n              name=\"address\"\r\n              placeholder=\"Address\"\r\n            />\r\n          </div>\r\n\r\n          <div className={styles[\"title\"]}>\r\n            <p>Date of birth</p>\r\n            <InputField\r\n              type=\"date\"\r\n              name=\"title-input\"\r\n              placeholder=\"Certificate date\"\r\n              value={certificateDate}\r\n              onChange={(value) => {\r\n                setCertificateDate({\r\n                  status: value ? INPUT_STATUS.VALID : INPUT_STATUS.INVALID,\r\n                  errorMessage: value ? \"\" : \"This field is required\",\r\n                  value: value,\r\n                });\r\n                setValue(\"dob\", moment(value).format(\"DD-MM-YYYY\"));\r\n              }}\r\n            ></InputField>\r\n          </div>\r\n        </div>\r\n        <div className={styles[\"btn-next\"]}>\r\n          <Button\r\n            type=\"submit\"\r\n            buttonText=\"Create\"\r\n            // disabled={disabledButton()}\r\n            // onClick={() => {\r\n            //   history.push(\r\n            //     \"/dashboard/ADMIN?menu=manage-certificate&create_certificate_step=2\"\r\n            //   );\r\n            // }}\r\n          ></Button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateCertificateMember1;\r\n","C:\\frontend\\src\\components\\Modal\\ModalCertificateType.js",["397","398","399","400"],"import React, { useEffect, useState } from \"react\";\r\nimport styles from \"./ModalCertificateType.module.scss\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport * as yup from \"yup\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport InputFieldControl from \"../elements/InputField/InputFieldControl\";\r\nimport Button from \"../elements/Button\";\r\nimport API from \"../../services/api\";\r\n\r\nconst addCertTypeSchema = yup.object({\r\n  certificate_type: yup.string().required(),\r\n});\r\n\r\nconst ModalCertificateType = ({\r\n  title,\r\n  visible,\r\n  selectedData,\r\n  onCancel,\r\n  onSubmitted,\r\n}) => {\r\n  const {\r\n    control,\r\n    formState: { errors },\r\n    handleSubmit,\r\n    setValue,\r\n  } = useForm({\r\n    resolver: yupResolver(addCertTypeSchema),\r\n  });\r\n\r\n  const [isLoading, setLoading] = useState(false);\r\n  const [selectedId, setSelectedId] = useState(selectedData?.id);\r\n\r\n  useEffect(() => {\r\n    if (selectedData) {\r\n      setValue(\"certificate_type\", selectedData?.name);\r\n      setSelectedId(selectedData?.id);\r\n    }\r\n  }, [selectedData]);\r\n\r\n  const handleAdd = async (values) => {\r\n    setLoading(true);\r\n    try {\r\n      const result = await API.addCertificateType(values);\r\n      onSubmitted && onSubmitted();\r\n    } catch (error) {\r\n      console.error(error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleEdit = async (values) => {\r\n    setLoading(true);\r\n    try {\r\n      const result = await API.updateCertificateType({\r\n        certificate_type_id: selectedData?.id,\r\n        certificate_type: values?.certificate_type,\r\n      });\r\n      onSubmitted && onSubmitted();\r\n    } catch (error) {\r\n      console.error(error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={visible ? \"modal-container\" : \"hidden\"}>\r\n      <div className={\"modal-box\"}>\r\n        <h1>{title}</h1>\r\n        <form\r\n          onSubmit={handleSubmit((d) => {\r\n            if (selectedData) {\r\n              handleEdit(d);\r\n            } else {\r\n              handleAdd(d);\r\n            }\r\n          })}\r\n        >\r\n          <InputFieldControl\r\n            label=\"Certificate Type Name\"\r\n            control={control}\r\n            errors={errors.certificate_type}\r\n            name=\"certificate_type\"\r\n          />\r\n          <div className={styles[\"submit-btn-container\"]}>\r\n            <Button isProcessing={isLoading} buttonText=\"Add\" type=\"submit\" />\r\n            <Button\r\n              buttonText=\"Cancel\"\r\n              onClick={() => onCancel && onCancel()}\r\n              className=\"bg-grey\"\r\n            />\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ModalCertificateType;\r\n","C:\\frontend\\src\\components\\elements\\ProgressBar\\ProgressBar.js",[],"C:\\frontend\\src\\contracts\\digital_certificate.js",["401","402","403"],"import axios from \"axios\";\r\nimport web3 from \"../services/web3\";\r\nimport abi from \"./abi.json\";\r\nimport bytecodes from \"./bytecodes.json\";\r\nimport { sourceCode } from \"./source_code\";\r\n\r\nconst CertificateSet = {};\r\n\r\n// when switching to new Org\r\nCertificateSet.getNewInstance = (address) => {\r\n  return new web3.eth.Contract(abi, address, {\r\n    transactionConfirmationBlocks: 3,\r\n  });\r\n};\r\n\r\n// when creating to new Org, dont use deploy, use CertificateSetFactory instead\r\nCertificateSet.deploy = (certificateHash, receiver, approvers) => {\r\n  const CertificateSet = CertificateSet.getNewInstance(undefined);\r\n  return CertificateSet.deploy({\r\n    data: bytecodes.object,\r\n    arguments: [certificateHash, receiver, approvers],\r\n  });\r\n};\r\n\r\n// when creating to new Org, dont use deploy, use CertificateSetFactory instead\r\nCertificateSet.verify = async (address, constructorArguements) => {\r\n  try {\r\n    console.log(\"try to verifying contract\");\r\n    var data = new FormData();\r\n    data.append(\"apikey\", \"R7AIKW4GKX8NEZS8AKUF97RGXPPE4CWE6I\");\r\n    data.append(\"module\", \"contract\");\r\n    data.append(\"action\", \"verifysourcecode\");\r\n    data.append(\"contractaddress\", address);\r\n    data.append(\"sourceCode\", sourceCode);\r\n    data.append(\"codeformat\", \"solidity-single-file\");\r\n    data.append(\"contractname\", \"DigitalCertificate\");\r\n    data.append(\"compilerversion\", \"v0.8.7+commit.e28d00a7\");\r\n    data.append(\"optimizationUsed\", \"0\");\r\n    data.append(\"runs\", \"200\");\r\n    data.append(\"constructorArguments\", constructorArguements);\r\n\r\n    var config = {\r\n      method: \"post\",\r\n      url: \"https://api-sepolia.etherscan.io/api\",\r\n      headers: {\r\n        ...data.getHeaders(),\r\n      },\r\n      data: data,\r\n    };\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n};\r\n\r\nexport default CertificateSet;\r\n","C:\\frontend\\src\\components\\Popup\\Delete.js",[],"C:\\frontend\\src\\pages\\ManageUser\\AdminMaster\\AddEditAdmin.js",["404","405","406","407","408","409","410","411"],"import { faSpinner } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport InputField from \"../../../components/elements/InputField/InputField\";\r\nimport SubmitButton from \"../../../components/elements/SubmitButton/SubmitButton\";\r\nimport { createNotification } from \"../../../components/Notification/Notification\";\r\nimport { INPUT_STATUS } from \"../../../constants/component.constant\";\r\nimport API from \"../../../services/api\";\r\nimport web3 from \"../../../services/web3\";\r\nimport { history } from \"../../../store\";\r\nimport \"./AddEditAdmin.scss\";\r\nimport CertificateSet from \"../../../contracts/digital_certificate\";\r\n\r\nconst AddEditAdmin = (props) => {\r\n  const [isProcessing, setProcessing] = useState(false);\r\n  const [name, setName] = useState({\r\n    status: INPUT_STATUS.INIT,\r\n    value: \"\",\r\n    errorMessage: \"\",\r\n  });\r\n  const [email, setEmail] = useState({\r\n    status: INPUT_STATUS.INIT,\r\n    value: \"\",\r\n    errorMessage: \"\",\r\n  });\r\n  const [phoneNumber, setPhoneNumber] = useState({\r\n    status: INPUT_STATUS.INIT,\r\n    value: \"\",\r\n    errorMessage: \"\",\r\n  });\r\n  const [originalFileName, setOriginalFileName] = useState(null);\r\n  const [photo, setPhoto] = useState(null);\r\n  const [role, setRole] = useState({\r\n    status: INPUT_STATUS.INIT,\r\n    value: \"\",\r\n    errorMessage: \"MAIN\",\r\n  });\r\n  const [publicKey, setPublicKey] = useState({\r\n    status: INPUT_STATUS.INIT,\r\n    value: \"\",\r\n    errorMessage: \"\",\r\n  });\r\n  const [selectedInstitution, setSelectedInstitution] = useState({});\r\n  const [institutions, setInstitutions] = useState([]);\r\n  const [inputFilled, setInputFilled] = useState(false);\r\n\r\n  const getAllInstitutions = async () => {\r\n    if (institutions.length <= 0) {\r\n      setInstitutions(await API.getAllInstitutions(0, 100));\r\n    }\r\n  };\r\n\r\n  const fillInput = () => {\r\n    if (inputFilled) {\r\n      return;\r\n    }\r\n\r\n    setName({ status: INPUT_STATUS.VALID, value: props.selectedAdmin.name });\r\n    setEmail({ status: INPUT_STATUS.VALID, value: props.selectedAdmin.email });\r\n    setPhoneNumber({\r\n      status: INPUT_STATUS.VALID,\r\n      value: props.selectedAdmin.phone_number,\r\n    });\r\n    setPublicKey({\r\n      status: INPUT_STATUS.VALID,\r\n      value: props.selectedAdmin.public_key,\r\n    });\r\n    setRole({\r\n      status: INPUT_STATUS.VALID,\r\n      value: props.selectedAdmin.admin_role,\r\n    });\r\n    setSelectedInstitution(\r\n      props.selectedAdmin.Institution ? props.selectedAdmin.Institution : {}\r\n    );\r\n    setInputFilled(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getAllInstitutions();\r\n    if (props.edit) {\r\n      fillInput();\r\n    }\r\n  }, [role]);\r\n\r\n  const onChange = (e) => {\r\n    const inputName = e.target.name;\r\n    const inputValue = e.target.value;\r\n    let status =\r\n      inputValue && inputValue !== \"\"\r\n        ? INPUT_STATUS.VALID\r\n        : INPUT_STATUS.INVALID;\r\n    let errorMessage =\r\n      status === INPUT_STATUS.INVALID ? `this data is required` : \"\";\r\n\r\n    switch (inputName) {\r\n      case \"name\":\r\n        setName({\r\n          status,\r\n          errorMessage,\r\n          value: inputValue,\r\n        });\r\n        break;\r\n      case \"publickey\":\r\n        if (!web3.utils.isAddress(inputValue)) {\r\n          status = INPUT_STATUS.INVALID;\r\n          errorMessage = \"Invalid public key format\";\r\n        }\r\n        setPublicKey({\r\n          status,\r\n          errorMessage,\r\n          value: inputValue,\r\n        });\r\n        break;\r\n      case \"email\":\r\n        setEmail({\r\n          status,\r\n          errorMessage,\r\n          value: inputValue,\r\n        });\r\n        break;\r\n      case \"phonenumber\":\r\n        setPhoneNumber({\r\n          status,\r\n          errorMessage,\r\n          value: inputValue,\r\n        });\r\n        break;\r\n    }\r\n  };\r\n\r\n  const getInstitutionsOptions = () => {\r\n    const options = [];\r\n    for (const institution of institutions) {\r\n      options.push({\r\n        label: institution.name,\r\n        value: institution.institution_id,\r\n      });\r\n    }\r\n    return options;\r\n  };\r\n\r\n  const onSelect = async (val) => {\r\n    setRole({\r\n      status: INPUT_STATUS.VALID,\r\n      value: val.value,\r\n    });\r\n\r\n    if (val.value === \"MAIN\") {\r\n      setSelectedInstitution({});\r\n    }\r\n  };\r\n\r\n  const onSelectInstitution = async (val) => {\r\n    setSelectedInstitution(\r\n      institutions.find((institution) => {\r\n        return institution.institution_id === val.value;\r\n      })\r\n    );\r\n  };\r\n\r\n  const onUpload = async (e) => {\r\n    setProcessing(true);\r\n    const result = await API.uploadFile(e.target.files[0]);\r\n    setOriginalFileName(e.target.files[0].name);\r\n    setPhoto(result.filename);\r\n    setProcessing(false);\r\n  };\r\n\r\n  const add = async () => {\r\n    setProcessing(true);\r\n    try {\r\n\r\n      const userRequest = {\r\n        name: name.value,\r\n        email: email.value,\r\n        public_key: publicKey.value,\r\n\r\n      };\r\n      await API.createUser(userRequest);\r\n      \r\n      const institution = await API.getInstitutionById(\r\n        selectedInstitution.institution_id\r\n      );\r\n      const institutionContractAddress = institution.sc_address;\r\n      const certificateSet = CertificateSet.getNewInstance(\r\n        institutionContractAddress\r\n      );\r\n      const accounts = await web3.eth.getAccounts();\r\n\r\n      if (name.value === 'creator')\r\n          {\r\n\r\n            const tx = certificateSet.methods.transferOwnership(publicKey.value);\r\n\r\n            createNotification({\r\n              type: \"Transfer Ownership...\",\r\n              value:\r\n                \"Please check your metamask and stay on this page until contract ownership is transferred to New Admin\",\r\n            });\r\n    \r\n            const res = await tx.send({\r\n              from: accounts[0],\r\n              gas: 3000000,\r\n              gasPrice: \"30000000000\",\r\n            });\r\n          }\r\n      else\r\n      {\r\n\r\n        const minters = [publicKey.value]; \r\n        const tx = certificateSet.methods.setMinters(minters);\r\n\r\n        createNotification({\r\n          type: \"Set as Minter...\",\r\n          value:\r\n            \"Please check your metamask and stay on this page until New Admin has been set as Minter\",\r\n        });\r\n\r\n        const res = await tx.send({\r\n          from: accounts[0],\r\n          gas: 3000000,\r\n          gasPrice: \"30000000000\",\r\n        });\r\n      }\r\n      const newUser = await API.getUserByPublicKey(publicKey.value);\r\n      const request = {\r\n        admin_id: newUser.user_id,\r\n        name: name.value,\r\n        email: email.value,\r\n        public_key: publicKey.value,\r\n        phone_number: phoneNumber.value,\r\n        admin_role: role.value,\r\n        institution_id: selectedInstitution.institution_id\r\n          ? selectedInstitution.institution_id\r\n          : null,\r\n        photo: photo,\r\n      };\r\n      console.dir(newUser.user_id);\r\n      await API.addAdmin(request);\r\n      createNotification({\r\n        type: \"success\",\r\n        value: \"Success to add admin\",\r\n      });\r\n      history.push(\"/dashboard/ADMIN?menu=admin-master\");\r\n    } catch (e) {\r\n      console.log(e);\r\n      createNotification({\r\n        type: \"error\",\r\n        value: e,\r\n      });\r\n    }\r\n\r\n    setProcessing(false);\r\n  };\r\n\r\n  const edit = async () => {\r\n    setProcessing(true);\r\n    try {\r\n      const request = {\r\n        admin_id: props.selectedAdmin.admin_id,\r\n        name: name.value,\r\n        email: email.value,\r\n        public_key: publicKey.value,\r\n        phone_number: phoneNumber.value,\r\n        admin_role: role.value,\r\n        institution_id: selectedInstitution.institution_id\r\n          ? selectedInstitution.institution_id\r\n          : null,\r\n        photo: photo ? photo : props.selectedAdmin.photo,\r\n      };\r\n      await API.editAdmin(request);\r\n      createNotification({\r\n        type: \"success\",\r\n        value: \"Success to update admin\",\r\n      });\r\n      history.push(\"/dashboard/ADMIN?menu=admin-master\");\r\n    } catch (e) {\r\n      console.log(e);\r\n      createNotification({\r\n        type: \"error\",\r\n        value: e,\r\n      });\r\n    }\r\n\r\n    setProcessing(false);\r\n  };\r\n\r\n  const submit = () => {\r\n    if (props.add) {\r\n      add();\r\n    } else {\r\n      edit();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <form className=\"add-edit-user-box\">\r\n        <div className=\"user-name\">\r\n          <p>\r\n            Full Name <font color=\"red\">*</font>\r\n          </p>\r\n          <InputField\r\n            type=\"text\"\r\n            name=\"name\"\r\n            placeholder=\"Full Name\"\r\n            value={name}\r\n            onChange={onChange}\r\n          />\r\n        </div>\r\n        <div className=\"user-email\">\r\n          <p>\r\n            Public Key <font color=\"red\">*</font>\r\n          </p>\r\n          <InputField\r\n            type=\"text\"\r\n            name=\"publickey\"\r\n            placeholder=\"Public Key\"\r\n            value={publicKey}\r\n            onChange={onChange}\r\n          />\r\n        </div>\r\n        <div className=\"user-email\">\r\n          <p>\r\n            Email <font color=\"red\">*</font>\r\n          </p>\r\n          <InputField\r\n            type=\"text\"\r\n            name=\"email\"\r\n            placeholder=\"Active Email\"\r\n            value={email}\r\n            onChange={onChange}\r\n          />\r\n        </div>\r\n        <div className=\"user-phoneNumber\">\r\n          <p>\r\n            Phone Number <font color=\"red\">*</font>\r\n          </p>\r\n          <InputField\r\n            type=\"text\"\r\n            name=\"phonenumber\"\r\n            placeholder=\"Active Phone Number\"\r\n            value={phoneNumber}\r\n            onChange={onChange}\r\n          />\r\n        </div>\r\n        <div className=\"user-phoneNumber\">\r\n          <p>\r\n            Admin Level <font color=\"red\">*</font>\r\n          </p>\r\n          <InputField\r\n            type=\"dropdown\"\r\n            name=\"role\"\r\n            value={role}\r\n            options={[\r\n              { value: \"MAIN\", label: \"Main\" },\r\n              { value: \"INSTITUTION\", label: \"Institution\" },\r\n            ]}\r\n            onChange={onSelect}\r\n          />\r\n        </div>\r\n        {role.value === \"INSTITUTION\" ? (\r\n          <div className=\"user-phoneNumber\">\r\n            <p>\r\n              Institution\r\n            </p>\r\n            <InputField\r\n              type=\"dropdown\"\r\n              name=\"role\"\r\n              value={{\r\n                value: selectedInstitution.name,\r\n                label: selectedInstitution.institution_id,\r\n              }}\r\n              options={getInstitutionsOptions()}\r\n              onChange={onSelectInstitution}\r\n            />\r\n          </div>\r\n        ) : (\r\n          <></>\r\n        )}\r\n        {/* <div className=\"upload-photo\">\r\n          <p>Upload Logo</p>\r\n          {!photo ? (\r\n            <>\r\n              <input\r\n                type=\"file\"\r\n                className=\"custom-file-input\"\r\n                id=\"input\"\r\n                accept=\"image/*\"\r\n                onChange={onUpload}\r\n                disabled={isProcessing}\r\n                hidden\r\n              />\r\n              <label htmlFor=\"input\" className=\"browse-btn\">\r\n                {!isProcessing ? (\r\n                  \"Browse\"\r\n                ) : (\r\n                  <FontAwesomeIcon icon={faSpinner} />\r\n                )}\r\n              </label>\r\n            </>\r\n          ) : (\r\n            <span>{originalFileName}</span>\r\n          )}\r\n        </div> */}\r\n      </form>\r\n      <div className=\"save-btn\">\r\n        <SubmitButton\r\n          isProcessing={isProcessing}\r\n          disabled={\r\n            name.status !== INPUT_STATUS.VALID ||\r\n            publicKey.status !== INPUT_STATUS.VALID ||\r\n            email.status !== INPUT_STATUS.VALID ||\r\n            phoneNumber.status !== INPUT_STATUS.VALID ||\r\n            role.status !== INPUT_STATUS.VALID\r\n          }\r\n          buttonText={\"Save\"}\r\n          onClick={submit}\r\n        />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AddEditAdmin;\r\n","C:\\frontend\\src\\pages\\ManageUser\\AdminMaster\\ViewDataAdmin.js",["412"],"import React from \"react\";\r\nimport SubmitButton from \"../../../components/elements/SubmitButton/SubmitButton\";\r\nimport { HOST } from \"../../../services/api\";\r\nimport { history } from \"../../../store\";\r\nimport \"./ViewDataAdmin.scss\";\r\n\r\nconst ViewDataAdmin = (props) => {\r\n  return (\r\n    <React.Fragment>\r\n      <form className=\"form-base-information\">\r\n        <div>\r\n          <p className=\"title-name\">Full Name :</p>\r\n          <span className=\"name\">{props.selectedAdmin.name}</span>\r\n        </div>\r\n        <div>\r\n          <p className=\"title-email\">Public Key :</p>\r\n          <span className=\"email\">{props.selectedAdmin.public_key}</span>\r\n        </div>\r\n        <div>\r\n          <p className=\"title-email\">Email :</p>\r\n          <span className=\"email\">{props.selectedAdmin.email}</span>\r\n        </div>\r\n        <div>\r\n          <p className=\"title-phoneNumber\">Phone Number :</p>\r\n          <span className=\"phoneNumber\">{props.selectedAdmin.phone_number}</span>\r\n        </div>\r\n        {/* <div>\r\n          <p className=\"title-photo\">Photo :</p>\r\n          <img src={props.selectedAdmin.photo ? `${HOST}/api/files/${props.selectedAdmin.photo}` : '#'} alt=\"photo profile\"></img>\r\n        </div> */}\r\n      </form>\r\n      <form className=\"form-role-information\">\r\n        <div>\r\n          <p className=\"title-role\">Admin Level :</p>\r\n          <span className=\"role\">{props.selectedAdmin.admin_role}</span>\r\n        </div>\r\n      </form>\r\n      {props.selectedAdmin.Institution ?\r\n        <form className=\"form-institution-information\">\r\n          <div>\r\n            <p className=\"title-institution\">Institution :</p>\r\n            <span className=\"institution\">{props.selectedAdmin.Institution.name}</span>\r\n          </div>\r\n        </form> : <></>}\r\n      <div className=\"btn-back\">\r\n        <SubmitButton\r\n          buttonText=\"Back\"\r\n          onClick={() => history.push(\"/dashboard/ADMIN?menu=admin-master\")}\r\n        />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ViewDataAdmin;\r\n","C:\\frontend\\src\\components\\Table\\TableAdmin.js",[],"C:\\frontend\\src\\pages\\ManageUser\\UserMaster\\ViewDataUser.js",["413"],"import React from \"react\";\r\nimport SubmitButton from \"../../../components/elements/SubmitButton/SubmitButton\";\r\nimport { history } from \"../../../store\";\r\nimport \"./ViewDataUser.scss\";\r\n\r\nconst ViewDataUser = (props) => {\r\n  return (\r\n    <React.Fragment>\r\n      <form className=\"form-base-information\">\r\n        <div>\r\n          <p className=\"title-name\">Full Name :</p>\r\n          <span className=\"name\">Anggi Nur Dhamayanty</span>\r\n        </div>\r\n        <div>\r\n          <p className=\"title-email\">Email :</p>\r\n          <span className=\"email\">Nuranggie@gmail.co.id</span>\r\n        </div>\r\n        <div>\r\n          <p className=\"title-address\">Address :</p>\r\n          <span className=\"address\">Bandung</span>\r\n        </div>\r\n        <div>\r\n          <p className=\"title-phoneNumber\">Phone Number :</p>\r\n          <span className=\"phoneNumber\">08123456789</span>\r\n        </div>\r\n        <div>\r\n          <p className=\"title-photo\">Photo :</p>\r\n          <img src=\"#\" alt=\"photo profile\"></img>\r\n        </div>\r\n      </form>\r\n      <form className=\"form-role-information\">\r\n        <div>\r\n          <p className=\"title-role\">Role :</p>\r\n          <span className=\"role\">Student</span>\r\n        </div>\r\n      </form>\r\n      <form className=\"form-institution-information\">\r\n        <div>\r\n          <p className=\"title-institution\">Institution :</p>\r\n          <span className=\"institution\">Politeknik Negeri Bandung</span>\r\n        </div>\r\n      </form>\r\n      <div className=\"btn-back\">\r\n        <SubmitButton\r\n          buttonText=\"Back\"\r\n          onClick={() => history.push(\"/dashboard/ADMIN?menu=user-master\")}\r\n        />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ViewDataUser;\r\n","C:\\frontend\\src\\pages\\ManageUser\\UserMaster\\AddEditUser.js",["414","415","416","417","418","419","420"],"import { faExclamationCircle, faSpinner, faTimesCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport InputField from \"../../../components/elements/InputField/InputField\";\r\nimport SubmitButton from \"../../../components/elements/SubmitButton/SubmitButton\";\r\nimport { createNotification } from \"../../../components/Notification/Notification\";\r\nimport { INPUT_STATUS } from \"../../../constants/component.constant\";\r\nimport API from \"../../../services/api\";\r\nimport web3 from \"../../../services/web3\";\r\nimport { history } from \"../../../store\";\r\nimport \"./AddEditUser.scss\";\r\n\r\nconst AddEditUser = (props) => {\r\n  const [isProcessing, setProcessing] = useState(false);\r\n  const [name, setName] = useState({\r\n    status: INPUT_STATUS.INIT,\r\n    value: \"\",\r\n    errorMessage: \"\",\r\n  });\r\n  const [email, setEmail] = useState({\r\n    status: INPUT_STATUS.INIT,\r\n    value: \"\",\r\n    errorMessage: \"\",\r\n  });\r\n  const [address, setAddress] = useState({\r\n    status: INPUT_STATUS.INIT,\r\n    value: \"\",\r\n    errorMessage: \"\",\r\n  });\r\n  const [phoneNumber, setPhoneNumber] = useState({\r\n    status: INPUT_STATUS.INIT,\r\n    value: \"\",\r\n    errorMessage: \"\",\r\n  });\r\n  const [originalFileName, setOriginalFileName] = useState(null);\r\n  const [photo, setPhoto] = useState(null);\r\n  const [publicKey, setPublicKey] = useState({\r\n    status: INPUT_STATUS.INIT,\r\n    value: \"\",\r\n    errorMessage: \"\",\r\n  });\r\n  const [inputFilled, setInputFilled] = useState(false);\r\n  const [institutions, setInstitutions] = useState([]);\r\n\r\n  const getAllInstitutions = async () => {\r\n    if (institutions.length <= 0) {\r\n      setInstitutions(await API.getAllInstitutions(0, 100));\r\n    }\r\n  }\r\n\r\n  const fillInput = () => {\r\n    if (inputFilled) {\r\n      return;\r\n    }\r\n\r\n    setName({\r\n      status: INPUT_STATUS.VALID,\r\n      value: props.selectedUser.name\r\n    });\r\n    setEmail({\r\n      status: INPUT_STATUS.VALID,\r\n      value: props.selectedUser.email\r\n    });\r\n    setAddress({\r\n      status: INPUT_STATUS.VALID,\r\n      value: props.selectedUser.address\r\n    });\r\n    setPhoneNumber({\r\n      status: INPUT_STATUS.VALID,\r\n      value: props.selectedUser.phone_number\r\n    });\r\n    setPublicKey({\r\n      status: INPUT_STATUS.VALID,\r\n      value: props.selectedUser.public_key\r\n    });\r\n    \r\n  }\r\n\r\n  useEffect(() => {\r\n    getAllInstitutions();\r\n\r\n    if (props.edit) {\r\n      fillInput();\r\n    }\r\n  }, [props.selectedUser]);\r\n\r\n  const onChange = (e) => {\r\n    const inputName = e.target.name;\r\n    const inputValue = e.target.value;\r\n    let status = inputValue && inputValue !== '' ? INPUT_STATUS.VALID : INPUT_STATUS.INVALID;\r\n    let errorMessage = status === INPUT_STATUS.INVALID ? `this data is required` : '';\r\n\r\n    switch(inputName) {\r\n      case \"name\":\r\n        setName({\r\n          status,\r\n          errorMessage,\r\n          value: inputValue\r\n        });\r\n        break;\r\n      case \"publickey\":\r\n        if (!web3.utils.isAddress(inputValue)) {\r\n          status = INPUT_STATUS.INVALID;\r\n          errorMessage = 'Invalid public key format';\r\n        }\r\n        setPublicKey({\r\n          status,\r\n          errorMessage,\r\n          value: inputValue\r\n        });\r\n        break;\r\n      case \"email\":\r\n        setEmail({\r\n          status,\r\n          errorMessage,\r\n          value: inputValue\r\n        });\r\n        break;\r\n      case \"phonenumber\":\r\n        setPhoneNumber({\r\n          status,\r\n          errorMessage,\r\n          value: inputValue\r\n        });\r\n        break;\r\n    }\r\n  }\r\n\r\n  const onUpload = async (e) => {\r\n    setProcessing(true);\r\n    const result = await API.uploadFile(e.target.files[0]);\r\n    setOriginalFileName(e.target.files[0].name);\r\n    setPhoto(result.filename);\r\n    setProcessing(false);\r\n  }\r\n\r\n\r\n  const isDisabled = () => {\r\n    if (name.status !== INPUT_STATUS.VALID \r\n      || publicKey.status !== INPUT_STATUS.VALID\r\n      || email.status !== INPUT_STATUS.VALID\r\n      || phoneNumber.status !== INPUT_STATUS.VALID) {\r\n        return true;\r\n    }\r\n    \r\n    return false;\r\n  }\r\n\r\n\r\n  const onAdd = async () => {\r\n    setProcessing(true);\r\n    try {\r\n      let request = {\r\n        name: name.value,\r\n        email: email.value,\r\n        phone_number: phoneNumber.value,\r\n        public_key: publicKey.value,\r\n        photo: photo\r\n      }\r\n      const user = await API.createUser(request);\r\n\r\n\r\n      createNotification({\r\n        type: 'success',\r\n        value: 'Add user success'\r\n      });\r\n      history.push('/dashboard/ADMIN?menu=user-master');\r\n    } catch (e) {\r\n      console.log(e);\r\n      createNotification({\r\n        type: 'error',\r\n        value: typeof e === 'string' ? e : 'Add user failed'\r\n      });\r\n    }\r\n    \r\n    setProcessing(true);\r\n  }\r\n\r\n  const onEdit = async () => {\r\n    setProcessing(true);\r\n    try {\r\n      let request = {\r\n        user_id: props.selectedUser.user_id,\r\n        name: name.value,\r\n        email: email.value,\r\n        phone_number: phoneNumber.value,\r\n        public_key: publicKey.value,\r\n        photo: photo ? photo : props.selectedUser.photo\r\n      }\r\n      const user = await API.updateUser(request);\r\n\r\n      createNotification({\r\n        type: 'success',\r\n        value: 'Update user success'\r\n      });\r\n      history.push('/dashboard/ADMIN?menu=user-master');\r\n    } catch (e) {\r\n      console.log(e);\r\n      createNotification({\r\n        type: 'error',\r\n        value: typeof e === 'string' ? e : 'Update user failed'\r\n      });\r\n    }\r\n    \r\n    setProcessing(true);\r\n  }\r\n\r\n  const onSubmit = () => {\r\n    if (props.add) {\r\n      onAdd();\r\n    } else {\r\n      onEdit();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <form className=\"add-edit-user-box\">\r\n        <div className=\"user-name\">\r\n          <p>\r\n            Full Name <font color=\"red\">*</font>\r\n          </p>\r\n          <InputField\r\n            type=\"text\"\r\n            name=\"name\"\r\n            placeholder=\"Full Name\"\r\n            value={name}\r\n            onChange={onChange}\r\n          />\r\n        </div>\r\n        <div className=\"user-email\">\r\n          <p>\r\n            Public Key <font color=\"red\">*</font>\r\n          </p>\r\n          <InputField\r\n            type=\"text\"\r\n            name=\"publickey\"\r\n            placeholder=\"Public Key\"\r\n            value={publicKey}\r\n            onChange={onChange}\r\n          />\r\n        </div>\r\n        <div className=\"user-email\">\r\n          <p>\r\n            Email <font color=\"red\">*</font>\r\n          </p>\r\n          <InputField\r\n            type=\"text\"\r\n            name=\"email\"\r\n            placeholder=\"Active Email\"\r\n            value={email}\r\n            onChange={onChange}\r\n          />\r\n        </div>\r\n        <div className=\"user-address\">\r\n          <p>\r\n            Address <font color=\"red\">*</font>\r\n          </p>\r\n          <InputField\r\n            type=\"text\"\r\n            name=\"address\"\r\n            placeholder=\"Active Address\"\r\n            value={address}\r\n            onChange={onChange}\r\n          />\r\n        </div>\r\n        <div className=\"user-phoneNumber\">\r\n          <p>\r\n            Phone Number <font color=\"red\">*</font>\r\n          </p>\r\n          <InputField\r\n            type=\"text\"\r\n            name=\"phonenumber\"\r\n            placeholder=\"Active Phone Number\"\r\n            value={phoneNumber}\r\n            onChange={onChange}\r\n          />\r\n        </div>\r\n        <div className=\"upload-photo\">\r\n          <p>Upload Photo</p>\r\n          {!photo ?\r\n          <>\r\n            <input\r\n              type=\"file\"\r\n              className=\"custom-file-input\"\r\n              id=\"input\"\r\n              accept=\"image/*\"\r\n              onChange={onUpload}\r\n              disabled={isProcessing}\r\n              hidden\r\n            />\r\n            <label htmlFor=\"input\" className=\"browse-btn\">\r\n              {!isProcessing ? 'Browse' : <FontAwesomeIcon icon={faSpinner}/>}\r\n            </label>\r\n          </> : <span>{originalFileName}</span> }\r\n        </div>\r\n      </form>\r\n\r\n      <div className=\"save-btn\">\r\n        <SubmitButton isProcessing={isProcessing} disabled={isDisabled()} buttonText={\"Save\"} onClick={onSubmit}/>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AddEditUser;\r\n","C:\\frontend\\src\\components\\Table\\TableUser.js",[],"C:\\frontend\\src\\contracts\\source_code.js",["421","422"],"export const sourceCode = `// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.12;\r\n\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * 'interfaceId'. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\ninterface IERC1155Receiver is IERC165 {\r\n    /**\r\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\r\n     * called at the end of a 'safeTransferFrom' after the balance has been updated.\r\n     *\r\n     * NOTE: To accept the transfer, this must return\r\n     * 'bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))'\r\n     * (i.e. 0xf23a6e61, or its own function selector).\r\n     *\r\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\r\n     * @param from The address which previously owned the token\r\n     * @param id The ID of the token being transferred\r\n     * @param value The amount of tokens being transferred\r\n     * @param data Additional data with no specified format\r\n     * @return 'bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))' if transfer is allowed\r\n     */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n\r\n    /**\r\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n     * is called at the end of a 'safeBatchTransferFrom' after the balances have\r\n     * been updated.\r\n     *\r\n     * NOTE: To accept the transfer(s), this must return\r\n     * 'bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))'\r\n     * (i.e. 0xbc197c81, or its own function selector).\r\n     *\r\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n     * @param from The address which previously owned the token\r\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n     * @param data Additional data with no specified format\r\n     * @return 'bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))' if transfer is allowed\r\n     */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when 'value' tokens of token type 'id' are transferred from 'from' to 'to' by 'operator'.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where 'operator', 'from' and 'to' are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] values\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when 'account' grants or revokes permission to 'operator' to transfer their tokens, according to\r\n     * 'approved'.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type 'id' changes to 'value', if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for 'id', the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that 'value' will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type 'id' owned by 'account'.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - 'account' cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - 'accounts' and 'ids' must have the same length.\r\n     */\r\n    function balanceOfBatch(\r\n        address[] calldata accounts,\r\n        uint256[] calldata ids\r\n    ) external view returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to 'operator' to transfer the caller's tokens, according to 'approved',\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - 'operator' cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if 'operator' is approved to transfer ''account'''s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers 'amount' tokens of token type 'id' from 'from' to 'to'.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - 'to' cannot be the zero address.\r\n     * - If the caller is not 'from', it must have been approved to spend ''from'''s tokens via {setApprovalForAll}.\r\n     * - 'from' must have a balance of tokens of type 'id' of at least 'amount'.\r\n     * - If 'to' refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - 'ids' and 'amounts' must have the same length.\r\n     * - If 'to' refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\ninterface IERC1155MetadataURI is IERC1155 {\r\n    /**\r\n     * @dev Returns the URI for token type 'id'.\r\n     *\r\n     * If the '\\{id\\}' substring is present in the URI, it must be replaced by\r\n     * clients with the actual token type ID.\r\n     */\r\n    function uri(uint256 id) external view returns (string memory);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * 'onlyOwner' functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account ('newOwner').\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account ('newOwner').\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a 'uint256' to its ASCII 'string' decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a 'uint256' to its ASCII 'string' hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a 'uint256' to its ASCII 'string' hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\ninterface IWalletMapping {\r\n    error UserAlreadyLinked(address userAddress);\r\n    error WalletAlreadyLinked(address walletAddress);\r\n    error StringLongerThan31Bytes(string str);\r\n\r\n    function linkWallet(address userAddress, address walletAddress) external;\r\n\r\n    function getLinkedWallet(\r\n        address userAddress\r\n    ) external view returns (address);\r\n\r\n    function getLiteWalletAddress(\r\n        string memory firstName,\r\n        string memory lastName,\r\n        uint256 phoneNumber\r\n    ) external pure returns (address liteWallet);\r\n\r\n    function transitionCertificatesByContracts(\r\n        address from,\r\n        address to,\r\n        address[] memory contracts\r\n    ) external;\r\n}\r\n\r\ninterface ICertificateSet {\r\n    error IncorrectExpiry(address user, uint96 certificateType, uint256 expiry);\r\n    error IncorrectBalance(address user, uint96 certificateType, uint256 balance);\r\n    error NewCertificateTypeNotIncremental(uint96 certificateType, uint256 maxCertificateType);\r\n    error ArrayParamsUnequalLength();\r\n    error WalletNotLinked(address walletAddress);\r\n    error SoulboundTokenNoSetApprovalForAll(address operator, bool approved);\r\n    error SoulboundTokenNoIsApprovedForAll(address account, address operator);\r\n    error SoulboundTokenNoSafeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes data\r\n    );\r\n    error SoulboundTokenNoSafeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] ids,\r\n        uint256[] amounts,\r\n        bytes data\r\n    );\r\n    error ERC1155ReceiverNotImplemented();\r\n    error ERC1155ReceiverRejectedTokens();\r\n\r\n    event TransitionWallet(\r\n        address indexed kycAddress,\r\n        address indexed walletAddress\r\n    );\r\n\r\n    function setURI(uint256 tokenId, string memory newuri) external;\r\n\r\n    function expiryOf(uint256 tokenId) external view returns (uint256);\r\n\r\n    function mint(\r\n        address account,\r\n        uint96 certificateType,\r\n        uint256 expiryTimestamp,\r\n        bytes32 certificateHash,\r\n        address[] memory signers\r\n    ) external returns (uint256 tokenId);\r\n    \r\n    function approverSigning(\r\n        uint256 tokenId, \r\n        bytes memory signature\r\n    ) external;\r\n\r\n    function mintBatch(\r\n        address to,\r\n        uint96[] memory certificateTypes,\r\n        uint256[] memory expiryTimestamps,        \r\n        bytes32[] memory certificateHash,\r\n        address[][] memory signers\r\n    ) external returns (uint256[] memory tokenIds);\r\n\r\n    function revoke(\r\n        address account,\r\n        uint96 certificateType\r\n    ) external returns (uint256 tokenId);\r\n\r\n    function revokeBatch(\r\n        address to,\r\n        uint96[] memory certificateTypes\r\n    ) external returns (uint256[] memory tokenIds);\r\n\r\n    function moveUserTokensToWallet(\r\n        address kycAddress,\r\n        address walletAddress\r\n    ) external;\r\n\r\n    function encodeTokenId(\r\n        uint96 certificateType,\r\n        address account\r\n    ) external pure returns (uint256 tokenId);\r\n\r\n    function decodeTokenId(\r\n        uint256 tokenId\r\n    ) external pure returns (uint96 certificateType, address account);\r\n}\r\n\r\nlibrary BitMaps {\r\n    struct BitMap {\r\n        mapping(uint256 => uint256) _data;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the bit at 'index' is set.\r\n     */\r\n    function get(\r\n        BitMap storage bitmap,\r\n        uint256 index\r\n    ) internal view returns (bool) {\r\n        uint256 bucket = index >> 8;\r\n        uint256 mask = 1 << (index & 0xff);\r\n        return bitmap._data[bucket] & mask != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the bit at 'index'.\r\n     */\r\n    function set(BitMap storage bitmap, uint256 index) internal {\r\n        uint256 bucket = index >> 8;\r\n        uint256 mask = 1 << (index & 0xff);\r\n        bitmap._data[bucket] |= mask;\r\n    }\r\n\r\n    /**\r\n     * @dev Unsets the bit at 'index'.\r\n     */\r\n    function unset(BitMap storage bitmap, uint256 index) internal {\r\n        uint256 bucket = index >> 8;\r\n        uint256 mask = 1 << (index & 0xff);\r\n        bitmap._data[bucket] &= ~mask;\r\n    }\r\n}\r\n\r\ncontract CertificateSet is\r\n    Context,\r\n    ERC165,\r\n    IERC1155,\r\n    ICertificateSet,\r\n    Ownable,\r\n    IERC1155MetadataURI\r\n{\r\n    using BitMaps for BitMaps.BitMap;\r\n\r\n    enum CertificateStatus{ CREATED, DROPPED, ISSUED }\r\n\r\n    address public walletMapping;\r\n    uint96 public maxCertificateType;\r\n    string public name;\r\n    address[] public minters;\r\n    mapping(address => BitMaps.BitMap) private _balances;\r\n    mapping(uint256 => uint256) private _expiries;\r\n    \r\n\r\n//===========================\r\n\r\n    //Certificate issuer (ADMIN)\r\n    mapping(uint256 => address) private _issuer;\r\n    \r\n    //Certificate value of keccak256(receiver_name + certificate_no + certificate_title + description_text + certificate_score + certificate_date)\r\n    mapping(uint256 => bytes32) private _certificateHash;\r\n\r\n    //Certificate receiver\r\n    mapping(uint256 => address) private _receiver;\r\n\r\n    //Certificate signer\r\n    mapping(uint256 => uint256) private _totalApprover;\r\n    mapping(uint256 => uint) private _totalSignature;\r\n    mapping(uint256 => address[]) private _approvers;\r\n    mapping(uint256 => bool[]) private _signedByApprovers;\r\n\r\n    mapping(uint256 => CertificateStatus) private _status;\r\n    mapping(uint256 => string) private _uri;\r\n\r\n//===========================\r\n\r\n  \r\n\r\n    address private constant ZERO_ADDRESS = address(0);\r\n    uint256 private constant BITMAP_SIZE = 256;\r\n\r\n    event CertificateDropped(uint256 date);\r\n    event CertificateIssued(uint256 date);\r\n    event SignedByApprover(address approver, uint256 date);\r\n\r\n    constructor(\r\n        address _owner,\r\n        address _walletMapping,\r\n        string memory _name\r\n    ) \r\n    {\r\n        walletMapping = _walletMapping;\r\n        name = _name;\r\n        transferOwnership(_owner);\r\n    }\r\n\r\n    /**\r\n     * @notice Get token metadata URI\r\n     * @param id token id\r\n     * @return URI string\r\n     */\r\n    function uri(uint256 id) external view returns (string memory) {\r\n        return _uri[id];\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Get token status\r\n     * @param id token id\r\n     * @return status CertificateStatus\r\n     */\r\n    function status(uint256 id) external view returns (CertificateStatus) {\r\n        return _status[id];\r\n    }\r\n\r\n    function issuer(uint256 id) external view returns (address) {\r\n        return _issuer[id];\r\n    }\r\n\r\n    function certificateHashOf(uint256 id) external view returns (bytes32) {\r\n        return _certificateHash[id];\r\n    }\r\n\r\n    function receiver(uint256 id) external view returns (address) {\r\n        return _receiver[id];\r\n    }\r\n\r\n    function totalApprover(uint256 id) external view returns (uint256) {\r\n        return _totalApprover[id];\r\n    }\r\n\r\n    function totalSignature(uint256 id) external view returns (uint) {\r\n        return _totalSignature[id];\r\n    }    \r\n    \r\n    function approvers(uint256 id) external view returns (address[] memory) {\r\n        return _approvers[id];\r\n    }    \r\n    \r\n    function signedByApprovers(uint256 id) external view returns (bool[] memory) {\r\n        return _signedByApprovers[id];\r\n    }\r\n\r\n    /**\r\n     * @notice Get token expiry timestamp (unix)\r\n     * @param tokenId token id\r\n     * @return expiry timestamp (unix)\r\n     */\r\n    function expiryOf(uint256 tokenId) external view returns (uint256) {\r\n        return _expiries[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @notice Get balances for a list of token/address pairs\r\n     * @param accounts account addresses\r\n     * @param ids token ids\r\n     * @return array of balances for each token/address pair\r\n     */\r\n    function balanceOfBatch(\r\n        address[] memory accounts,\r\n        uint256[] memory ids\r\n    ) external view returns (uint256[] memory) {\r\n        uint256 count = accounts.length;\r\n        if (count != ids.length) revert ArrayParamsUnequalLength();\r\n        uint256[] memory batchBalances = new uint256[](count);\r\n        for (uint256 i = 0; i < count; ++i) {\r\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\r\n        }\r\n        return batchBalances;\r\n    }\r\n\r\n    function setMinters(address[] memory _minters) public onlyOwner\r\n    {\r\n        minters = _minters;\r\n    }\r\n\r\n    /**\r\n     * @notice Mint token to an account address\r\n     * @dev Checks if \"to\" address param has an associated linked wallet (in WalletMapping). If yes, mints to that address. If no, mints to the \"to\" address. Only callable by contract owner.\r\n     * @param to Address to mint to\r\n     * @param certificateType Desired certificate type to mint (must not currently own)\r\n     * @param expiry Token expiration timestamp (unix). If no expiry, input \"0\"\r\n     * @return tokenId Token id of successfully minted token\r\n     */\r\n    function mint(\r\n        address to,\r\n        uint96 certificateType,\r\n        uint256 expiry,        \r\n        bytes32 certificateHash,\r\n        address[] memory signers\r\n    ) \r\n    external\r\n    returns (uint256 tokenId) \r\n    {\r\n\r\n        address user = getUser(to);\r\n \r\n        tokenId = _mint(user, certificateType, expiry, certificateHash, signers);\r\n\r\n        emit TransferSingle(_msgSender(), ZERO_ADDRESS, user, tokenId, 1);\r\n        _doSafeTransferAcceptanceCheck(\r\n            _msgSender(),\r\n            ZERO_ADDRESS,\r\n            user,\r\n            tokenId,\r\n            1,\r\n            \"\"\r\n        );\r\n    }\r\n    \r\n    function approverSigning(uint256 tokenId, bytes memory signature) external {\r\n        _approverSigning(tokenId, signature);\r\n    }\r\n\r\n    /**\r\n     * @notice Mint multiple tokens to an account address\r\n     * @dev Checks if \"to\" address param has an associated linked wallet (in WalletMapping). If yes, mints to that address. If no, mints to the \"to\" address. Only callable by contract owner.\r\n     * @param account Address to mint to\r\n     * @param certificateTypes Certificate types to mint\r\n     * @param expiries Token expiration timestamps (unix). If no expiries, input array of \"0\" (matching certificateTypes length)\r\n     * @return tokenIds Token ids of successfully minted tokens\r\n     */\r\n    function mintBatch(\r\n        address account,\r\n        uint96[] memory certificateTypes,\r\n        uint256[] memory expiries,\r\n        bytes32[] memory certificateHashes,\r\n        address[][] memory signers\r\n    ) external returns (uint256[] memory tokenIds) {\r\n        if (certificateTypes.length != expiries.length)\r\n            revert ArrayParamsUnequalLength();\r\n        address user = getUser(account);\r\n        uint256 mintCount = certificateTypes.length;\r\n\r\n        tokenIds = new uint[](mintCount);\r\n        uint[] memory amounts = new uint[](mintCount); // used in event\r\n\r\n        for (uint256 i = 0; i < mintCount; i++) {\r\n            uint256 tokenId = _mint(user, certificateTypes[i], expiries[i], certificateHashes[i], signers[i]);\r\n            tokenIds[i] = tokenId;\r\n            amounts[i] = 1;\r\n        }\r\n\r\n        emit TransferBatch(_msgSender(), ZERO_ADDRESS, user, tokenIds, amounts);\r\n        _doSafeBatchTransferAcceptanceCheck(\r\n            _msgSender(),\r\n            ZERO_ADDRESS,\r\n            user,\r\n            tokenIds,\r\n            amounts,\r\n            \"\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Revoke (burn) a token from an account address\r\n     * @dev Checks if \"account\" address param has an associated linked wallet (in WalletMapping). If yes, revokes from that address. If no, revokes from the \"account\" address. Only callable by contract owner. Deletes token expiry.\r\n     * @param account Address to revoke from\r\n     * @param certificateType Certificate type to revoke (must currently own)\r\n     * @return tokenId Token id of successfully revoked token\r\n     */\r\n    function revoke(\r\n        address account,\r\n        uint96 certificateType\r\n    ) external onlyOwner returns (uint256 tokenId) {\r\n        address user = getUser(account);\r\n        tokenId = _revoke(user, certificateType);\r\n        emit TransferSingle(_msgSender(), user, ZERO_ADDRESS, tokenId, 1);\r\n    }\r\n\r\n    /**\r\n     * @notice Revoke (burn) multiple tokens from an account address\r\n     * @dev Checks if \"account\" address param has an associated linked wallet (in WalletMapping). If yes, revokes from that address. If no, revokes from the \"account\" address. Only callable by contract owner. Deletes token expiry.\r\n     * @param account Address to revoke from\r\n     * @param certificateTypes Desired certificate types to revoke (must currently own)\r\n     * @return tokenIds Token ids of successfully revoked tokens\r\n     */\r\n    function revokeBatch(\r\n        address account,\r\n        uint96[] memory certificateTypes\r\n    ) external onlyOwner returns (uint[] memory tokenIds) {\r\n        address user = getUser(account);\r\n        uint256 revokeCount = certificateTypes.length;\r\n\r\n        tokenIds = new uint[](revokeCount); // used in event, return value\r\n        uint[] memory amounts = new uint[](revokeCount); // used in event\r\n\r\n        for (uint256 i = 0; i < revokeCount; i++) {\r\n            uint256 tokenId = _revoke(user, certificateTypes[i]);\r\n            tokenIds[i] = tokenId;\r\n            amounts[i] = 1;\r\n        }\r\n\r\n        emit TransferBatch(_msgSender(), user, ZERO_ADDRESS, tokenIds, amounts);\r\n    }\r\n\r\n    // TODO: this should have a return check value\r\n    /**\r\n     * @notice Transition tokens from a lite wallet to a linked real wallet\r\n     * @dev Certificate (token) ownership state is stored in bitmaps. To save gas, this function copies over the \"from\" address's bitmap state (1 uint256 for each 256 token types) to the \"to\" address, and emits individual transfer events in a loop.\r\n     * @param from Address to transiton all tokens from\r\n     * @param to Address to transition all tokens to\r\n     */\r\n    function moveUserTokensToWallet(address from, address to) external {\r\n        if (getUser(from) != to) revert WalletNotLinked(to);\r\n        uint256 bitmapCount = maxCertificateType / BITMAP_SIZE;\r\n        for (uint256 i = 0; i <= bitmapCount; i++) {\r\n            uint256 bitmap = _balances[from]._data[i];\r\n            if (bitmap != 0) {\r\n                emitTransferEvents(bitmap, from, to);\r\n                _balances[to]._data[i] = bitmap; // copy over ownership bitmap\r\n                delete _balances[from]._data[i]; // delete old ownership bitmap\r\n            }\r\n        }\r\n        emit TransitionWallet(from, to);\r\n    }\r\n\r\n    // No-Ops for ERC1155 transfer and approval functions. CertificateSet tokens are Soulbound and cannot be transferred. Functions are included for ERC1155 interface compliance\r\n\r\n    /** \r\n     * @notice will revert. Soulbound tokens cannot be transferred.\r\n    */\r\n    function setApprovalForAll(address operator, bool approved) external pure {\r\n        revert SoulboundTokenNoSetApprovalForAll(operator, approved);\r\n    }\r\n\r\n    /** \r\n     * @notice will revert. Soulbound tokens cannot be transferred.\r\n    */\r\n    function isApprovedForAll(\r\n        address account,\r\n        address operator\r\n    ) external pure returns (bool) {\r\n        revert SoulboundTokenNoIsApprovedForAll(account, operator);\r\n    }\r\n\r\n    /** \r\n     * @notice will revert. Soulbound tokens cannot be transferred.\r\n    */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external pure {\r\n        revert SoulboundTokenNoSafeTransferFrom(from, to, id, amount, data);\r\n    }\r\n\r\n    /** \r\n     * @notice will revert. Soulbound tokens cannot be transferred.\r\n    */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    ) external pure {\r\n        revert SoulboundTokenNoSafeBatchTransferFrom(\r\n            from,\r\n            to,\r\n            ids,\r\n            amounts,\r\n            data\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Update token metadata URI\r\n     * @param newuri New URI\r\n     */\r\n    function setURI(uint256 id, string memory newuri) public onlyOwner {\r\n        _uri[id] = newuri;\r\n    }\r\n\r\n    /**\r\n     * @notice Get token balance of an account address\r\n     * @param account Account address\r\n     * @param id Token id\r\n     * @return balance Token balance (1 or 0)\r\n     */\r\n    function balanceOf(\r\n        address account,\r\n        uint256 id\r\n    ) public view returns (uint256 balance) {\r\n        (uint96 _certificateType, address _account) = decodeTokenId(id);\r\n        address user = getUser(_account);\r\n        if (user != account) return 0;\r\n        BitMaps.BitMap storage bitmap = _balances[user];\r\n        bool owned = BitMaps.get(bitmap, _certificateType);\r\n        return owned ? 1 : 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns a serialized token id based on a certificateType and owner account address\r\n     * @dev Each user can only own one of each certificate type. Serializing ids based on a certificateType and owner address allows us to have both shared, certificateType level metadata as well as individual token data (e.g. expiry timestamp). First 12 bytes = certificateType (uint96), next 20 bytes = owner address.\r\n     * @param certificateType Certificate type\r\n     * @param account Owner account address\r\n     * @return tokenId Serialized token id\r\n     */\r\n    function encodeTokenId(\r\n        uint96 certificateType,\r\n        address account\r\n    ) public pure returns (uint256 tokenId) {\r\n        tokenId = uint256(bytes32(abi.encodePacked(certificateType, account)));\r\n    }\r\n\r\n    /**\r\n     * @notice Decodes a serialized token id to reveal its certificateType and owner account address\r\n     * @param tokenId Serialized token id\r\n     * @return certificateType Certificate type\r\n     * @return account Owner account address\r\n     */\r\n    function decodeTokenId(\r\n        uint256 tokenId\r\n    ) public pure returns (uint96 certificateType, address account) {\r\n        certificateType = uint96(tokenId >> 160);\r\n        account = address(uint160(uint256(((bytes32(tokenId) << 96) >> 96))));\r\n    }\r\n\r\n    /** \r\n     * @dev Verifies contract supports the standard ERC1155 interface\r\n    */\r\n    function supportsInterface(\r\n        bytes4 interfaceId\r\n    ) public view override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC1155).interfaceId ||\r\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n   \r\n    \r\n\r\n    /** \r\n     * @dev Internal shared function to mint tokens and set expiries\r\n    */\r\n    function _mint(\r\n        address user,\r\n        uint96 certificateType,\r\n        uint256 expiry,\r\n        bytes32 certificateHash,\r\n        address[] memory signers\r\n    ) internal \r\n    returns (uint256 tokenId) {\r\n\r\n        uint256 index;\r\n        int minterIndex = -1;\r\n        for (index = 0; index < minters.length; index++) {\r\n            if (minters[index] == msg.sender) \r\n            {\r\n                minterIndex = int(index);\r\n            }\r\n        }\r\n        require(minterIndex >= 0, 'minter not found');\r\n\r\n        tokenId = encodeTokenId(certificateType, user);\r\n        \r\n        bool isExpired = expiry > 0 && expiry <= block.timestamp;\r\n\r\n        uint256 priorBalance = balanceOf(user, tokenId);\r\n        if (isExpired) revert IncorrectExpiry(user, certificateType, expiry);\r\n        if (priorBalance > 0)\r\n            revert IncorrectBalance(user, certificateType, priorBalance); // token already owned\r\n\r\n        BitMaps.BitMap storage balances = _balances[user];\r\n        BitMaps.set(balances, certificateType);\r\n \r\n\r\n        _expiries[tokenId] = expiry;\r\n        _certificateHash[tokenId] = certificateHash;\r\n        _issuer[tokenId] = msg.sender;\r\n        _receiver[tokenId] = user;\r\n        _approvers[tokenId] = signers;\r\n        _totalApprover[tokenId] = signers.length;\r\n        _totalSignature[tokenId] = 0;\r\n  \r\n        for(index = 0; index < _totalApprover[tokenId]; index++) {\r\n            _signedByApprovers[tokenId].push(false);\r\n        }\r\n\r\n        _status[tokenId] = CertificateStatus.CREATED;\r\n\r\n        uint96 nextPossibleNewCertificateType = uint96(maxCertificateType) + 1; // ensure new certificateTypes are one greater, pack bitmaps sequentially\r\n        if (certificateType > nextPossibleNewCertificateType)\r\n            revert NewCertificateTypeNotIncremental(certificateType, maxCertificateType);\r\n        if (certificateType == nextPossibleNewCertificateType) maxCertificateType = certificateType;\r\n    }\r\n\r\n    /** \r\n     * @dev Internal shared function to revoke (burn) tokens and delete associated expiries\r\n    */\r\n    function _revoke(\r\n        address user,\r\n        uint96 certificateType\r\n    ) internal returns (uint256 tokenId) {\r\n        tokenId = encodeTokenId(certificateType, user);\r\n\r\n        uint256 priorBalance = balanceOf(user, tokenId);\r\n        if (priorBalance == 0)\r\n            revert IncorrectBalance(user, certificateType, priorBalance); // token not owned\r\n\r\n        BitMaps.BitMap storage balances = _balances[user];\r\n        BitMaps.unset(balances, certificateType);\r\n        delete _expiries[tokenId];\r\n    }\r\n    \r\n    function splitSignature(bytes memory sig)\r\n        internal\r\n        pure\r\n        returns (uint8 v, bytes32 r, bytes32 s)\r\n    {\r\n        require(sig.length == 65);\r\n\r\n        assembly {\r\n            // first 32 bytes, after the length prefix.\r\n            r := mload(add(sig, 32))\r\n            // second 32 bytes.\r\n            s := mload(add(sig, 64))\r\n            // final byte (first byte of the next 32 bytes).\r\n            v := byte(0, mload(add(sig, 96)))\r\n        }\r\n\r\n        return (v, r, s);\r\n    }\r\n    \r\n    function _approverSigning(uint256 tokenId, bytes memory signature) internal {\r\n        require(_status[tokenId] == CertificateStatus.CREATED, 'invalid certificate status');\r\n        int approverIndex = -1;\r\n        uint256 index;\r\n        for (index = 0; index < _approvers[tokenId].length; index++) {\r\n            if (_approvers[tokenId][index] == msg.sender) \r\n            {\r\n                approverIndex = int(index);\r\n            }\r\n        }\r\n        require(approverIndex >= 0, 'approver not found');\r\n        require(!_signedByApprovers[tokenId][uint256(approverIndex)], 'already signed');\r\n        if (approverIndex > 0) {\r\n            require(_signedByApprovers[tokenId][uint256(approverIndex - 1)], 'waiting for other approver');\r\n        }\r\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\r\n        bytes32 prefixedHash = keccak256(abi.encodePacked(prefix, _certificateHash[tokenId]));\r\n        (uint8 v, bytes32 r, bytes32 s) = splitSignature(signature);\r\n        require(ecrecover(prefixedHash, v, r, s) == _approvers[tokenId][uint256(approverIndex)], 'invalid approver signature');\r\n        \r\n        _signedByApprovers[tokenId][uint256(approverIndex)] = true;\r\n        _totalSignature[tokenId] = _totalSignature[tokenId] + 1;\r\n        if (_totalSignature[tokenId] == _approvers[tokenId].length)  \r\n        {\r\n            _status[tokenId] = CertificateStatus.ISSUED;\r\n        }\r\n        emit SignedByApprover(_approvers[tokenId][uint256(approverIndex)], block.timestamp);\r\n    }\r\n\r\n    /** \r\n     * @dev Checks if an account address has an associated linked real wallet in WalletMapping. If so, returns it. Otherwise, returns original account address param value\r\n    */\r\n    function getUser(address account) internal view returns (address) {\r\n        return IWalletMapping(walletMapping).getLinkedWallet(account);\r\n    }\r\n\r\n    /** \r\n     * @dev Internal function to emit transfer events for each owned certificate (used in transitioning tokens after wallet linking)\r\n    */\r\n    function emitTransferEvents(\r\n        uint256 bitmap,\r\n        address from,\r\n        address to\r\n    ) private {\r\n        for (uint256 i = 0; i < BITMAP_SIZE; i++) {\r\n            if (bitmap & (1 << i) > 0) {\r\n                // token type is owned\r\n                emit TransferSingle(\r\n                    _msgSender(),\r\n                    from,\r\n                    to,\r\n                    encodeTokenId(uint96(i), from),\r\n                    1\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /** \r\n     * @dev ERC1155 receiver check to ensure a \"to\" address can receive the ERC1155 token standard, used in single mint\r\n    */\r\n    function _doSafeTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) private {\r\n        if (to.code.length > 0) {\r\n            // check if contract\r\n            try\r\n                IERC1155Receiver(to).onERC1155Received(\r\n                    operator,\r\n                    from,\r\n                    id,\r\n                    amount,\r\n                    data\r\n                )\r\n            returns (bytes4 response) {\r\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\r\n                    revert ERC1155ReceiverRejectedTokens();\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert ERC1155ReceiverNotImplemented();\r\n            }\r\n        }\r\n    }\r\n\r\n    /** \r\n     * @dev ERC1155 receiver check to ensure a \"to\" address can receive the ERC1155 token standard, used in batch mint\r\n    */\r\n    function _doSafeBatchTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) private {\r\n        if (to.code.length > 0) {\r\n            // check if contract\r\n            try\r\n                IERC1155Receiver(to).onERC1155BatchReceived(\r\n                    operator,\r\n                    from,\r\n                    ids,\r\n                    amounts,\r\n                    data\r\n                )\r\n            returns (bytes4 response) {\r\n                if (\r\n                    response != IERC1155Receiver.onERC1155BatchReceived.selector\r\n                ) {\r\n                    revert ERC1155ReceiverRejectedTokens();\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert ERC1155ReceiverNotImplemented();\r\n            }\r\n        }\r\n    }\r\n}`;\r\n","C:\\frontend\\src\\components\\elements\\Status\\Status.js",[],"C:\\frontend\\src\\components\\CertificatePDF\\CertificatePDF.js",["423","424","425"],"import aniLogo from \"../../assets/images/ani-logo.png\";\r\nimport \"./CertificatePDF.scss\";\r\nimport { HOST } from \"../../services/api\";\r\n\r\nexport default (props) => {\r\n  const composeAssignToName = () => {\r\n    if (!props.certificateSigners) {\r\n      return;\r\n    }\r\n    let certificateSigners = props.certificateSigners;\r\n    if (certificateSigners[0].priority !== undefined && certificateSigners[0].priority !== null) {\r\n      const sortedSigners = props.certificateSigners.sort((a, b) => {\r\n        return a.priority - b.priority;\r\n      });\r\n      certificateSigners = sortedSigners.map((signer) => {\r\n        return {\r\n          name: signer.User.name,\r\n          is_sign: signer.is_sign\r\n        }\r\n      });\r\n    }\r\n\r\n    let result = '';\r\n    for(const assignToUser of certificateSigners) {\r\n      if (assignToUser.is_sign) {\r\n        result += assignToUser.name + ', ';\r\n      }\r\n    }\r\n\r\n    return result.substr(0, result.length - 2);\r\n  }\r\n\r\n  return (\r\n    <div className=\"template\">\r\n      {/* <button\r\n        onClick={() => {\r\n          takeShot();\r\n        }}\r\n      /> */}\r\n      <div className=\"template-body\" ref={props.cetificateRef} id=\"certificateImage\">\r\n        {/* <img src={props.certificateLogo ? `${HOST}/api/files/${props.certificateLogo}` : aniLogo} className=\"certificate-logo\"/> */}\r\n        <div className=\"template-header\">\r\n          <span>{props.certificateTitle}</span>\r\n        </div>\r\n        <div className=\"template-content\">\r\n          <span className=\"certificate-no\">Certificate Number: {props.certificateNo}</span>\r\n          <span className=\"present-to\">\r\n            <b>Awarded To:</b>\r\n          </span>\r\n          <span className=\"name\">{props.receiverName}</span>\r\n          <div className=\"description\" dangerouslySetInnerHTML={{__html: props.certificateDescription}}></div>\r\n          <span className=\"score\">Score: {props.certificateScore}</span>\r\n          <span className=\"sc-address\">Contract Address: {props.scAddress ? props.scAddress : '-'}</span>\r\n          <span className=\"sc-address\">NFT ID: {props.tokenId ? props.tokenId : '-'}</span>\r\n        </div>\r\n        <div className=\"template-footer\">\r\n          <span className=\"certificate-date\">Date: {props.certificateDate}</span>\r\n          <span className=\"certificate-signers\">Signed By: {composeAssignToName()}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","C:\\frontend\\src\\components\\elements\\InputField\\InputFieldControl.js",[],"C:\\frontend\\src\\components\\CertificatePDF\\CertificateMemberPDF.js",[],"C:\\frontend\\src\\components\\elements\\Button\\index.js",[],"C:\\frontend\\src\\pages\\ProfilePage\\ProfilePageContent.js",["426","427","428","429","430","431","432"],{"ruleId":"433","replacedBy":"434"},{"ruleId":"435","replacedBy":"436"},{"ruleId":"437","severity":1,"message":"438","line":6,"column":10,"nodeType":"439","messageId":"440","endLine":6,"endColumn":15},{"ruleId":"441","severity":1,"message":"442","line":17,"column":6,"nodeType":"443","endLine":17,"endColumn":29,"suggestions":"444"},{"ruleId":"437","severity":1,"message":"445","line":1,"column":10,"nodeType":"439","messageId":"440","endLine":1,"endColumn":19},{"ruleId":"437","severity":1,"message":"446","line":1,"column":21,"nodeType":"439","messageId":"440","endLine":1,"endColumn":27},{"ruleId":"437","severity":1,"message":"447","line":1,"column":29,"nodeType":"439","messageId":"440","endLine":1,"endColumn":37},{"ruleId":"437","severity":1,"message":"448","line":3,"column":8,"nodeType":"439","messageId":"440","endLine":3,"endColumn":14},{"ruleId":"437","severity":1,"message":"449","line":4,"column":8,"nodeType":"439","messageId":"440","endLine":4,"endColumn":25},{"ruleId":"437","severity":1,"message":"450","line":7,"column":8,"nodeType":"439","messageId":"440","endLine":7,"endColumn":12},{"ruleId":"437","severity":1,"message":"451","line":3,"column":20,"nodeType":"439","messageId":"440","endLine":3,"endColumn":29},{"ruleId":"437","severity":1,"message":"452","line":12,"column":8,"nodeType":"439","messageId":"440","endLine":12,"endColumn":25},{"ruleId":"437","severity":1,"message":"453","line":13,"column":8,"nodeType":"439","messageId":"440","endLine":13,"endColumn":25},{"ruleId":"437","severity":1,"message":"454","line":14,"column":8,"nodeType":"439","messageId":"440","endLine":14,"endColumn":18},{"ruleId":"437","severity":1,"message":"455","line":19,"column":8,"nodeType":"439","messageId":"440","endLine":19,"endColumn":19},{"ruleId":"437","severity":1,"message":"456","line":20,"column":8,"nodeType":"439","messageId":"440","endLine":20,"endColumn":29},{"ruleId":"441","severity":1,"message":"457","line":55,"column":6,"nodeType":"443","endLine":55,"endColumn":8,"suggestions":"458"},{"ruleId":"437","severity":1,"message":"459","line":3,"column":8,"nodeType":"439","messageId":"440","endLine":3,"endColumn":13},{"ruleId":"437","severity":1,"message":"460","line":4,"column":8,"nodeType":"439","messageId":"440","endLine":4,"endColumn":17},{"ruleId":"437","severity":1,"message":"445","line":6,"column":10,"nodeType":"439","messageId":"440","endLine":6,"endColumn":19},{"ruleId":"461","severity":1,"message":"462","line":58,"column":17,"nodeType":"463","messageId":"464","endLine":58,"endColumn":59},{"ruleId":"441","severity":1,"message":"457","line":52,"column":6,"nodeType":"443","endLine":52,"endColumn":8,"suggestions":"465"},{"ruleId":"437","severity":1,"message":"466","line":11,"column":8,"nodeType":"439","messageId":"440","endLine":11,"endColumn":22},{"ruleId":"437","severity":1,"message":"467","line":20,"column":8,"nodeType":"439","messageId":"440","endLine":20,"endColumn":12},{"ruleId":"437","severity":1,"message":"468","line":23,"column":9,"nodeType":"439","messageId":"440","endLine":23,"endColumn":15},{"ruleId":"437","severity":1,"message":"469","line":26,"column":10,"nodeType":"439","messageId":"440","endLine":26,"endColumn":18},{"ruleId":"437","severity":1,"message":"470","line":60,"column":10,"nodeType":"439","messageId":"440","endLine":60,"endColumn":25},{"ruleId":"437","severity":1,"message":"471","line":99,"column":9,"nodeType":"439","messageId":"440","endLine":99,"endColumn":27},{"ruleId":"441","severity":1,"message":"472","line":108,"column":6,"nodeType":"443","endLine":108,"endColumn":65,"suggestions":"473"},{"ruleId":"441","severity":1,"message":"474","line":114,"column":6,"nodeType":"443","endLine":114,"endColumn":24,"suggestions":"475"},{"ruleId":"437","severity":1,"message":"476","line":192,"column":9,"nodeType":"439","messageId":"440","endLine":192,"endColumn":21},{"ruleId":"477","severity":1,"message":"478","line":237,"column":22,"nodeType":"479","messageId":"480","endLine":237,"endColumn":24},{"ruleId":"437","severity":1,"message":"481","line":340,"column":13,"nodeType":"439","messageId":"440","endLine":340,"endColumn":28},{"ruleId":"437","severity":1,"message":"482","line":354,"column":13,"nodeType":"439","messageId":"440","endLine":354,"endColumn":21},{"ruleId":"483","severity":1,"message":"484","line":658,"column":11,"nodeType":"485","messageId":"486","endLine":658,"endColumn":17},{"ruleId":"441","severity":1,"message":"487","line":26,"column":6,"nodeType":"443","endLine":26,"endColumn":8,"suggestions":"488"},{"ruleId":"437","severity":1,"message":"489","line":53,"column":13,"nodeType":"439","messageId":"440","endLine":53,"endColumn":21},{"ruleId":"441","severity":1,"message":"490","line":41,"column":6,"nodeType":"443","endLine":41,"endColumn":19,"suggestions":"491"},{"ruleId":"437","severity":1,"message":"492","line":1,"column":10,"nodeType":"439","messageId":"440","endLine":1,"endColumn":19},{"ruleId":"437","severity":1,"message":"445","line":1,"column":21,"nodeType":"439","messageId":"440","endLine":1,"endColumn":30},{"ruleId":"437","severity":1,"message":"466","line":5,"column":8,"nodeType":"439","messageId":"440","endLine":5,"endColumn":22},{"ruleId":"437","severity":1,"message":"493","line":7,"column":8,"nodeType":"439","messageId":"440","endLine":7,"endColumn":12},{"ruleId":"494","severity":1,"message":"495","line":10,"column":1,"nodeType":"496","endLine":90,"endColumn":2},{"ruleId":"437","severity":1,"message":"497","line":11,"column":10,"nodeType":"439","messageId":"440","endLine":11,"endColumn":27},{"ruleId":"437","severity":1,"message":"498","line":11,"column":29,"nodeType":"439","messageId":"440","endLine":11,"endColumn":49},{"ruleId":"437","severity":1,"message":"499","line":33,"column":69,"nodeType":"439","messageId":"440","endLine":33,"endColumn":78},{"ruleId":"437","severity":1,"message":"500","line":33,"column":80,"nodeType":"439","messageId":"440","endLine":33,"endColumn":87},{"ruleId":"441","severity":1,"message":"501","line":75,"column":6,"nodeType":"443","endLine":75,"endColumn":8,"suggestions":"502"},{"ruleId":"494","severity":1,"message":"495","line":3,"column":1,"nodeType":"496","endLine":12,"endColumn":2},{"ruleId":"437","severity":1,"message":"503","line":2,"column":8,"nodeType":"439","messageId":"440","endLine":2,"endColumn":16},{"ruleId":"441","severity":1,"message":"504","line":29,"column":6,"nodeType":"443","endLine":29,"endColumn":8,"suggestions":"505"},{"ruleId":"437","severity":1,"message":"506","line":12,"column":10,"nodeType":"439","messageId":"440","endLine":12,"endColumn":17},{"ruleId":"437","severity":1,"message":"507","line":17,"column":9,"nodeType":"439","messageId":"440","endLine":17,"endColumn":14},{"ruleId":"437","severity":1,"message":"508","line":53,"column":9,"nodeType":"439","messageId":"440","endLine":53,"endColumn":14},{"ruleId":"437","severity":1,"message":"509","line":85,"column":13,"nodeType":"439","messageId":"440","endLine":85,"endColumn":16},{"ruleId":"441","severity":1,"message":"510","line":161,"column":6,"nodeType":"443","endLine":161,"endColumn":8,"suggestions":"511"},{"ruleId":"512","severity":1,"message":"513","line":164,"column":5,"nodeType":"514","messageId":"515","endLine":177,"endColumn":6},{"ruleId":"477","severity":1,"message":"478","line":182,"column":35,"nodeType":"479","messageId":"480","endLine":182,"endColumn":37},{"ruleId":"512","severity":1,"message":"513","line":184,"column":5,"nodeType":"514","messageId":"515","endLine":225,"endColumn":6},{"ruleId":"437","severity":1,"message":"469","line":13,"column":10,"nodeType":"439","messageId":"440","endLine":13,"endColumn":18},{"ruleId":"441","severity":1,"message":"510","line":29,"column":6,"nodeType":"443","endLine":29,"endColumn":17,"suggestions":"516"},{"ruleId":"437","severity":1,"message":"517","line":6,"column":8,"nodeType":"439","messageId":"440","endLine":6,"endColumn":14},{"ruleId":"437","severity":1,"message":"518","line":12,"column":10,"nodeType":"439","messageId":"440","endLine":12,"endColumn":28},{"ruleId":"437","severity":1,"message":"469","line":15,"column":10,"nodeType":"439","messageId":"440","endLine":15,"endColumn":18},{"ruleId":"441","severity":1,"message":"510","line":34,"column":6,"nodeType":"443","endLine":34,"endColumn":23,"suggestions":"519"},{"ruleId":"437","severity":1,"message":"520","line":3,"column":10,"nodeType":"439","messageId":"440","endLine":3,"endColumn":15},{"ruleId":"494","severity":1,"message":"495","line":9,"column":1,"nodeType":"496","endLine":18,"endColumn":2},{"ruleId":"437","severity":1,"message":"521","line":3,"column":3,"nodeType":"439","messageId":"440","endLine":3,"endColumn":16},{"ruleId":"437","severity":1,"message":"522","line":4,"column":3,"nodeType":"439","messageId":"440","endLine":4,"endColumn":22},{"ruleId":"437","severity":1,"message":"523","line":6,"column":10,"nodeType":"439","messageId":"440","endLine":6,"endColumn":25},{"ruleId":"437","severity":1,"message":"524","line":2,"column":8,"nodeType":"439","messageId":"440","endLine":2,"endColumn":16},{"ruleId":"437","severity":1,"message":"525","line":11,"column":3,"nodeType":"439","messageId":"440","endLine":11,"endColumn":15},{"ruleId":"437","severity":1,"message":"526","line":13,"column":3,"nodeType":"439","messageId":"440","endLine":13,"endColumn":18},{"ruleId":"437","severity":1,"message":"527","line":21,"column":10,"nodeType":"439","messageId":"440","endLine":21,"endColumn":22},{"ruleId":"441","severity":1,"message":"528","line":34,"column":6,"nodeType":"443","endLine":34,"endColumn":19,"suggestions":"529"},{"ruleId":"437","severity":1,"message":"530","line":57,"column":9,"nodeType":"439","messageId":"440","endLine":57,"endColumn":17},{"ruleId":"441","severity":1,"message":"531","line":205,"column":6,"nodeType":"443","endLine":205,"endColumn":79,"suggestions":"532"},{"ruleId":"437","severity":1,"message":"509","line":239,"column":11,"nodeType":"439","messageId":"440","endLine":239,"endColumn":14},{"ruleId":"437","severity":1,"message":"459","line":9,"column":8,"nodeType":"439","messageId":"440","endLine":9,"endColumn":13},{"ruleId":"437","severity":1,"message":"533","line":10,"column":21,"nodeType":"439","messageId":"440","endLine":10,"endColumn":23},{"ruleId":"437","severity":1,"message":"447","line":1,"column":10,"nodeType":"439","messageId":"440","endLine":1,"endColumn":18},{"ruleId":"512","severity":1,"message":"513","line":5,"column":3,"nodeType":"514","messageId":"515","endLine":70,"endColumn":4},{"ruleId":"494","severity":1,"message":"495","line":5,"column":1,"nodeType":"496","endLine":41,"endColumn":3},{"ruleId":"512","severity":1,"message":"513","line":8,"column":5,"nodeType":"514","messageId":"515","endLine":19,"endColumn":6},{"ruleId":"534","severity":1,"message":"535","line":27,"column":27,"nodeType":"536","messageId":"537","endLine":27,"endColumn":29},{"ruleId":"437","severity":1,"message":"538","line":1,"column":8,"nodeType":"439","messageId":"440","endLine":1,"endColumn":20},{"ruleId":"437","severity":1,"message":"506","line":5,"column":10,"nodeType":"439","messageId":"440","endLine":5,"endColumn":17},{"ruleId":"437","severity":1,"message":"539","line":7,"column":8,"nodeType":"439","messageId":"440","endLine":7,"endColumn":22},{"ruleId":"437","severity":1,"message":"540","line":8,"column":10,"nodeType":"439","messageId":"440","endLine":8,"endColumn":16},{"ruleId":"437","severity":1,"message":"525","line":11,"column":3,"nodeType":"439","messageId":"440","endLine":11,"endColumn":15},{"ruleId":"437","severity":1,"message":"526","line":13,"column":3,"nodeType":"439","messageId":"440","endLine":13,"endColumn":18},{"ruleId":"437","severity":1,"message":"527","line":35,"column":10,"nodeType":"439","messageId":"440","endLine":35,"endColumn":22},{"ruleId":"437","severity":1,"message":"541","line":36,"column":23,"nodeType":"439","messageId":"440","endLine":36,"endColumn":37},{"ruleId":"441","severity":1,"message":"528","line":63,"column":6,"nodeType":"443","endLine":63,"endColumn":19,"suggestions":"542"},{"ruleId":"437","severity":1,"message":"530","line":65,"column":9,"nodeType":"439","messageId":"440","endLine":65,"endColumn":17},{"ruleId":"437","severity":1,"message":"543","line":31,"column":10,"nodeType":"439","messageId":"440","endLine":31,"endColumn":20},{"ruleId":"441","severity":1,"message":"544","line":38,"column":6,"nodeType":"443","endLine":38,"endColumn":20,"suggestions":"545"},{"ruleId":"437","severity":1,"message":"546","line":43,"column":13,"nodeType":"439","messageId":"440","endLine":43,"endColumn":19},{"ruleId":"437","severity":1,"message":"546","line":55,"column":13,"nodeType":"439","messageId":"440","endLine":55,"endColumn":19},{"ruleId":"437","severity":1,"message":"459","line":1,"column":8,"nodeType":"439","messageId":"440","endLine":1,"endColumn":13},{"ruleId":"547","severity":1,"message":"548","line":18,"column":26,"nodeType":"439","messageId":"549","endLine":18,"endColumn":40},{"ruleId":"437","severity":1,"message":"550","line":42,"column":9,"nodeType":"439","messageId":"440","endLine":42,"endColumn":15},{"ruleId":"437","severity":1,"message":"551","line":1,"column":10,"nodeType":"439","messageId":"440","endLine":1,"endColumn":19},{"ruleId":"437","severity":1,"message":"523","line":2,"column":10,"nodeType":"439","messageId":"440","endLine":2,"endColumn":25},{"ruleId":"437","severity":1,"message":"552","line":31,"column":10,"nodeType":"439","messageId":"440","endLine":31,"endColumn":26},{"ruleId":"441","severity":1,"message":"553","line":83,"column":6,"nodeType":"443","endLine":83,"endColumn":12,"suggestions":"554"},{"ruleId":"512","severity":1,"message":"513","line":95,"column":5,"nodeType":"514","messageId":"515","endLine":128,"endColumn":6},{"ruleId":"437","severity":1,"message":"530","line":161,"column":9,"nodeType":"439","messageId":"440","endLine":161,"endColumn":17},{"ruleId":"437","severity":1,"message":"509","line":201,"column":19,"nodeType":"439","messageId":"440","endLine":201,"endColumn":22},{"ruleId":"437","severity":1,"message":"509","line":219,"column":15,"nodeType":"439","messageId":"440","endLine":219,"endColumn":18},{"ruleId":"437","severity":1,"message":"555","line":3,"column":10,"nodeType":"439","messageId":"440","endLine":3,"endColumn":14},{"ruleId":"556","severity":1,"message":"557","line":28,"column":11,"nodeType":"558","endLine":28,"endColumn":44},{"ruleId":"437","severity":1,"message":"522","line":1,"column":10,"nodeType":"439","messageId":"440","endLine":1,"endColumn":29},{"ruleId":"437","severity":1,"message":"559","line":1,"column":42,"nodeType":"439","messageId":"440","endLine":1,"endColumn":55},{"ruleId":"437","severity":1,"message":"560","line":42,"column":23,"nodeType":"439","messageId":"440","endLine":42,"endColumn":37},{"ruleId":"441","severity":1,"message":"553","line":85,"column":6,"nodeType":"443","endLine":85,"endColumn":26,"suggestions":"561"},{"ruleId":"512","severity":1,"message":"513","line":93,"column":5,"nodeType":"514","messageId":"515","endLine":126,"endColumn":6},{"ruleId":"437","severity":1,"message":"562","line":160,"column":13,"nodeType":"439","messageId":"440","endLine":160,"endColumn":17},{"ruleId":"437","severity":1,"message":"562","line":190,"column":13,"nodeType":"439","messageId":"440","endLine":190,"endColumn":17},{"ruleId":"563","severity":1,"message":"564","line":185,"column":16,"nodeType":"565","messageId":"566","endLine":185,"endColumn":17,"suggestions":"567"},{"ruleId":"563","severity":1,"message":"568","line":185,"column":20,"nodeType":"565","messageId":"566","endLine":185,"endColumn":21,"suggestions":"569"},{"ruleId":"437","severity":1,"message":"570","line":1,"column":8,"nodeType":"439","messageId":"440","endLine":1,"endColumn":15},{"ruleId":"437","severity":1,"message":"555","line":3,"column":10,"nodeType":"439","messageId":"440","endLine":3,"endColumn":14},{"ruleId":"494","severity":1,"message":"495","line":5,"column":1,"nodeType":"496","endLine":63,"endColumn":3},{"ruleId":"437","severity":1,"message":"571","line":2,"column":8,"nodeType":"439","messageId":"440","endLine":2,"endColumn":14},{"ruleId":"437","severity":1,"message":"572","line":4,"column":8,"nodeType":"439","messageId":"440","endLine":4,"endColumn":14},{"ruleId":"437","severity":1,"message":"555","line":7,"column":15,"nodeType":"439","messageId":"440","endLine":7,"endColumn":19},{"ruleId":"437","severity":1,"message":"573","line":8,"column":8,"nodeType":"439","messageId":"440","endLine":8,"endColumn":24},{"ruleId":"437","severity":1,"message":"574","line":20,"column":10,"nodeType":"439","messageId":"440","endLine":20,"endColumn":22},{"ruleId":"477","severity":1,"message":"575","line":24,"column":19,"nodeType":"479","messageId":"480","endLine":24,"endColumn":21},{"ruleId":"441","severity":1,"message":"576","line":72,"column":6,"nodeType":"443","endLine":72,"endColumn":19,"suggestions":"577"},"no-native-reassign",["578"],"no-negated-in-lhs",["579"],"no-unused-vars","'magic' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'authenticateWithServer'. Either include it or remove the dependency array.","ArrayExpression",["580"],"'useEffect' is defined but never used.","'useRef' is defined but never used.","'useState' is defined but never used.","'Footer' is defined but never used.","'SearchCertificate' is defined but never used.","'logo' is defined but never used.","'useParams' is defined but never used.","'ManageCertificate' is defined but never used.","'InstitutionMaster' is defined but never used.","'UserMaster' is defined but never used.","'AdminMaster' is defined but never used.","'CertificateTypeMaster' is defined but never used.","React Hook useEffect has a missing dependency: 'getActorDetails'. Either include it or remove the dependency array.",["581"],"'axios' is defined but never used.","'jsConvert' is defined but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object",["582"],"'CertificateSet' is defined but never used.","'name' is defined but never used.","'Buffer' is assigned a value but never used.","'isDelete' is assigned a value but never used.","'certificateType' is assigned a value but never used.","'deleteSelectedData' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getAllCertificates'. Either include it or remove the dependency array.",["583"],"React Hook useEffect has a missing dependency: 'handleSelectCertType'. Either include it or remove the dependency array.",["584"],"'currentItems' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'certificateHash' is assigned a value but never used.","'accounts' is assigned a value but never used.","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","React Hook useEffect has missing dependencies: 'currentPage', 'getAllCertificateTypes', and 'itemsPerPage'. Either include them or remove the dependency array.",["585"],"'response' is assigned a value but never used.","React Hook useMemo has a missing dependency: 'props.type'. Either include it or remove the dependency array.",["586"],"'Component' is defined but never used.","'web3' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'certificateStatus' is assigned a value but never used.","'setCertificateStatus' is assigned a value but never used.","'scAddress' is assigned a value but never used.","'tokenId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.contractAddress'. Either include it or remove the dependency array. If 'setScAddress' needs the current value of 'props.contractAddress', you can also switch to useReducer instead of useState and read 'props.contractAddress' in the reducer.",["587"],"'menuIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'props.menu'. Either include it or remove the dependency array.",["588"],"'history' is defined but never used.","'value' is assigned a value but never used.","'actor' is assigned a value but never used.","'res' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'currentPage' and 'itemsPerPage'. Either include them or remove the dependency array.",["589"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["590"],"'Delete' is defined but never used.","'createNotification' is defined but never used.",["591"],"'ACTOR' is defined but never used.","'faCheckCircle' is defined but never used.","'faExclamationCircle' is defined but never used.","'FontAwesomeIcon' is defined but never used.","'template' is defined but never used.","'ContentState' is defined but never used.","'convertFromHTML' is defined but never used.","'isProcessing' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'onEditorStateChange'. Either include it or remove the dependency array.",["592"],"'onUpload' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'admin', 'decideSigner', 'getCertificate', and 'user'. Either include them or remove the dependency array.",["593"],"'id' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'SubmitButton' is defined but never used.","'CertificatePDF' is defined but never used.","'Editor' is defined but never used.","'setEditorState' is assigned a value but never used.",["594"],"'selectedId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setValue'. Either include it or remove the dependency array.",["595"],"'result' is assigned a value but never used.","no-use-before-define","'CertificateSet' was used before it was defined.","usedBeforeDefined","'config' is assigned a value but never used.","'faSpinner' is defined but never used.","'originalFileName' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fillInput', 'getAllInstitutions', and 'props.edit'. Either include them or remove the dependency array.",["596"],"'HOST' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'faTimesCircle' is defined but never used.","'setInputFilled' is assigned a value but never used.",["597"],"'user' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\{.","TemplateElement","unnecessaryEscape",["598","599"],"Unnecessary escape character: \\}.",["600","601"],"'aniLogo' is defined but never used.","'Header' is defined but never used.","'avatar' is defined but never used.","'TableCertificate' is defined but never used.","'certificates' is assigned a value but never used.","Expected '===' and instead saw '=='.","React Hook useEffect has a missing dependency: 'getActor'. Either include it or remove the dependency array.",["602"],"no-global-assign","no-unsafe-negation",{"desc":"603","fix":"604"},{"desc":"605","fix":"606"},{"desc":"605","fix":"607"},{"desc":"608","fix":"609"},{"desc":"610","fix":"611"},{"desc":"612","fix":"613"},{"desc":"614","fix":"615"},{"desc":"616","fix":"617"},{"desc":"618","fix":"619"},{"desc":"620","fix":"621"},{"desc":"622","fix":"623"},{"desc":"624","fix":"625"},{"desc":"626","fix":"627"},{"desc":"628","fix":"629"},{"desc":"626","fix":"630"},{"desc":"631","fix":"632"},{"desc":"633","fix":"634"},{"desc":"635","fix":"636"},{"messageId":"637","fix":"638","desc":"639"},{"messageId":"640","fix":"641","desc":"642"},{"messageId":"637","fix":"643","desc":"639"},{"messageId":"640","fix":"644","desc":"642"},{"desc":"645","fix":"646"},"Update the dependencies array to be: [authenticateWithServer, props.location.search]",{"range":"647","text":"648"},"Update the dependencies array to be: [getActorDetails]",{"range":"649","text":"650"},{"range":"651","text":"650"},"Update the dependencies array to be: [step, currentPage, itemsPerPage, props.type, props.user, getAllCertificates]",{"range":"652","text":"653"},"Update the dependencies array to be: [handleSelectCertType, selectedCertType]",{"range":"654","text":"655"},"Update the dependencies array to be: [currentPage, getAllCertificateTypes, itemsPerPage]",{"range":"656","text":"657"},"Update the dependencies array to be: [props.actor, props.type]",{"range":"658","text":"659"},"Update the dependencies array to be: [props.contractAddress]",{"range":"660","text":"661"},"Update the dependencies array to be: [props.menu]",{"range":"662","text":"663"},"Update the dependencies array to be: [currentPage, itemsPerPage]",{"range":"664","text":"665"},"Update the dependencies array to be: [add, currentPage, edit, itemsPerPage]",{"range":"666","text":"667"},"Update the dependencies array to be: [add, currentPage, edit, itemsPerPage, view]",{"range":"668","text":"669"},"Update the dependencies array to be: [editorState, onEditorStateChange]",{"range":"670","text":"671"},"Update the dependencies array to be: [props.certificateId, certificate, certificateStatus, progressBarContent, user, admin, getCertificate, decideSigner]",{"range":"672","text":"673"},{"range":"674","text":"671"},"Update the dependencies array to be: [selectedData, setValue]",{"range":"675","text":"676"},"Update the dependencies array to be: [fillInput, getAllInstitutions, props.edit, role]",{"range":"677","text":"678"},"Update the dependencies array to be: [fillInput, getAllInstitutions, props.edit, props.selectedUser]",{"range":"679","text":"680"},"removeEscape",{"range":"681","text":"682"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"683","text":"684"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"685","text":"682"},{"range":"686","text":"684"},"Update the dependencies array to be: [actorPubKey, getActor]",{"range":"687","text":"688"},[825,848],"[authenticateWithServer, props.location.search]",[1892,1894],"[getActorDetails]",[1865,1867],[4051,4110],"[step, currentPage, itemsPerPage, props.type, props.user, getAllCertificates]",[4209,4227],"[handleSelectCertType, selectedCertType]",[1210,1212],"[currentPage, getAllCertificateTypes, itemsPerPage]",[1567,1580],"[props.actor, props.type]",[2100,2102],"[props.contractAddress]",[1029,1031],"[props.menu]",[5221,5223],"[currentPage, itemsPerPage]",[1224,1235],"[add, currentPage, edit, itemsPerPage]",[1451,1468],"[add, currentPage, edit, itemsPerPage, view]",[1249,1262],"[editorState, onEditorStateChange]",[6715,6788],"[props.certificateId, certificate, certificateStatus, progressBarContent, user, admin, getCertificate, decideSigner]",[2087,2100],[1037,1051],"[selectedData, setValue]",[2714,2720],"[fillInput, getAllInstitutions, props.edit, role]",[2503,2523],"[fillInput, getAllInstitutions, props.edit, props.selectedUser]",[7051,7052],"",[7051,7051],"\\",[7055,7056],[7055,7055],[2381,2394],"[actorPubKey, getActor]"]