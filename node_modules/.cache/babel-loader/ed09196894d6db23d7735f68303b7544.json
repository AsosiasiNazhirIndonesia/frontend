{"ast":null,"code":"var c = (e, s, n) => new Promise((t, r) => {\n  var i = o => {\n      try {\n        u(n.next(o));\n      } catch (l) {\n        r(l);\n      }\n    },\n    a = o => {\n      try {\n        u(n.throw(o));\n      } catch (l) {\n        r(l);\n      }\n    },\n    u = o => o.done ? t(o.value) : Promise.resolve(o.value).then(i, a);\n  u((n = n.apply(e, s)).next());\n});\nimport { Extension as w } from \"@magic-sdk/commons\";\nvar y = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nfunction b(e) {\n  let s,\n    n = e.length % 3,\n    t = \"\",\n    r,\n    i;\n  function a(o) {\n    return y.charAt(o);\n  }\n  function u(o) {\n    return a(o >> 18 & 63) + a(o >> 12 & 63) + a(o >> 6 & 63) + a(o & 63);\n  }\n  for (s = 0, i = e.length - n; s < i; s += 3) r = (e[s] << 16) + (e[s + 1] << 8) + e[s + 2], t += u(r);\n  switch (n) {\n    case 1:\n      r = e[e.length - 1], t += a(r >> 2), t += a(r << 4 & 63), t += \"==\";\n      break;\n    case 2:\n      r = (e[e.length - 2] << 8) + e[e.length - 1], t += a(r >> 10), t += a(r >> 4 & 63), t += a(r << 2 & 63), t += \"=\";\n      break;\n    default:\n      break;\n  }\n  return t;\n}\nfunction h(e) {\n  return b(e).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n}\nfunction p(e) {\n  return b(e).replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n}\nfunction _(e) {\n  return Array.from(e).map(function (s) {\n    return `0${s.toString(16)}`.substr(-2);\n  }).join(\"\");\n}\nvar g = e => {\n    let s = new Uint8Array(e.response.attestationObject),\n      n = new Uint8Array(e.response.clientDataJSON),\n      t = new Uint8Array(e.rawId),\n      r = e.getClientExtensionResults();\n    return {\n      id: e.id,\n      rawId: h(t),\n      type: e.type,\n      attObj: h(s),\n      clientData: h(n),\n      registrationClientExtensions: JSON.stringify(r)\n    };\n  },\n  f = e => {\n    let s = new Uint8Array(e.response.authenticatorData),\n      n = new Uint8Array(e.response.clientDataJSON),\n      t = new Uint8Array(e.rawId),\n      r = new Uint8Array(e.response.signature),\n      i = e.getClientExtensionResults();\n    return {\n      id: e.id,\n      rawId: h(t),\n      type: e.type,\n      authData: p(s),\n      clientData: p(n),\n      signature: _(r),\n      assertionClientExtensions: JSON.stringify(i)\n    };\n  };\nvar d = class extends w.Internal {\n  constructor() {\n    super(...arguments);\n    this.name = \"webauthn\";\n    this.config = {};\n  }\n  createWebAuthnNotSupportError() {\n    this.createError(\"WEBAUTHN_NOT_SUPPORTED\", \"WebAuthn is not supported in this device.\", {});\n  }\n  createWebAuthCreateCredentialError(n) {\n    this.createError(\"WEBAUTHN_CREATE_CREDENTIAL_ERROR\", `Error creating credential: ${n}`, {});\n  }\n  registerNewUser(n) {\n    return c(this, null, function* () {\n      if (!window.PublicKeyCredential) throw this.createWebAuthnNotSupportError();\n      let {\n          username: t,\n          nickname: r = \"\"\n        } = n,\n        i = yield this.request(this.utils.createJsonRpcRequestPayload(\"magic_auth_webauthn_registration_start\", [{\n          username: t\n        }])),\n        a;\n      try {\n        a = yield navigator.credentials.create({\n          publicKey: i.credential_options\n        });\n      } catch (u) {\n        throw this.createWebAuthCreateCredentialError(u);\n      }\n      return this.request(this.utils.createJsonRpcRequestPayload(\"magic_auth_webauthn_register\", [{\n        id: i.id,\n        nickname: r,\n        transport: a.response.getTransports(),\n        user_agent: navigator.userAgent,\n        registration_response: g(a)\n      }]));\n    });\n  }\n  login(n) {\n    return c(this, null, function* () {\n      if (!window.PublicKeyCredential) throw this.createWebAuthnNotSupportError();\n      let {\n          username: t\n        } = n,\n        r = yield this.request(this.utils.createJsonRpcRequestPayload(\"magic_auth_login_with_web_authn\", [{\n          username: t\n        }])),\n        i;\n      try {\n        i = yield navigator.credentials.get({\n          publicKey: r\n        });\n      } catch (a) {\n        throw this.createWebAuthCreateCredentialError(a);\n      }\n      return this.request(this.utils.createJsonRpcRequestPayload(\"magic_auth_login_with_webauthn_verify\", [{\n        username: t,\n        assertion_response: f(i)\n      }]));\n    });\n  }\n  updateInfo(n) {\n    let {\n        id: t,\n        nickname: r\n      } = n,\n      i = this.utils.createJsonRpcRequestPayload(\"magic_user_update_webauthn\", [{\n        webAuthnCredentialsId: t,\n        nickname: r\n      }]);\n    return this.request(i);\n  }\n  unregisterDevice(n) {\n    let t = this.utils.createJsonRpcRequestPayload(\"magic_user_unregister_webauthn\", [{\n      webAuthnCredentialsId: n\n    }]);\n    return this.request(t);\n  }\n  registerNewDevice() {\n    let n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return c(this, null, function* () {\n      if (!window.PublicKeyCredential) throw this.createWebAuthnNotSupportError();\n      let t = yield this.request(this.utils.createJsonRpcRequestPayload(\"magic_auth_register_webauthn_device_start\", [])),\n        r;\n      try {\n        r = yield navigator.credentials.create({\n          publicKey: t.credential_options\n        });\n      } catch (i) {\n        throw this.createWebAuthCreateCredentialError(i);\n      }\n      return this.request(this.utils.createJsonRpcRequestPayload(\"magic_auth_register_webauthn_device\", [{\n        nickname: n,\n        transport: r.response.getTransports(),\n        user_agent: navigator.userAgent,\n        registration_response: g(r)\n      }]));\n    });\n  }\n  getMetadata() {\n    let n = this.utils.createJsonRpcRequestPayload(\"magic_user_get_webauthn_credentials\", []);\n    return this.request(n);\n  }\n};\nexport { d as WebAuthnExtension };","map":{"version":3,"sources":["../../src/index.ts","../../src/utils/webauthn.js"],"names":["WebAuthnExtension","Extension","message","configuration","options","credential","err","transformNewAssertionForServer","transformedCredentialRequestOptions","assertion","transformAssertionForServer","requestPayload","id","nickname","lookup","fromByteArray","uint8","i","extraBytes","output","temp","length","encode","num","tripletToBase64","b64enc","buf","b64RawEnc","hexEncode","x","newAssertion","attObj","clientDataJSON","rawId","registrationClientExtensions","authData","sig","assertionClientExtensions"],"mappings":"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","sourcesContent":["import { Extension } from '@magic-sdk/commons';\nimport {\n  RegisterNewUserConfiguration,\n  LoginWithWebAuthnConfiguration,\n  MagicWebAuthnPayloadMethod,\n  WebAuthnSDKErrorCode,\n  UpdateWebAuthnInfoConfiguration,\n} from './types';\nimport { transformAssertionForServer, transformNewAssertionForServer } from './utils/webauthn.js';\n\nexport class WebAuthnExtension extends Extension.Internal<'webauthn', any> {\n  name = 'webauthn' as const;\n  config: any = {};\n\n  private createWebAuthnNotSupportError() {\n    this.createError(WebAuthnSDKErrorCode.WebAuthnNotSupported, 'WebAuthn is not supported in this device.', {});\n  }\n\n  private createWebAuthCreateCredentialError(message: string) {\n    this.createError(WebAuthnSDKErrorCode.WebAuthnCreateCredentialError, `Error creating credential: ${message}`, {});\n  }\n\n  public async registerNewUser(configuration: RegisterNewUserConfiguration) {\n    if (!window.PublicKeyCredential) {\n      throw this.createWebAuthnNotSupportError();\n    }\n    const { username, nickname = '' } = configuration;\n\n    const options = await this.request<any>(\n      this.utils.createJsonRpcRequestPayload(MagicWebAuthnPayloadMethod.WebAuthnRegistrationStart, [{ username }]),\n    );\n\n    let credential;\n    try {\n      credential = (await navigator.credentials.create({\n        publicKey: options.credential_options,\n      })) as any;\n    } catch (err: any) {\n      throw this.createWebAuthCreateCredentialError(err);\n    }\n\n    return this.request<string | null>(\n      this.utils.createJsonRpcRequestPayload(MagicWebAuthnPayloadMethod.RegisterWithWebAuth, [\n        {\n          id: options.id,\n          nickname,\n          transport: credential.response.getTransports(),\n          user_agent: navigator.userAgent,\n          registration_response: transformNewAssertionForServer(credential),\n        },\n      ]),\n    );\n  }\n\n  public async login(configuration: LoginWithWebAuthnConfiguration) {\n    if (!window.PublicKeyCredential) {\n      throw this.createWebAuthnNotSupportError();\n    }\n    const { username } = configuration;\n\n    const transformedCredentialRequestOptions = await this.request<any>(\n      this.utils.createJsonRpcRequestPayload(MagicWebAuthnPayloadMethod.LoginWithWebAuthn, [{ username }]),\n    );\n\n    let assertion;\n    try {\n      assertion = (await navigator.credentials.get({\n        publicKey: transformedCredentialRequestOptions,\n      })) as any;\n    } catch (err: any) {\n      throw this.createWebAuthCreateCredentialError(err);\n    }\n\n    return this.request<string | null>(\n      this.utils.createJsonRpcRequestPayload(MagicWebAuthnPayloadMethod.WebAuthnLoginVerify, [\n        {\n          username,\n          assertion_response: transformAssertionForServer(assertion),\n        },\n      ]),\n    );\n  }\n\n  public updateInfo(configuration: UpdateWebAuthnInfoConfiguration) {\n    const { id, nickname } = configuration;\n    const requestPayload = this.utils.createJsonRpcRequestPayload(MagicWebAuthnPayloadMethod.UpdateWebAuthnInfo, [\n      {\n        webAuthnCredentialsId: id,\n        nickname,\n      },\n    ]);\n    return this.request<any[]>(requestPayload);\n  }\n\n  public unregisterDevice(id: string) {\n    const requestPayload = this.utils.createJsonRpcRequestPayload(MagicWebAuthnPayloadMethod.UnregisterWebAuthDevice, [\n      {\n        webAuthnCredentialsId: id,\n      },\n    ]);\n\n    return this.request<any>(requestPayload);\n  }\n\n  public async registerNewDevice(nickname = '') {\n    if (!window.PublicKeyCredential) {\n      throw this.createWebAuthnNotSupportError();\n    }\n    const options = await this.request<any>(\n      this.utils.createJsonRpcRequestPayload(MagicWebAuthnPayloadMethod.RegisterWebAuthDeviceStart, []),\n    );\n\n    let credential;\n    try {\n      credential = (await navigator.credentials.create({\n        publicKey: options.credential_options,\n      })) as any;\n    } catch (err: any) {\n      throw this.createWebAuthCreateCredentialError(err);\n    }\n\n    return this.request<string | null>(\n      this.utils.createJsonRpcRequestPayload(MagicWebAuthnPayloadMethod.RegisterWebAuthDevice, [\n        {\n          nickname,\n          transport: credential.response.getTransports(),\n          user_agent: navigator.userAgent,\n          registration_response: transformNewAssertionForServer(credential),\n        },\n      ]),\n    );\n  }\n\n  public getMetadata() {\n    const requestPayload = this.utils.createJsonRpcRequestPayload(MagicWebAuthnPayloadMethod.GetWebAuthnInfo, []);\n    return this.request<any[]>(requestPayload);\n  }\n}\n","const lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n/* eslint-disable */\n/* istanbul ignore next  */\nfunction fromByteArray(uint8) {\n  let i;\n  const extraBytes = uint8.length % 3; // if we have 1 byte left, pad 2 bytes\n  let output = '';\n  let temp;\n  let length;\n\n  function encode(num) {\n    return lookup.charAt(num);\n  }\n\n  function tripletToBase64(num) {\n    return encode((num >> 18) & 0x3f) + encode((num >> 12) & 0x3f) + encode((num >> 6) & 0x3f) + encode(num & 0x3f);\n  }\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {\n    temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];\n    output += tripletToBase64(temp);\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  switch (extraBytes) {\n    case 1:\n      temp = uint8[uint8.length - 1];\n      output += encode(temp >> 2);\n      output += encode((temp << 4) & 0x3f);\n      output += '==';\n      break;\n    case 2:\n      temp = (uint8[uint8.length - 2] << 8) + uint8[uint8.length - 1];\n      output += encode(temp >> 10);\n      output += encode((temp >> 4) & 0x3f);\n      output += encode((temp << 2) & 0x3f);\n      output += '=';\n      break;\n    default:\n      break;\n  }\n\n  return output;\n}\n\n/* istanbul ignore next  */\nfunction b64enc(buf) {\n  return fromByteArray(buf).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}\n\n/* istanbul ignore next  */\nfunction b64RawEnc(buf) {\n  return fromByteArray(buf).replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n\n/* istanbul ignore next  */\nfunction hexEncode(buf) {\n  return Array.from(buf)\n    .map(function (x) {\n      return `0${x.toString(16)}`.substr(-2);\n    })\n    .join('');\n}\n\n/**\n * Transforms the binary data in the credential into base64 strings\n * for posting to the server.\n * @param {PublicKeyCredential} newAssertion\n */\n/* istanbul ignore next  */\nexport const transformNewAssertionForServer = (newAssertion) => {\n  const attObj = new Uint8Array(newAssertion.response.attestationObject);\n  const clientDataJSON = new Uint8Array(newAssertion.response.clientDataJSON);\n  const rawId = new Uint8Array(newAssertion.rawId);\n\n  const registrationClientExtensions = newAssertion.getClientExtensionResults();\n\n  return {\n    id: newAssertion.id,\n    rawId: b64enc(rawId),\n    type: newAssertion.type,\n    attObj: b64enc(attObj),\n    clientData: b64enc(clientDataJSON),\n    registrationClientExtensions: JSON.stringify(registrationClientExtensions),\n  };\n};\n\n/**\n * Encodes the binary data in the assertion into strings for posting to the server.\n * @param {PublicKeyCredential} newAssertion\n */\n/* istanbul ignore next  */\nexport const transformAssertionForServer = (newAssertion) => {\n  const authData = new Uint8Array(newAssertion.response.authenticatorData);\n  const clientDataJSON = new Uint8Array(newAssertion.response.clientDataJSON);\n  const rawId = new Uint8Array(newAssertion.rawId);\n  const sig = new Uint8Array(newAssertion.response.signature);\n  const assertionClientExtensions = newAssertion.getClientExtensionResults();\n\n  return {\n    id: newAssertion.id,\n    rawId: b64enc(rawId),\n    type: newAssertion.type,\n    authData: b64RawEnc(authData),\n    clientData: b64RawEnc(clientDataJSON),\n    signature: hexEncode(sig),\n    assertionClientExtensions: JSON.stringify(assertionClientExtensions),\n  };\n};\n"]},"metadata":{},"sourceType":"module"}