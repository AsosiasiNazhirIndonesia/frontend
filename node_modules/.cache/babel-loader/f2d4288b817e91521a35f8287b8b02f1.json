{"ast":null,"code":"'use strict';\n\nvar BigInteger = require('jsbn').BigInteger;\nvar common = require('./common.js');\nvar sprintf = require('sprintf-js').sprintf;\nvar _ = require('lodash');\nvar constants = require('./v4/constants.js');\n\n/**\r\n * Represents an IPv4 address\r\n * @class Address4\r\n * @param {string} address - An IPv4 address string\r\n */\nfunction Address4(address) {\n  this.valid = false;\n  this.address = address;\n  this.groups = constants.GROUPS;\n  this.v4 = true;\n  this.subnet = '/32';\n  this.subnetMask = 32;\n  var subnet = constants.RE_SUBNET_STRING.exec(address);\n  if (subnet) {\n    this.parsedSubnet = subnet[0].replace('/', '');\n    this.subnetMask = parseInt(this.parsedSubnet, 10);\n    this.subnet = '/' + this.subnetMask;\n    if (this.subnetMask < 0 || this.subnetMask > constants.BITS) {\n      this.valid = false;\n      this.error = 'Invalid subnet mask.';\n      return;\n    }\n    address = address.replace(constants.RE_SUBNET_STRING, '');\n  }\n  this.addressMinusSuffix = address;\n  this.parsedAddress = this.parse(address);\n}\n\n/*\r\n * Parses a v4 address\r\n */\nAddress4.prototype.parse = function (address) {\n  var groups = address.split('.');\n  if (address.match(constants.RE_ADDRESS)) {\n    this.valid = true;\n  } else {\n    this.error = 'Invalid IPv4 address.';\n  }\n  return groups;\n};\n\n/**\r\n * Return true if the address is valid\r\n * @memberof Address4\r\n * @instance\r\n * @returns {Boolean}\r\n */\nAddress4.prototype.isValid = function () {\n  return this.valid;\n};\n\n/**\r\n * Returns the correct form of an address\r\n * @memberof Address4\r\n * @instance\r\n * @returns {String}\r\n */\nAddress4.prototype.correctForm = function () {\n  return this.parsedAddress.map(function (part) {\n    return parseInt(part, 10);\n  }).join('.');\n};\n\n/**\r\n * Returns true if the address is correct, false otherwise\r\n * @memberof Address4\r\n * @instance\r\n * @returns {Boolean}\r\n */\nAddress4.prototype.isCorrect = common.isCorrect(constants.BITS);\n\n/**\r\n * Converts a hex string to an IPv4 address object\r\n * @memberof Address4\r\n * @static\r\n * @param {string} hex - a hex string to convert\r\n * @returns {Address4}\r\n */\nAddress4.fromHex = function (hex) {\n  var padded = _.padStart(hex.replace(/:/g, ''), 8, '0');\n  var groups = [];\n  var i;\n  for (i = 0; i < 8; i += 2) {\n    var h = padded.slice(i, i + 2);\n    groups.push(parseInt(h, 16));\n  }\n  return new Address4(groups.join('.'));\n};\n\n/**\r\n * Converts an integer into a IPv4 address object\r\n * @memberof Address4\r\n * @static\r\n * @param {integer} integer - a number to convert\r\n * @returns {Address4}\r\n */\nAddress4.fromInteger = function (integer) {\n  return Address4.fromHex(integer.toString(16));\n};\n\n/**\r\n * Converts an IPv4 address object to a hex string\r\n * @memberof Address4\r\n * @instance\r\n * @returns {String}\r\n */\nAddress4.prototype.toHex = function () {\n  return this.parsedAddress.map(function (part) {\n    return sprintf('%02x', parseInt(part, 10));\n  }).join(':');\n};\n\n/**\r\n * Converts an IPv4 address object to an array of bytes\r\n * @memberof Address4\r\n * @instance\r\n * @returns {Array}\r\n */\nAddress4.prototype.toArray = function () {\n  return this.parsedAddress.map(function (part) {\n    return parseInt(part, 10);\n  });\n};\n\n/**\r\n * Converts an IPv4 address object to an IPv6 address group\r\n * @memberof Address4\r\n * @instance\r\n * @returns {String}\r\n */\nAddress4.prototype.toGroup6 = function () {\n  var output = [];\n  var i;\n  for (i = 0; i < constants.GROUPS; i += 2) {\n    var hex = sprintf('%02x%02x', parseInt(this.parsedAddress[i], 10), parseInt(this.parsedAddress[i + 1], 10));\n    output.push(sprintf('%x', parseInt(hex, 16)));\n  }\n  return output.join(':');\n};\n\n/**\r\n * Returns the address as a BigInteger\r\n * @memberof Address4\r\n * @instance\r\n * @returns {BigInteger}\r\n */\nAddress4.prototype.bigInteger = function () {\n  if (!this.valid) {\n    return null;\n  }\n  return new BigInteger(this.parsedAddress.map(function (n) {\n    return sprintf('%02x', parseInt(n, 10));\n  }).join(''), 16);\n};\n\n/**\r\n * Helper function getting start address.\r\n * @memberof Address4\r\n * @instance\r\n * @returns {BigInteger}\r\n */\nAddress4.prototype._startAddress = function () {\n  return new BigInteger(this.mask() + _.repeat('0', constants.BITS - this.subnetMask), 2);\n};\n\n/**\r\n * The first address in the range given by this address' subnet.\r\n * Often referred to as the Network Address.\r\n * @memberof Address4\r\n * @instance\r\n * @returns {Address4}\r\n */\nAddress4.prototype.startAddress = function () {\n  return Address4.fromBigInteger(this._startAddress());\n};\n\n/**\r\n * The first host address in the range given by this address's subnet ie\r\n * the first address after the Network Address\r\n * @memberof Address4\r\n * @instance\r\n * @returns {Address4}\r\n */\nAddress4.prototype.startAddressExclusive = function () {\n  var adjust = new BigInteger('1');\n  return Address4.fromBigInteger(this._startAddress().add(adjust));\n};\n\n/**\r\n * Helper function getting end address.\r\n * @memberof Address4\r\n * @instance\r\n * @returns {BigInteger}\r\n */\nAddress4.prototype._endAddress = function () {\n  return new BigInteger(this.mask() + _.repeat('1', constants.BITS - this.subnetMask), 2);\n};\n\n/**\r\n * The last address in the range given by this address' subnet\r\n * Often referred to as the Broadcast\r\n * @memberof Address4\r\n * @instance\r\n * @returns {Address4}\r\n */\nAddress4.prototype.endAddress = function () {\n  return Address4.fromBigInteger(this._endAddress());\n};\n\n/**\r\n * The last host address in the range given by this address's subnet ie\r\n * the last address prior to the Broadcast Address\r\n * @memberof Address4\r\n * @instance\r\n * @returns {Address4}\r\n */\nAddress4.prototype.endAddressExclusive = function () {\n  var adjust = new BigInteger('1');\n  return Address4.fromBigInteger(this._endAddress().subtract(adjust));\n};\n\n/**\r\n * Converts a BigInteger to a v4 address object\r\n * @memberof Address4\r\n * @static\r\n * @param {BigInteger} bigInteger - a BigInteger to convert\r\n * @returns {Address4}\r\n */\nAddress4.fromBigInteger = function (bigInteger) {\n  return Address4.fromInteger(parseInt(bigInteger.toString(), 10));\n};\n\n/**\r\n * Returns the first n bits of the address, defaulting to the\r\n * subnet mask\r\n * @memberof Address4\r\n * @instance\r\n * @returns {String}\r\n */\nAddress4.prototype.mask = function (optionalMask) {\n  if (optionalMask === undefined) {\n    optionalMask = this.subnetMask;\n  }\n  return this.getBitsBase2(0, optionalMask);\n};\n\n/**\r\n * Returns the bits in the given range as a base-2 string\r\n * @memberof Address4\r\n * @instance\r\n * @returns {string}\r\n */\nAddress4.prototype.getBitsBase2 = function (start, end) {\n  return this.binaryZeroPad().slice(start, end);\n};\n\n/**\r\n * Returns true if the given address is in the subnet of the current address\r\n * @memberof Address4\r\n * @instance\r\n * @returns {boolean}\r\n */\nAddress4.prototype.isInSubnet = common.isInSubnet;\n\n/**\r\n * Returns a zero-padded base-2 string representation of the address\r\n * @memberof Address4\r\n * @instance\r\n * @returns {string}\r\n */\nAddress4.prototype.binaryZeroPad = function () {\n  return _.padStart(this.bigInteger().toString(2), constants.BITS, '0');\n};\nmodule.exports = Address4;","map":{"version":3,"names":["BigInteger","require","common","sprintf","_","constants","Address4","address","valid","groups","GROUPS","v4","subnet","subnetMask","RE_SUBNET_STRING","exec","parsedSubnet","replace","parseInt","BITS","error","addressMinusSuffix","parsedAddress","parse","prototype","split","match","RE_ADDRESS","isValid","correctForm","map","part","join","isCorrect","fromHex","hex","padded","padStart","i","h","slice","push","fromInteger","integer","toString","toHex","toArray","toGroup6","output","bigInteger","n","_startAddress","mask","repeat","startAddress","fromBigInteger","startAddressExclusive","adjust","add","_endAddress","endAddress","endAddressExclusive","subtract","optionalMask","undefined","getBitsBase2","start","end","binaryZeroPad","isInSubnet","module","exports"],"sources":["C:/frontend/node_modules/ip-address/lib/ipv4.js"],"sourcesContent":["'use strict';\r\n\r\nvar BigInteger = require('jsbn').BigInteger;\r\nvar common = require('./common.js');\r\nvar sprintf = require('sprintf-js').sprintf;\r\nvar _ = require('lodash');\r\n\r\nvar constants = require('./v4/constants.js');\r\n\r\n/**\r\n * Represents an IPv4 address\r\n * @class Address4\r\n * @param {string} address - An IPv4 address string\r\n */\r\nfunction Address4(address) {\r\n  this.valid = false;\r\n  this.address = address;\r\n  this.groups = constants.GROUPS;\r\n\r\n  this.v4 = true;\r\n\r\n  this.subnet = '/32';\r\n  this.subnetMask = 32;\r\n\r\n  var subnet = constants.RE_SUBNET_STRING.exec(address);\r\n\r\n  if (subnet) {\r\n    this.parsedSubnet = subnet[0].replace('/', '');\r\n    this.subnetMask = parseInt(this.parsedSubnet, 10);\r\n    this.subnet = '/' + this.subnetMask;\r\n\r\n    if (this.subnetMask < 0 || this.subnetMask > constants.BITS) {\r\n      this.valid = false;\r\n      this.error = 'Invalid subnet mask.';\r\n\r\n      return;\r\n    }\r\n\r\n    address = address.replace(constants.RE_SUBNET_STRING, '');\r\n  }\r\n\r\n  this.addressMinusSuffix = address;\r\n\r\n  this.parsedAddress = this.parse(address);\r\n}\r\n\r\n/*\r\n * Parses a v4 address\r\n */\r\nAddress4.prototype.parse = function (address) {\r\n  var groups = address.split('.');\r\n\r\n  if (address.match(constants.RE_ADDRESS)) {\r\n    this.valid = true;\r\n  } else {\r\n    this.error = 'Invalid IPv4 address.';\r\n  }\r\n\r\n  return groups;\r\n};\r\n\r\n/**\r\n * Return true if the address is valid\r\n * @memberof Address4\r\n * @instance\r\n * @returns {Boolean}\r\n */\r\nAddress4.prototype.isValid = function () {\r\n  return this.valid;\r\n};\r\n\r\n/**\r\n * Returns the correct form of an address\r\n * @memberof Address4\r\n * @instance\r\n * @returns {String}\r\n */\r\nAddress4.prototype.correctForm = function () {\r\n  return this.parsedAddress.map(function (part) {\r\n    return parseInt(part, 10);\r\n  }).join('.');\r\n};\r\n\r\n/**\r\n * Returns true if the address is correct, false otherwise\r\n * @memberof Address4\r\n * @instance\r\n * @returns {Boolean}\r\n */\r\nAddress4.prototype.isCorrect = common.isCorrect(constants.BITS);\r\n\r\n/**\r\n * Converts a hex string to an IPv4 address object\r\n * @memberof Address4\r\n * @static\r\n * @param {string} hex - a hex string to convert\r\n * @returns {Address4}\r\n */\r\nAddress4.fromHex = function (hex) {\r\n  var padded = _.padStart(hex.replace(/:/g, ''), 8, '0');\r\n  var groups = [];\r\n  var i;\r\n\r\n  for (i = 0; i < 8; i += 2) {\r\n    var h = padded.slice(i, i + 2);\r\n\r\n    groups.push(parseInt(h, 16));\r\n  }\r\n\r\n  return new Address4(groups.join('.'));\r\n};\r\n\r\n/**\r\n * Converts an integer into a IPv4 address object\r\n * @memberof Address4\r\n * @static\r\n * @param {integer} integer - a number to convert\r\n * @returns {Address4}\r\n */\r\nAddress4.fromInteger = function (integer) {\r\n  return Address4.fromHex(integer.toString(16));\r\n};\r\n\r\n/**\r\n * Converts an IPv4 address object to a hex string\r\n * @memberof Address4\r\n * @instance\r\n * @returns {String}\r\n */\r\nAddress4.prototype.toHex = function () {\r\n  return this.parsedAddress.map(function (part) {\r\n    return sprintf('%02x', parseInt(part, 10));\r\n  }).join(':');\r\n};\r\n\r\n/**\r\n * Converts an IPv4 address object to an array of bytes\r\n * @memberof Address4\r\n * @instance\r\n * @returns {Array}\r\n */\r\nAddress4.prototype.toArray = function () {\r\n  return this.parsedAddress.map(function (part) {\r\n    return parseInt(part, 10);\r\n  });\r\n};\r\n\r\n/**\r\n * Converts an IPv4 address object to an IPv6 address group\r\n * @memberof Address4\r\n * @instance\r\n * @returns {String}\r\n */\r\nAddress4.prototype.toGroup6 = function () {\r\n  var output = [];\r\n  var i;\r\n\r\n  for (i = 0; i < constants.GROUPS; i += 2) {\r\n    var hex = sprintf('%02x%02x',\r\n      parseInt(this.parsedAddress[i], 10),\r\n      parseInt(this.parsedAddress[i + 1], 10));\r\n\r\n    output.push(sprintf('%x', parseInt(hex, 16)));\r\n  }\r\n\r\n  return output.join(':');\r\n};\r\n\r\n/**\r\n * Returns the address as a BigInteger\r\n * @memberof Address4\r\n * @instance\r\n * @returns {BigInteger}\r\n */\r\nAddress4.prototype.bigInteger = function () {\r\n  if (!this.valid) {\r\n    return null;\r\n  }\r\n\r\n  return new BigInteger(this.parsedAddress.map(function (n) {\r\n    return sprintf('%02x', parseInt(n, 10));\r\n  }).join(''), 16);\r\n};\r\n\r\n/**\r\n * Helper function getting start address.\r\n * @memberof Address4\r\n * @instance\r\n * @returns {BigInteger}\r\n */\r\nAddress4.prototype._startAddress = function () {\r\n  return new BigInteger(\r\n    this.mask() + _.repeat('0', constants.BITS - this.subnetMask), 2\r\n  );\r\n};\r\n\r\n/**\r\n * The first address in the range given by this address' subnet.\r\n * Often referred to as the Network Address.\r\n * @memberof Address4\r\n * @instance\r\n * @returns {Address4}\r\n */\r\nAddress4.prototype.startAddress = function () {\r\n  return Address4.fromBigInteger(this._startAddress());\r\n};\r\n\r\n/**\r\n * The first host address in the range given by this address's subnet ie\r\n * the first address after the Network Address\r\n * @memberof Address4\r\n * @instance\r\n * @returns {Address4}\r\n */\r\nAddress4.prototype.startAddressExclusive = function () {\r\n  var adjust = new BigInteger('1');\r\n  return Address4.fromBigInteger(this._startAddress().add(adjust));\r\n};\r\n\r\n/**\r\n * Helper function getting end address.\r\n * @memberof Address4\r\n * @instance\r\n * @returns {BigInteger}\r\n */\r\nAddress4.prototype._endAddress = function () {\r\n  return new BigInteger(\r\n    this.mask() + _.repeat('1', constants.BITS - this.subnetMask), 2\r\n  );\r\n};\r\n\r\n/**\r\n * The last address in the range given by this address' subnet\r\n * Often referred to as the Broadcast\r\n * @memberof Address4\r\n * @instance\r\n * @returns {Address4}\r\n */\r\nAddress4.prototype.endAddress = function () {\r\n  return Address4.fromBigInteger(this._endAddress());\r\n};\r\n\r\n/**\r\n * The last host address in the range given by this address's subnet ie\r\n * the last address prior to the Broadcast Address\r\n * @memberof Address4\r\n * @instance\r\n * @returns {Address4}\r\n */\r\nAddress4.prototype.endAddressExclusive = function () {\r\n  var adjust = new BigInteger('1');\r\n  return Address4.fromBigInteger(this._endAddress().subtract(adjust));\r\n};\r\n\r\n/**\r\n * Converts a BigInteger to a v4 address object\r\n * @memberof Address4\r\n * @static\r\n * @param {BigInteger} bigInteger - a BigInteger to convert\r\n * @returns {Address4}\r\n */\r\nAddress4.fromBigInteger = function (bigInteger) {\r\n  return Address4.fromInteger(parseInt(bigInteger.toString(), 10));\r\n};\r\n\r\n/**\r\n * Returns the first n bits of the address, defaulting to the\r\n * subnet mask\r\n * @memberof Address4\r\n * @instance\r\n * @returns {String}\r\n */\r\nAddress4.prototype.mask = function (optionalMask) {\r\n  if (optionalMask === undefined) {\r\n    optionalMask = this.subnetMask;\r\n  }\r\n\r\n  return this.getBitsBase2(0, optionalMask);\r\n};\r\n\r\n/**\r\n * Returns the bits in the given range as a base-2 string\r\n * @memberof Address4\r\n * @instance\r\n * @returns {string}\r\n */\r\nAddress4.prototype.getBitsBase2 = function (start, end) {\r\n  return this.binaryZeroPad().slice(start, end);\r\n};\r\n\r\n/**\r\n * Returns true if the given address is in the subnet of the current address\r\n * @memberof Address4\r\n * @instance\r\n * @returns {boolean}\r\n */\r\nAddress4.prototype.isInSubnet = common.isInSubnet;\r\n\r\n/**\r\n * Returns a zero-padded base-2 string representation of the address\r\n * @memberof Address4\r\n * @instance\r\n * @returns {string}\r\n */\r\nAddress4.prototype.binaryZeroPad = function () {\r\n  return _.padStart(this.bigInteger().toString(2), constants.BITS, '0');\r\n};\r\n\r\nmodule.exports = Address4;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}