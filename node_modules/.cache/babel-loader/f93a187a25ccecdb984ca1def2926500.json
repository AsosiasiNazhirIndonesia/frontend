{"ast":null,"code":"var _jsxFileName = \"C:\\\\spasi\\\\frontend\\\\src\\\\pages\\\\SignInPage\\\\SignInPage.js\",\n  _s = $RefreshSig$();\nimport { faExclamationCircle, faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport axios from 'axios';\nimport jsConvert from 'js-convert-case';\nimport React from 'react';\nimport { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport SubmitButton from '../../components/elements/SubmitButton/SubmitButton';\nimport { ACTOR, ACTOR_TOKEN } from '../../constants/component.constant';\nimport { setActorType } from '../../modules/actions/actor.action';\nimport API from '../../services/api';\nimport web3 from '../../services/web3';\nimport { history } from '../../store';\nimport './SignInPage.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SignInPage = props => {\n  _s();\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [isFailed, setIsFailed] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('Test');\n\n  // const userLogin = async () => {\n  //     if (!web3) {\n  //         return;\n  //     }\n  //     setIsProcessing(true);\n  //     setIsFailed(false);\n  //     try {\n  //         const accounts = await web3.eth.getAccounts();\n  //         const user = await API.getUserByPublicKey(accounts[0]);\n  //         if (!user) {\n  //             throw 'User with your address not found';\n  //         }\n  //         const message = `DIGICERT${user.login_nonce}`;\n  //         const dataToSign = web3.utils.sha3(message);\n  //         const signature = await web3.eth.personal.sign(dataToSign, accounts[0]);\n  //         const result = await API.userLogin({user_id: user.user_id, signature});\n  //         localStorage.setItem(ACTOR_TOKEN.DIGICERT_USER_TOKEN, result.token);\n  //         props.setActorType(ACTOR.USER);\n  //         history.push('/dashboard/USER');\n  //     } catch (e) {\n  //         setIsFailed(true);\n  //         setErrorMessage(typeof e === 'string' ? e : e.message);\n  //     }\n  //     setIsProcessing(false);\n  // }\n\n  const adminLogin = async () => {\n    if (!web3) {\n      return;\n    }\n    setIsProcessing(true);\n    setIsFailed(false);\n    try {\n      const accounts = await web3.eth.getAccounts();\n      // console.log(accounts[0]);\n      const admin = await API.getAdminByPublicKey(accounts[0]);\n      if (!admin) {\n        throw 'Admin with your address not found';\n      }\n      const message = `DIGICERT${admin.login_nonce}`;\n      const dataToSign = web3.utils.sha3(message);\n      const signature = await web3.eth.personal.sign(dataToSign, accounts[0]);\n      const result = await API.adminLogin({\n        admin_id: admin.admin_id,\n        signature\n      });\n      localStorage.setItem(ACTOR_TOKEN.DIGICERT_ADMIN_TOKEN, result.token);\n      props.setActorType(ACTOR.ADMIN);\n      history.push('/dashboard/ADMIN');\n    } catch (e) {\n      setIsFailed(true);\n      setErrorMessage(typeof e === 'string' ? e : e.message);\n    }\n    setIsProcessing(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"signin\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"signin-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"title\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Make sure you choose the right account on Metamask\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), isFailed ? /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"error-flag\",\n        children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: faExclamationCircle,\n          className: \"error-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 50\n        }, this), errorMessage]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), web3 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button\",\n        children: [/*#__PURE__*/_jsxDEV(SubmitButton, {\n          isProcessing: isProcessing,\n          buttonText: \"Login as Admin\",\n          onClick: () => adminLogin()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(SubmitButton, {\n          isProcessing: isProcessing,\n          buttonText: \"Login as User\",\n          onClick: () => history.push('/userlogin')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        icon: faSpinner,\n        className: \"big-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n_s(SignInPage, \"CjKuyMx9rFp7JPMZsC+gErxm/ew=\");\n_c = SignInPage;\nconst mapDispatchToProps = dispatch => {\n  return {\n    async setActorType(type) {\n      dispatch(setActorType(type));\n    }\n  };\n};\nexport default connect(null, mapDispatchToProps)( /*#__PURE__*/React.memo(SignInPage));\nvar _c;\n$RefreshReg$(_c, \"SignInPage\");","map":{"version":3,"names":["faExclamationCircle","faSpinner","FontAwesomeIcon","axios","jsConvert","React","useEffect","useState","connect","SubmitButton","ACTOR","ACTOR_TOKEN","setActorType","API","web3","history","jsxDEV","_jsxDEV","Fragment","_Fragment","SignInPage","props","_s","isProcessing","setIsProcessing","isFailed","setIsFailed","errorMessage","setErrorMessage","adminLogin","accounts","eth","getAccounts","admin","getAdminByPublicKey","message","login_nonce","dataToSign","utils","sha3","signature","personal","sign","result","admin_id","localStorage","setItem","DIGICERT_ADMIN_TOKEN","token","ADMIN","push","e","className","children","fileName","_jsxFileName","lineNumber","columnNumber","icon","buttonText","onClick","_c","mapDispatchToProps","dispatch","type","memo","$RefreshReg$"],"sources":["C:/spasi/frontend/src/pages/SignInPage/SignInPage.js"],"sourcesContent":["import { faExclamationCircle, faSpinner } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport axios from 'axios';\r\nimport jsConvert from 'js-convert-case';\r\nimport React from 'react';\r\nimport { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport SubmitButton from '../../components/elements/SubmitButton/SubmitButton';\r\nimport { ACTOR, ACTOR_TOKEN } from '../../constants/component.constant';\r\nimport { setActorType } from '../../modules/actions/actor.action';\r\nimport API from '../../services/api';\r\nimport web3 from '../../services/web3';\r\nimport { history } from '../../store';\r\nimport './SignInPage.scss';\r\n\r\nconst SignInPage = (props) => {\r\n    const [isProcessing, setIsProcessing] = useState(false);\r\n    const [isFailed, setIsFailed] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState('Test');\r\n\r\n    // const userLogin = async () => {\r\n    //     if (!web3) {\r\n    //         return;\r\n    //     }\r\n    //     setIsProcessing(true);\r\n    //     setIsFailed(false);\r\n    //     try {\r\n    //         const accounts = await web3.eth.getAccounts();\r\n    //         const user = await API.getUserByPublicKey(accounts[0]);\r\n    //         if (!user) {\r\n    //             throw 'User with your address not found';\r\n    //         }\r\n    //         const message = `DIGICERT${user.login_nonce}`;\r\n    //         const dataToSign = web3.utils.sha3(message);\r\n    //         const signature = await web3.eth.personal.sign(dataToSign, accounts[0]);\r\n    //         const result = await API.userLogin({user_id: user.user_id, signature});\r\n    //         localStorage.setItem(ACTOR_TOKEN.DIGICERT_USER_TOKEN, result.token);\r\n    //         props.setActorType(ACTOR.USER);\r\n    //         history.push('/dashboard/USER');\r\n    //     } catch (e) {\r\n    //         setIsFailed(true);\r\n    //         setErrorMessage(typeof e === 'string' ? e : e.message);\r\n    //     }\r\n    //     setIsProcessing(false);\r\n    // }\r\n\r\n    const adminLogin = async () => {\r\n        if (!web3) {\r\n            return;\r\n        }\r\n        setIsProcessing(true);\r\n        setIsFailed(false);\r\n        try {\r\n            const accounts = await web3.eth.getAccounts();\r\n            // console.log(accounts[0]);\r\n            const admin = await API.getAdminByPublicKey(accounts[0]);\r\n            if (!admin) {\r\n                throw 'Admin with your address not found';\r\n            }\r\n            const message = `DIGICERT${admin.login_nonce}`;\r\n            const dataToSign = web3.utils.sha3(message);\r\n            const signature = await web3.eth.personal.sign(dataToSign, accounts[0]);\r\n            const result = await API.adminLogin({admin_id: admin.admin_id, signature});\r\n            localStorage.setItem(ACTOR_TOKEN.DIGICERT_ADMIN_TOKEN, result.token);\r\n            props.setActorType(ACTOR.ADMIN);\r\n            history.push('/dashboard/ADMIN');\r\n        } catch (e) {\r\n            setIsFailed(true);\r\n            setErrorMessage(typeof e === 'string' ? e : e.message);\r\n        }\r\n        setIsProcessing(false);\r\n    }\r\n\r\n    return (\r\n        <div className=\"signin\">\r\n            <div className=\"signin-form\">\r\n                <div className=\"title\">\r\n                    <h2>Login</h2>\r\n                    <hr></hr>\r\n                    <h5>Make sure you choose the right account on Metamask</h5>\r\n                </div>\r\n                {isFailed ? \r\n                    <span className=\"error-flag\"><FontAwesomeIcon icon={faExclamationCircle} className=\"error-icon\"/>{errorMessage}</span> : <></>}\r\n                {web3 ?\r\n                    <div className=\"button\">\r\n                        <SubmitButton isProcessing={isProcessing} buttonText={\"Login as Admin\"} onClick={() => adminLogin()}/>\r\n                        <SubmitButton isProcessing={isProcessing} buttonText={\"Login as User\"} onClick={() => history.push('/userlogin')}/>\r\n                    </div> : <FontAwesomeIcon icon={faSpinner} className=\"big-spinner\"></FontAwesomeIcon>}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        async setActorType(type) {\r\n            dispatch(setActorType(type));\r\n        }\r\n    }\r\n};\r\n  \r\nexport default connect(null, mapDispatchToProps)(React.memo(SignInPage));"],"mappings":"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"},"metadata":{},"sourceType":"module"}