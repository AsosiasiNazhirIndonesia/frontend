{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getLength = exports.decode = exports.encode = void 0;\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\n/**\r\n * RLP Encoding based on: https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP\r\n * This function takes in a data, convert it to buffer if not, and a length for recursion\r\n * @param input - will be converted to buffer\r\n * @returns returns buffer of encoded data\r\n **/\nfunction encode(input) {\n  if (Array.isArray(input)) {\n    var output = [];\n    for (var i = 0; i < input.length; i++) {\n      output.push(encode(input[i]));\n    }\n    var buf = Buffer.concat(output);\n    return Buffer.concat([encodeLength(buf.length, 192), buf]);\n  } else {\n    var inputBuf = toBuffer(input);\n    return inputBuf.length === 1 && inputBuf[0] < 128 ? inputBuf : Buffer.concat([encodeLength(inputBuf.length, 128), inputBuf]);\n  }\n}\nexports.encode = encode;\n/**\r\n * Parse integers. Check if there is no leading zeros\r\n * @param v The value to parse\r\n * @param base The base to parse the integer into\r\n */\nfunction safeParseInt(v, base) {\n  if (v[0] === '0' && v[1] === '0') {\n    throw new Error('invalid RLP: extra zeros');\n  }\n  return parseInt(v, base);\n}\nfunction encodeLength(len, offset) {\n  if (len < 56) {\n    return Buffer.from([len + offset]);\n  } else {\n    var hexLength = intToHex(len);\n    var lLength = hexLength.length / 2;\n    var firstByte = intToHex(offset + 55 + lLength);\n    return Buffer.from(firstByte + hexLength, 'hex');\n  }\n}\nfunction decode(input, stream) {\n  if (stream === void 0) {\n    stream = false;\n  }\n  if (!input || input.length === 0) {\n    return Buffer.from([]);\n  }\n  var inputBuffer = toBuffer(input);\n  var decoded = _decode(inputBuffer);\n  if (stream) {\n    return decoded;\n  }\n  if (decoded.remainder.length !== 0) {\n    throw new Error('invalid remainder');\n  }\n  return decoded.data;\n}\nexports.decode = decode;\n/**\r\n * Get the length of the RLP input\r\n * @param input\r\n * @returns The length of the input or an empty Buffer if no input\r\n */\nfunction getLength(input) {\n  if (!input || input.length === 0) {\n    return Buffer.from([]);\n  }\n  var inputBuffer = toBuffer(input);\n  var firstByte = inputBuffer[0];\n  if (firstByte <= 0x7f) {\n    return inputBuffer.length;\n  } else if (firstByte <= 0xb7) {\n    return firstByte - 0x7f;\n  } else if (firstByte <= 0xbf) {\n    return firstByte - 0xb6;\n  } else if (firstByte <= 0xf7) {\n    // a list between  0-55 bytes long\n    return firstByte - 0xbf;\n  } else {\n    // a list  over 55 bytes long\n    var llength = firstByte - 0xf6;\n    var length_1 = safeParseInt(inputBuffer.slice(1, llength).toString('hex'), 16);\n    return llength + length_1;\n  }\n}\nexports.getLength = getLength;\n/** Decode an input with RLP */\nfunction _decode(input) {\n  var length, llength, data, innerRemainder, d;\n  var decoded = [];\n  var firstByte = input[0];\n  if (firstByte <= 0x7f) {\n    // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\n    return {\n      data: input.slice(0, 1),\n      remainder: input.slice(1)\n    };\n  } else if (firstByte <= 0xb7) {\n    // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string\n    // The range of the first byte is [0x80, 0xb7]\n    length = firstByte - 0x7f;\n    // set 0x80 null to 0\n    if (firstByte === 0x80) {\n      data = Buffer.from([]);\n    } else {\n      data = input.slice(1, length);\n    }\n    if (length === 2 && data[0] < 0x80) {\n      throw new Error('invalid rlp encoding: byte must be less 0x80');\n    }\n    return {\n      data: data,\n      remainder: input.slice(length)\n    };\n  } else if (firstByte <= 0xbf) {\n    // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),\n    // followed by the length, followed by the string\n    llength = firstByte - 0xb6;\n    if (input.length - 1 < llength) {\n      throw new Error('invalid RLP: not enough bytes for string length');\n    }\n    length = safeParseInt(input.slice(1, llength).toString('hex'), 16);\n    if (length <= 55) {\n      throw new Error('invalid RLP: expected string length to be greater than 55');\n    }\n    data = input.slice(llength, length + llength);\n    if (data.length < length) {\n      throw new Error('invalid RLP: not enough bytes for string');\n    }\n    return {\n      data: data,\n      remainder: input.slice(length + llength)\n    };\n  } else if (firstByte <= 0xf7) {\n    // a list between  0-55 bytes long\n    length = firstByte - 0xbf;\n    innerRemainder = input.slice(1, length);\n    while (innerRemainder.length) {\n      d = _decode(innerRemainder);\n      decoded.push(d.data);\n      innerRemainder = d.remainder;\n    }\n    return {\n      data: decoded,\n      remainder: input.slice(length)\n    };\n  } else {\n    // a list  over 55 bytes long\n    llength = firstByte - 0xf6;\n    length = safeParseInt(input.slice(1, llength).toString('hex'), 16);\n    var totalLength = llength + length;\n    if (totalLength > input.length) {\n      throw new Error('invalid rlp: total length is larger than the data');\n    }\n    innerRemainder = input.slice(llength, totalLength);\n    if (innerRemainder.length === 0) {\n      throw new Error('invalid rlp, List has a invalid length');\n    }\n    while (innerRemainder.length) {\n      d = _decode(innerRemainder);\n      decoded.push(d.data);\n      innerRemainder = d.remainder;\n    }\n    return {\n      data: decoded,\n      remainder: input.slice(totalLength)\n    };\n  }\n}\n/** Check if a string is prefixed by 0x */\nfunction isHexPrefixed(str) {\n  return str.slice(0, 2) === '0x';\n}\n/** Removes 0x from a given String */\nfunction stripHexPrefix(str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n  return isHexPrefixed(str) ? str.slice(2) : str;\n}\n/** Transform an integer into its hexadecimal value */\nfunction intToHex(integer) {\n  if (integer < 0) {\n    throw new Error('Invalid integer as argument, must be unsigned!');\n  }\n  var hex = integer.toString(16);\n  return hex.length % 2 ? \"0\" + hex : hex;\n}\n/** Pad a string to be even */\nfunction padToEven(a) {\n  return a.length % 2 ? \"0\" + a : a;\n}\n/** Transform an integer into a Buffer */\nfunction intToBuffer(integer) {\n  var hex = intToHex(integer);\n  return Buffer.from(hex, 'hex');\n}\n/** Transform anything into a Buffer */\nfunction toBuffer(v) {\n  if (!Buffer.isBuffer(v)) {\n    if (typeof v === 'string') {\n      if (isHexPrefixed(v)) {\n        return Buffer.from(padToEven(stripHexPrefix(v)), 'hex');\n      } else {\n        return Buffer.from(v);\n      }\n    } else if (typeof v === 'number' || typeof v === 'bigint') {\n      if (!v) {\n        return Buffer.from([]);\n      } else {\n        return intToBuffer(v);\n      }\n    } else if (v === null || v === undefined) {\n      return Buffer.from([]);\n    } else if (v instanceof Uint8Array) {\n      return Buffer.from(v);\n    } else if (bn_js_1.default.isBN(v)) {\n      // converts a BN to a Buffer\n      return Buffer.from(v.toArray());\n    } else {\n      throw new Error('invalid type');\n    }\n  }\n  return v;\n}","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.getLength = exports.decode = exports.encode = void 0;\r\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\r\n/**\r\n * RLP Encoding based on: https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP\r\n * This function takes in a data, convert it to buffer if not, and a length for recursion\r\n * @param input - will be converted to buffer\r\n * @returns returns buffer of encoded data\r\n **/\r\nfunction encode(input) {\r\n    if (Array.isArray(input)) {\r\n        var output = [];\r\n        for (var i = 0; i < input.length; i++) {\r\n            output.push(encode(input[i]));\r\n        }\r\n        var buf = Buffer.concat(output);\r\n        return Buffer.concat([encodeLength(buf.length, 192), buf]);\r\n    }\r\n    else {\r\n        var inputBuf = toBuffer(input);\r\n        return inputBuf.length === 1 && inputBuf[0] < 128\r\n            ? inputBuf\r\n            : Buffer.concat([encodeLength(inputBuf.length, 128), inputBuf]);\r\n    }\r\n}\r\nexports.encode = encode;\r\n/**\r\n * Parse integers. Check if there is no leading zeros\r\n * @param v The value to parse\r\n * @param base The base to parse the integer into\r\n */\r\nfunction safeParseInt(v, base) {\r\n    if (v[0] === '0' && v[1] === '0') {\r\n        throw new Error('invalid RLP: extra zeros');\r\n    }\r\n    return parseInt(v, base);\r\n}\r\nfunction encodeLength(len, offset) {\r\n    if (len < 56) {\r\n        return Buffer.from([len + offset]);\r\n    }\r\n    else {\r\n        var hexLength = intToHex(len);\r\n        var lLength = hexLength.length / 2;\r\n        var firstByte = intToHex(offset + 55 + lLength);\r\n        return Buffer.from(firstByte + hexLength, 'hex');\r\n    }\r\n}\r\nfunction decode(input, stream) {\r\n    if (stream === void 0) { stream = false; }\r\n    if (!input || input.length === 0) {\r\n        return Buffer.from([]);\r\n    }\r\n    var inputBuffer = toBuffer(input);\r\n    var decoded = _decode(inputBuffer);\r\n    if (stream) {\r\n        return decoded;\r\n    }\r\n    if (decoded.remainder.length !== 0) {\r\n        throw new Error('invalid remainder');\r\n    }\r\n    return decoded.data;\r\n}\r\nexports.decode = decode;\r\n/**\r\n * Get the length of the RLP input\r\n * @param input\r\n * @returns The length of the input or an empty Buffer if no input\r\n */\r\nfunction getLength(input) {\r\n    if (!input || input.length === 0) {\r\n        return Buffer.from([]);\r\n    }\r\n    var inputBuffer = toBuffer(input);\r\n    var firstByte = inputBuffer[0];\r\n    if (firstByte <= 0x7f) {\r\n        return inputBuffer.length;\r\n    }\r\n    else if (firstByte <= 0xb7) {\r\n        return firstByte - 0x7f;\r\n    }\r\n    else if (firstByte <= 0xbf) {\r\n        return firstByte - 0xb6;\r\n    }\r\n    else if (firstByte <= 0xf7) {\r\n        // a list between  0-55 bytes long\r\n        return firstByte - 0xbf;\r\n    }\r\n    else {\r\n        // a list  over 55 bytes long\r\n        var llength = firstByte - 0xf6;\r\n        var length_1 = safeParseInt(inputBuffer.slice(1, llength).toString('hex'), 16);\r\n        return llength + length_1;\r\n    }\r\n}\r\nexports.getLength = getLength;\r\n/** Decode an input with RLP */\r\nfunction _decode(input) {\r\n    var length, llength, data, innerRemainder, d;\r\n    var decoded = [];\r\n    var firstByte = input[0];\r\n    if (firstByte <= 0x7f) {\r\n        // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\r\n        return {\r\n            data: input.slice(0, 1),\r\n            remainder: input.slice(1),\r\n        };\r\n    }\r\n    else if (firstByte <= 0xb7) {\r\n        // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string\r\n        // The range of the first byte is [0x80, 0xb7]\r\n        length = firstByte - 0x7f;\r\n        // set 0x80 null to 0\r\n        if (firstByte === 0x80) {\r\n            data = Buffer.from([]);\r\n        }\r\n        else {\r\n            data = input.slice(1, length);\r\n        }\r\n        if (length === 2 && data[0] < 0x80) {\r\n            throw new Error('invalid rlp encoding: byte must be less 0x80');\r\n        }\r\n        return {\r\n            data: data,\r\n            remainder: input.slice(length),\r\n        };\r\n    }\r\n    else if (firstByte <= 0xbf) {\r\n        // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),\r\n        // followed by the length, followed by the string\r\n        llength = firstByte - 0xb6;\r\n        if (input.length - 1 < llength) {\r\n            throw new Error('invalid RLP: not enough bytes for string length');\r\n        }\r\n        length = safeParseInt(input.slice(1, llength).toString('hex'), 16);\r\n        if (length <= 55) {\r\n            throw new Error('invalid RLP: expected string length to be greater than 55');\r\n        }\r\n        data = input.slice(llength, length + llength);\r\n        if (data.length < length) {\r\n            throw new Error('invalid RLP: not enough bytes for string');\r\n        }\r\n        return {\r\n            data: data,\r\n            remainder: input.slice(length + llength),\r\n        };\r\n    }\r\n    else if (firstByte <= 0xf7) {\r\n        // a list between  0-55 bytes long\r\n        length = firstByte - 0xbf;\r\n        innerRemainder = input.slice(1, length);\r\n        while (innerRemainder.length) {\r\n            d = _decode(innerRemainder);\r\n            decoded.push(d.data);\r\n            innerRemainder = d.remainder;\r\n        }\r\n        return {\r\n            data: decoded,\r\n            remainder: input.slice(length),\r\n        };\r\n    }\r\n    else {\r\n        // a list  over 55 bytes long\r\n        llength = firstByte - 0xf6;\r\n        length = safeParseInt(input.slice(1, llength).toString('hex'), 16);\r\n        var totalLength = llength + length;\r\n        if (totalLength > input.length) {\r\n            throw new Error('invalid rlp: total length is larger than the data');\r\n        }\r\n        innerRemainder = input.slice(llength, totalLength);\r\n        if (innerRemainder.length === 0) {\r\n            throw new Error('invalid rlp, List has a invalid length');\r\n        }\r\n        while (innerRemainder.length) {\r\n            d = _decode(innerRemainder);\r\n            decoded.push(d.data);\r\n            innerRemainder = d.remainder;\r\n        }\r\n        return {\r\n            data: decoded,\r\n            remainder: input.slice(totalLength),\r\n        };\r\n    }\r\n}\r\n/** Check if a string is prefixed by 0x */\r\nfunction isHexPrefixed(str) {\r\n    return str.slice(0, 2) === '0x';\r\n}\r\n/** Removes 0x from a given String */\r\nfunction stripHexPrefix(str) {\r\n    if (typeof str !== 'string') {\r\n        return str;\r\n    }\r\n    return isHexPrefixed(str) ? str.slice(2) : str;\r\n}\r\n/** Transform an integer into its hexadecimal value */\r\nfunction intToHex(integer) {\r\n    if (integer < 0) {\r\n        throw new Error('Invalid integer as argument, must be unsigned!');\r\n    }\r\n    var hex = integer.toString(16);\r\n    return hex.length % 2 ? \"0\" + hex : hex;\r\n}\r\n/** Pad a string to be even */\r\nfunction padToEven(a) {\r\n    return a.length % 2 ? \"0\" + a : a;\r\n}\r\n/** Transform an integer into a Buffer */\r\nfunction intToBuffer(integer) {\r\n    var hex = intToHex(integer);\r\n    return Buffer.from(hex, 'hex');\r\n}\r\n/** Transform anything into a Buffer */\r\nfunction toBuffer(v) {\r\n    if (!Buffer.isBuffer(v)) {\r\n        if (typeof v === 'string') {\r\n            if (isHexPrefixed(v)) {\r\n                return Buffer.from(padToEven(stripHexPrefix(v)), 'hex');\r\n            }\r\n            else {\r\n                return Buffer.from(v);\r\n            }\r\n        }\r\n        else if (typeof v === 'number' || typeof v === 'bigint') {\r\n            if (!v) {\r\n                return Buffer.from([]);\r\n            }\r\n            else {\r\n                return intToBuffer(v);\r\n            }\r\n        }\r\n        else if (v === null || v === undefined) {\r\n            return Buffer.from([]);\r\n        }\r\n        else if (v instanceof Uint8Array) {\r\n            return Buffer.from(v);\r\n        }\r\n        else if (bn_js_1.default.isBN(v)) {\r\n            // converts a BN to a Buffer\r\n            return Buffer.from(v.toArray());\r\n        }\r\n        else {\r\n            throw new Error('invalid type');\r\n        }\r\n    }\r\n    return v;\r\n}\r\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}