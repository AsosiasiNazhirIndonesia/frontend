{"ast":null,"code":"'use strict';\n\nvar sprintf = require('sprintf-js').sprintf;\nvar v6 = require('./constants.js');\nfunction groupPossibilities(possibilities) {\n  return sprintf('(%s)', possibilities.join('|'));\n}\nfunction padGroup(group) {\n  if (group.length < 4) {\n    return sprintf('0{0,%d}%s', 4 - group.length, group);\n  }\n  return group;\n}\nfunction simpleRegularExpression(groups) {\n  var zeroIndexes = [];\n  groups.forEach(function (group, i) {\n    var groupInteger = parseInt(group, 16);\n    if (groupInteger === 0) {\n      zeroIndexes.push(i);\n    }\n  });\n\n  // You can technically elide a single 0, this creates the regular expressions\n  // to match that eventuality\n  var possibilities = zeroIndexes.map(function (zeroIndex) {\n    return groups.map(function (group, i) {\n      if (i === zeroIndex) {\n        var elision = i === 0 || i === v6.GROUPS - 1 ? ':' : '';\n        return groupPossibilities([padGroup(group), elision]);\n      }\n      return padGroup(group);\n    }).join(':');\n  });\n\n  // The simplest case\n  possibilities.push(groups.map(padGroup).join(':'));\n  return groupPossibilities(possibilities);\n}\nfunction possibleElisions(elidedGroups, moreLeft, moreRight) {\n  var left = moreLeft ? '' : ':';\n  var right = moreRight ? '' : ':';\n  var possibilities = [];\n\n  // 1. elision of everything (::)\n  if (!moreLeft && !moreRight) {\n    possibilities.push('::');\n  }\n\n  // 2. complete elision of the middle\n  if (moreLeft && moreRight) {\n    possibilities.push('');\n  }\n  if (moreRight && !moreLeft || !moreRight && moreLeft) {\n    // 3. complete elision of one side\n    possibilities.push(':');\n  }\n\n  // 4. elision from the left side\n  possibilities.push(sprintf('%s(:0{1,4}){1,%d}', left, elidedGroups - 1));\n\n  // 5. elision from the right side\n  possibilities.push(sprintf('(0{1,4}:){1,%d}%s', elidedGroups - 1, right));\n\n  // 6. no elision\n  possibilities.push(sprintf('(0{1,4}:){%d}0{1,4}', elidedGroups - 1));\n\n  // 7. elision (including sloppy elision) from the middle\n  for (var groups = 1; groups < elidedGroups - 1; groups++) {\n    for (var position = 1; position < elidedGroups - groups; position++) {\n      possibilities.push(sprintf('(0{1,4}:){%d}:(0{1,4}:){%d}0{1,4}', position, elidedGroups - position - groups - 1));\n    }\n  }\n  return groupPossibilities(possibilities);\n}\n\n/**\r\n * Generate a regular expression string that can be used to find or validate\r\n * all variations of this address\r\n * @memberof Address6\r\n * @instance\r\n * @param {string} optionalSubString\r\n * @returns {string}\r\n */\nexports.regularExpressionString = function (optionalSubString) {\n  if (optionalSubString === undefined) {\n    optionalSubString = false;\n  }\n  var output = [];\n\n  // TODO: revisit why this is necessary\n  var address6 = new this.constructor(this.correctForm());\n  if (address6.elidedGroups === 0) {\n    // The simple case\n    output.push(simpleRegularExpression(address6.parsedAddress));\n  } else if (address6.elidedGroups === v6.GROUPS) {\n    // A completely elided address\n    output.push(possibleElisions(v6.GROUPS));\n  } else {\n    // A partially elided address\n    var halves = address6.address.split('::');\n    if (halves[0].length) {\n      output.push(simpleRegularExpression(halves[0].split(':')));\n    }\n    output.push(possibleElisions(address6.elidedGroups, halves[0].length !== 0, halves[1].length !== 0));\n    if (halves[1].length) {\n      output.push(simpleRegularExpression(halves[1].split(':')));\n    }\n    output = [output.join(':')];\n  }\n  if (!optionalSubString) {\n    output = [].concat('(?=^|\\\\b|[^\\\\w\\\\:])(', output, ')(?=[^\\\\w\\\\:]|\\\\b|$)');\n  }\n  return output.join('');\n};\n\n/**\r\n * Generate a regular expression that can be used to find or validate all\r\n * variations of this address.\r\n * @memberof Address6\r\n * @instance\r\n * @param {string} optionalSubString\r\n * @returns {RegExp}\r\n */\nexports.regularExpression = function (optionalSubstring) {\n  return new RegExp(this.regularExpressionString(optionalSubstring), 'i');\n};","map":{"version":3,"names":["sprintf","require","v6","groupPossibilities","possibilities","join","padGroup","group","length","simpleRegularExpression","groups","zeroIndexes","forEach","i","groupInteger","parseInt","push","map","zeroIndex","elision","GROUPS","possibleElisions","elidedGroups","moreLeft","moreRight","left","right","position","exports","regularExpressionString","optionalSubString","undefined","output","address6","constructor","correctForm","parsedAddress","halves","address","split","concat","regularExpression","optionalSubstring","RegExp"],"sources":["C:/spasi/frontend/node_modules/ip-address/lib/v6/regular-expressions.js"],"sourcesContent":["'use strict';\r\n\r\nvar sprintf = require('sprintf-js').sprintf;\r\n\r\nvar v6 = require('./constants.js');\r\n\r\nfunction groupPossibilities(possibilities) {\r\n  return sprintf('(%s)', possibilities.join('|'));\r\n}\r\n\r\nfunction padGroup(group) {\r\n  if (group.length < 4) {\r\n    return sprintf('0{0,%d}%s', 4 - group.length, group);\r\n  }\r\n\r\n  return group;\r\n}\r\n\r\nfunction simpleRegularExpression(groups) {\r\n  var zeroIndexes = [];\r\n\r\n  groups.forEach(function (group, i) {\r\n    var groupInteger = parseInt(group, 16);\r\n\r\n    if (groupInteger === 0) {\r\n      zeroIndexes.push(i);\r\n    }\r\n  });\r\n\r\n  // You can technically elide a single 0, this creates the regular expressions\r\n  // to match that eventuality\r\n  var possibilities = zeroIndexes.map(function (zeroIndex) {\r\n    return groups.map(function (group, i) {\r\n      if (i === zeroIndex) {\r\n        var elision = (i === 0 || i === v6.GROUPS - 1) ? ':' : '';\r\n\r\n        return groupPossibilities([padGroup(group), elision]);\r\n      }\r\n\r\n      return padGroup(group);\r\n    }).join(':');\r\n  });\r\n\r\n  // The simplest case\r\n  possibilities.push(groups.map(padGroup).join(':'));\r\n\r\n  return groupPossibilities(possibilities);\r\n}\r\n\r\nfunction possibleElisions(elidedGroups, moreLeft, moreRight) {\r\n  var left = moreLeft ? '' : ':';\r\n  var right = moreRight ? '' : ':';\r\n\r\n  var possibilities = [];\r\n\r\n  // 1. elision of everything (::)\r\n  if (!moreLeft && !moreRight) {\r\n    possibilities.push('::');\r\n  }\r\n\r\n  // 2. complete elision of the middle\r\n  if (moreLeft && moreRight) {\r\n    possibilities.push('');\r\n  }\r\n\r\n  if ((moreRight && !moreLeft) || (!moreRight && moreLeft)) {\r\n    // 3. complete elision of one side\r\n    possibilities.push(':');\r\n  }\r\n\r\n  // 4. elision from the left side\r\n  possibilities.push(sprintf('%s(:0{1,4}){1,%d}', left, elidedGroups - 1));\r\n\r\n  // 5. elision from the right side\r\n  possibilities.push(sprintf('(0{1,4}:){1,%d}%s', elidedGroups - 1, right));\r\n\r\n  // 6. no elision\r\n  possibilities.push(sprintf('(0{1,4}:){%d}0{1,4}', elidedGroups - 1));\r\n\r\n  // 7. elision (including sloppy elision) from the middle\r\n  for (var groups = 1; groups < elidedGroups - 1; groups++) {\r\n    for (var position = 1; position < elidedGroups - groups; position++) {\r\n      possibilities.push(sprintf('(0{1,4}:){%d}:(0{1,4}:){%d}0{1,4}',\r\n                                 position,\r\n                                 elidedGroups - position - groups - 1));\r\n    }\r\n  }\r\n\r\n  return groupPossibilities(possibilities);\r\n}\r\n\r\n/**\r\n * Generate a regular expression string that can be used to find or validate\r\n * all variations of this address\r\n * @memberof Address6\r\n * @instance\r\n * @param {string} optionalSubString\r\n * @returns {string}\r\n */\r\nexports.regularExpressionString = function (optionalSubString) {\r\n  if (optionalSubString === undefined) {\r\n    optionalSubString = false;\r\n  }\r\n\r\n  var output = [];\r\n\r\n  // TODO: revisit why this is necessary\r\n  var address6 = new this.constructor(this.correctForm());\r\n\r\n  if (address6.elidedGroups === 0) {\r\n    // The simple case\r\n    output.push(simpleRegularExpression(address6.parsedAddress));\r\n  } else if (address6.elidedGroups === v6.GROUPS) {\r\n    // A completely elided address\r\n    output.push(possibleElisions(v6.GROUPS));\r\n  } else {\r\n    // A partially elided address\r\n    var halves = address6.address.split('::');\r\n\r\n    if (halves[0].length) {\r\n      output.push(simpleRegularExpression(halves[0].split(':')));\r\n    }\r\n\r\n    output.push(possibleElisions(address6.elidedGroups,\r\n                         halves[0].length !== 0,\r\n                         halves[1].length !== 0));\r\n\r\n    if (halves[1].length) {\r\n      output.push(simpleRegularExpression(halves[1].split(':')));\r\n    }\r\n\r\n    output = [output.join(':')];\r\n  }\r\n\r\n  if (!optionalSubString) {\r\n    output = [].concat('(?=^|\\\\b|[^\\\\w\\\\:])(', output, ')(?=[^\\\\w\\\\:]|\\\\b|$)');\r\n  }\r\n\r\n  return output.join('');\r\n};\r\n\r\n/**\r\n * Generate a regular expression that can be used to find or validate all\r\n * variations of this address.\r\n * @memberof Address6\r\n * @instance\r\n * @param {string} optionalSubString\r\n * @returns {RegExp}\r\n */\r\nexports.regularExpression = function (optionalSubstring) {\r\n  return new RegExp(this.regularExpressionString(optionalSubstring), 'i');\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}