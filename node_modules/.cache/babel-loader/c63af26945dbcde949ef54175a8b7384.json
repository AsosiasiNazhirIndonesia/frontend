{"ast":null,"code":"var Transform = require('readable-stream').Transform,\n  inherits = require('util').inherits,\n  xtend = require('xtend');\nfunction DestroyableTransform(opts) {\n  Transform.call(this, opts);\n  this._destroyed = false;\n}\ninherits(DestroyableTransform, Transform);\nDestroyableTransform.prototype.destroy = function (err) {\n  if (this._destroyed) return;\n  this._destroyed = true;\n  var self = this;\n  process.nextTick(function () {\n    if (err) self.emit('error', err);\n    self.emit('close');\n  });\n};\n\n// a noop _transform function\nfunction noop(chunk, enc, callback) {\n  callback(null, chunk);\n}\n\n// create a new export function, used by both the main export and\n// the .ctor export, contains common logic for dealing with arguments\nfunction through2(construct) {\n  return function (options, transform, flush) {\n    if (typeof options == 'function') {\n      flush = transform;\n      transform = options;\n      options = {};\n    }\n    if (typeof transform != 'function') transform = noop;\n    if (typeof flush != 'function') flush = null;\n    return construct(options, transform, flush);\n  };\n}\n\n// main export, just make me a transform stream!\nmodule.exports = through2(function (options, transform, flush) {\n  var t2 = new DestroyableTransform(options);\n  t2._transform = transform;\n  if (flush) t2._flush = flush;\n  return t2;\n});\n\n// make me a reusable prototype that I can `new`, or implicitly `new`\n// with a constructor call\nmodule.exports.ctor = through2(function (options, transform, flush) {\n  function Through2(override) {\n    if (!(this instanceof Through2)) return new Through2(override);\n    this.options = xtend(options, override);\n    DestroyableTransform.call(this, this.options);\n  }\n  inherits(Through2, DestroyableTransform);\n  Through2.prototype._transform = transform;\n  if (flush) Through2.prototype._flush = flush;\n  return Through2;\n});\nmodule.exports.obj = through2(function (options, transform, flush) {\n  var t2 = new DestroyableTransform(xtend({\n    objectMode: true,\n    highWaterMark: 16\n  }, options));\n  t2._transform = transform;\n  if (flush) t2._flush = flush;\n  return t2;\n});","map":{"version":3,"names":["Transform","require","inherits","xtend","DestroyableTransform","opts","call","_destroyed","prototype","destroy","err","self","process","nextTick","emit","noop","chunk","enc","callback","through2","construct","options","transform","flush","module","exports","t2","_transform","_flush","ctor","Through2","override","obj","objectMode","highWaterMark"],"sources":["C:/frontend/node_modules/through2/through2.js"],"sourcesContent":["var Transform = require('readable-stream').Transform\r\n  , inherits  = require('util').inherits\r\n  , xtend     = require('xtend')\r\n\r\nfunction DestroyableTransform(opts) {\r\n  Transform.call(this, opts)\r\n  this._destroyed = false\r\n}\r\n\r\ninherits(DestroyableTransform, Transform)\r\n\r\nDestroyableTransform.prototype.destroy = function(err) {\r\n  if (this._destroyed) return\r\n  this._destroyed = true\r\n  \r\n  var self = this\r\n  process.nextTick(function() {\r\n    if (err)\r\n      self.emit('error', err)\r\n    self.emit('close')\r\n  })\r\n}\r\n\r\n// a noop _transform function\r\nfunction noop (chunk, enc, callback) {\r\n  callback(null, chunk)\r\n}\r\n\r\n\r\n// create a new export function, used by both the main export and\r\n// the .ctor export, contains common logic for dealing with arguments\r\nfunction through2 (construct) {\r\n  return function (options, transform, flush) {\r\n    if (typeof options == 'function') {\r\n      flush     = transform\r\n      transform = options\r\n      options   = {}\r\n    }\r\n\r\n    if (typeof transform != 'function')\r\n      transform = noop\r\n\r\n    if (typeof flush != 'function')\r\n      flush = null\r\n\r\n    return construct(options, transform, flush)\r\n  }\r\n}\r\n\r\n\r\n// main export, just make me a transform stream!\r\nmodule.exports = through2(function (options, transform, flush) {\r\n  var t2 = new DestroyableTransform(options)\r\n\r\n  t2._transform = transform\r\n\r\n  if (flush)\r\n    t2._flush = flush\r\n\r\n  return t2\r\n})\r\n\r\n\r\n// make me a reusable prototype that I can `new`, or implicitly `new`\r\n// with a constructor call\r\nmodule.exports.ctor = through2(function (options, transform, flush) {\r\n  function Through2 (override) {\r\n    if (!(this instanceof Through2))\r\n      return new Through2(override)\r\n\r\n    this.options = xtend(options, override)\r\n\r\n    DestroyableTransform.call(this, this.options)\r\n  }\r\n\r\n  inherits(Through2, DestroyableTransform)\r\n\r\n  Through2.prototype._transform = transform\r\n\r\n  if (flush)\r\n    Through2.prototype._flush = flush\r\n\r\n  return Through2\r\n})\r\n\r\n\r\nmodule.exports.obj = through2(function (options, transform, flush) {\r\n  var t2 = new DestroyableTransform(xtend({ objectMode: true, highWaterMark: 16 }, options))\r\n\r\n  t2._transform = transform\r\n\r\n  if (flush)\r\n    t2._flush = flush\r\n\r\n  return t2\r\n})\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}