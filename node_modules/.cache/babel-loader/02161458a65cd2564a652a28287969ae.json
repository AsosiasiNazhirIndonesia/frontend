{"ast":null,"code":"\"use strict\";\n\nimport { Coder } from \"./abstract-coder\";\nimport { pack, unpack } from \"./array\";\nexport class TupleCoder extends Coder {\n  constructor(coders, localName) {\n    let dynamic = false;\n    const types = [];\n    coders.forEach(coder => {\n      if (coder.dynamic) {\n        dynamic = true;\n      }\n      types.push(coder.type);\n    });\n    const type = \"tuple(\" + types.join(\",\") + \")\";\n    super(\"tuple\", type, localName, dynamic);\n    this.coders = coders;\n  }\n  encode(writer, value) {\n    return pack(writer, this.coders, value);\n  }\n  decode(reader) {\n    return reader.coerce(this.name, unpack(reader, this.coders));\n  }\n}","map":{"version":3,"sources":["../../src.ts/coders/tuple.ts"],"names":[],"mappings":"AAAA,YAAY;;AAEZ,SAAS,KAAK,QAAwB,kBAAkB;AACxD,SAAS,IAAI,EAAE,MAAM,QAAQ,SAAS;AAEtC,OAAM,MAAO,UAAW,SAAQ,KAAK,CAAA;EAGjC,WAAA,CAAY,MAAoB,EAAE,SAAiB,EAAA;IAC/C,IAAI,OAAO,GAAG,KAAK;IACnB,MAAM,KAAK,GAAkB,EAAE;IAC/B,MAAM,CAAC,OAAO,CAAE,KAAK,IAAI;MACrB,IAAI,KAAK,CAAC,OAAO,EAAE;QAAE,OAAO,GAAG,IAAI;MAAG;MACtC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;IAC1B,CAAC,CAAC;IACF,MAAM,IAAI,GAAI,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAI;IAE/C,KAAK,CAAC,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAC;IACxC,IAAI,CAAC,MAAM,GAAG,MAAM;EACxB;EAEA,MAAM,CAAC,MAAc,EAAE,KAA6C,EAAA;IAChE,OAAO,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC;EAC3C;EAEA,MAAM,CAAC,MAAc,EAAA;IACjB,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;EAChE;AACH","sourceRoot":"","sourcesContent":["\"use strict\";\r\nimport { Coder } from \"./abstract-coder\";\r\nimport { pack, unpack } from \"./array\";\r\nexport class TupleCoder extends Coder {\r\n    constructor(coders, localName) {\r\n        let dynamic = false;\r\n        const types = [];\r\n        coders.forEach((coder) => {\r\n            if (coder.dynamic) {\r\n                dynamic = true;\r\n            }\r\n            types.push(coder.type);\r\n        });\r\n        const type = (\"tuple(\" + types.join(\",\") + \")\");\r\n        super(\"tuple\", type, localName, dynamic);\r\n        this.coders = coders;\r\n    }\r\n    encode(writer, value) {\r\n        return pack(writer, this.coders, value);\r\n    }\r\n    decode(reader) {\r\n        return reader.coerce(this.name, unpack(reader, this.coders));\r\n    }\r\n}\r\n//# sourceMappingURL=tuple.js.map"]},"metadata":{},"sourceType":"module"}