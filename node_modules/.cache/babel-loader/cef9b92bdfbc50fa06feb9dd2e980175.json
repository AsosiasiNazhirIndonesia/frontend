{"ast":null,"code":"var _jsxFileName = \"C:\\\\spasi\\\\frontend\\\\src\\\\pages\\\\ManageCertificate\\\\ManageCertificate.js\",\n  _s = $RefreshSig$();\nimport htmlToText from \"html-to-text\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect, useSelector } from \"react-redux\";\nimport { useParams, withRouter } from \"react-router-dom\";\nimport { createNotification } from \"../../components/Notification/Notification\";\nimport TableCertificate from \"../../components/Table/TableCertificate\";\nimport Pagination from \"../../components/elements/Pagination/Pagination\";\nimport ProgressBar from \"../../components/elements/ProgressBar/ProgressBar\";\nimport SubmitButton from \"../../components/elements/SubmitButton/SubmitButton\";\nimport { ACTOR, INPUT_STATUS } from \"../../constants/component.constant\";\nimport CertificateSet from \"../../contracts/digital_certificate\";\nimport API from \"../../services/api\";\nimport web3 from \"../../services/web3\";\nimport { history } from \"../../store\";\nimport CreateCertificate1 from \"./CreateCertificate1\";\nimport CreateCertificate2 from \"./CreateCertificate2\";\nimport CreateCertificate3 from \"./CreateCertificate3\";\nimport \"./ManageCertificate.scss\";\nimport ViewCertificate from \"./ViewCertificate\";\nimport name from \"ipfs-http-client/src/name\";\nimport ModalSelectCertType from \"../../components/Modal/ModalSelectCertType\";\nimport CreateCertificateMember1 from \"./CreateCertificateMember/CreateCertificateMember1\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  Buffer\n} = require(\"buffer\");\nconst ManageCertificate = props => {\n  _s();\n  const [isDelete, setIsDelete] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage] = useState(10);\n  const [certificateLogo, setCertificateLogo] = useState(null);\n  const [documentName, setDocumentName] = useState({\n    status: INPUT_STATUS.INIT,\n    value: \"\",\n    errorMessage: \"\"\n  });\n  const [receiverName, setReceiverName] = useState({\n    status: INPUT_STATUS.INIT,\n    value: \"\",\n    errorMessage: \"\"\n  });\n  const [certificateNo, setCertificateNo] = useState({\n    status: INPUT_STATUS.INIT,\n    value: \"\",\n    errorMessage: \"\"\n  });\n  const [certificateTitle, setCertificateTitle] = useState({\n    status: INPUT_STATUS.INIT,\n    value: \"\",\n    errorMessage: \"\"\n  });\n  const [certificateDescription, setCertificateDescription] = useState({\n    status: INPUT_STATUS.INIT,\n    value: \"\",\n    errorMessage: \"\"\n  });\n  const [certificateScore, setCertificateScore] = useState({\n    status: INPUT_STATUS.INIT,\n    value: \"\",\n    errorMessage: \"\"\n  });\n  const [certificateType, setCertificateType] = useState({\n    status: INPUT_STATUS.INIT,\n    value: \"\",\n    errorMessage: \"\"\n  });\n  const [certificateDate, setCertificateDate] = useState({\n    status: INPUT_STATUS.INIT,\n    value: \"\",\n    errorMessage: \"\"\n  });\n  const [sendToPubKey, setSendToPubKey] = useState({\n    status: INPUT_STATUS.INIT,\n    value: \"\",\n    errorMessage: \"\"\n  });\n  const [sendToUser, setSendToUser] = useState({});\n  const [assignToPubKeys, setAssignToPubKeys] = useState([{\n    status: INPUT_STATUS.INIT,\n    value: \"\",\n    errorMessage: \"\"\n  }]);\n  const [assignToUsers, setAssignToUsers] = useState([{}]);\n  const [certificates, setCertificates] = useState([]);\n  const [showModalCertType, setShowModalCertType] = useState(false);\n  const [selectedCertType, setSelectedCertType] = useState(null);\n  const step = new URLSearchParams(props.location.search).get(\"create_certificate_step\");\n  const memberStep = new URLSearchParams(props.location.search).get(\"create_certificate_member_step\");\n  const view = new URLSearchParams(props.location.search).get(\"view_certificate\");\n  const certificateId = new URLSearchParams(props.location.search).get(\"certificate_id\");\n  const actor = useParams().actor;\n  const deleteSelectedData = useSelector(state => state.getIn([\"delete\", \"selectedData\"]).toJS());\n  const [admins, setAdmins] = useState([]);\n  const [selectedAdmin, setSelectedAdmin] = useState({});\n  useEffect(() => {\n    getAllCertificates(currentPage - 1, itemsPerPage);\n  }, [step, currentPage, itemsPerPage, props === null || props === void 0 ? void 0 : props.type, props === null || props === void 0 ? void 0 : props.user]);\n  useEffect(() => {\n    if (selectedCertType) {\n      handleSelectCertType();\n    }\n  }, [selectedCertType]);\n  const handleSelectCertType = () => {\n    var _selectedCertType$lab, _selectedCertType$lab2;\n    if (selectedCertType !== null && selectedCertType !== void 0 && (_selectedCertType$lab = selectedCertType.label) !== null && _selectedCertType$lab !== void 0 && (_selectedCertType$lab2 = _selectedCertType$lab.toLowerCase()) !== null && _selectedCertType$lab2 !== void 0 && _selectedCertType$lab2.includes(\"keanggotaan\")) {\n      history.push(`/dashboard/${actor}?menu=manage-certificate&create_certificate_member_step=1`);\n    } else {\n      history.push(`/dashboard/${actor}?menu=manage-certificate&create_certificate_step=1`);\n    }\n  };\n  const getAllAdmins = async (offset, limit) => {\n    const results = await API.getAllAdmins(offset, limit);\n    if (results.length > 0) {\n      setAdmins(results);\n    }\n  };\n  const getAllCertificates = async (offset, limit) => {\n    let results = [];\n    if (props.type === ACTOR.USER && props.user) {\n      results = await API.getCertificatesByUser(props.user.user_id, offset, limit);\n    } else if (props.type === ACTOR.ADMIN && props.admin) {\n      let creatorId = props.admin.admin_id;\n      if (props.admin.name !== \"creator\") {\n        await getAllAdmins(0, 1000);\n        setSelectedAdmin(admins.find(admin => {\n          return admin.name === \"creator\" && admin.institution_id === props.admin.institution_id;\n        }));\n        if (selectedAdmin) creatorId = selectedAdmin.admin_id;\n      }\n      results = await API.getCertificatesByAdmin(creatorId, offset, limit);\n    }\n    const newCertificates = [];\n    const composeApprovers = approvers => {\n      let names = \"\";\n      for (const approver of approvers) {\n        names = names + ` ,${approver.User.name}`;\n      }\n      return names.substring(2, names.length);\n    };\n    for (const result of results) {\n      newCertificates.push({\n        id: result.certificate_id,\n        date: result.date,\n        documentName: result.name,\n        sendTo: result.User.name,\n        signaturedBy: composeApprovers(result.CertificateSigners),\n        status: 0,\n        scAddress: result.sc_address,\n        tokenId: result.token_id\n      });\n    }\n    if (newCertificates.length > 0) {\n      setCertificates(newCertificates);\n    }\n  };\n  const indexOfLastPost = currentPage * itemsPerPage;\n  const indexOfFirstPost = indexOfLastPost - itemsPerPage;\n  const currentItems = certificates.slice(indexOfFirstPost, indexOfLastPost);\n  const getInputValue = key => {\n    switch (key) {\n      case \"documentName\":\n        return documentName;\n      case \"receiverName\":\n        return receiverName;\n      case \"certificateNo\":\n        return certificateNo;\n      case \"certificateTitle\":\n        return certificateTitle;\n      case \"certificateDescription\":\n        return certificateDescription;\n      case \"certificateScore\":\n        return certificateScore;\n      case \"certificateDate\":\n        return certificateDate;\n      case \"sendToPubKey\":\n        return sendToPubKey;\n      case \"certificateLogo\":\n        return certificateLogo;\n      default:\n        break;\n    }\n  };\n  const loadSendToUser = async publicKey => {\n    const user = await API.getUserByPublicKey(publicKey);\n    setSendToUser(user ? user : {});\n    const status = user ? INPUT_STATUS.VALID : INPUT_STATUS.INVALID;\n    setSendToPubKey({\n      status,\n      value: publicKey,\n      errorMessage: status === INPUT_STATUS.INVALID ? !user ? \"user not found\" : \"required field\" : \"\"\n    });\n  };\n  const setInputValue = (key, value) => {\n    let status = value && value != \"\" ? INPUT_STATUS.VALID : INPUT_STATUS.INVALID;\n    switch (key) {\n      case \"documentName\":\n        setDocumentName({\n          status,\n          value: value,\n          errorMessage: status === INPUT_STATUS.INVALID ? \"required field\" : \"\"\n        });\n        break;\n      case \"receiverName\":\n        setReceiverName({\n          status,\n          value: value,\n          errorMessage: status === INPUT_STATUS.INVALID ? \"required field\" : \"\"\n        });\n        break;\n      case \"certificateNo\":\n        setCertificateNo({\n          status,\n          value: value,\n          errorMessage: status === INPUT_STATUS.INVALID ? \"required field\" : \"\"\n        });\n        break;\n      case \"certificateTitle\":\n        setCertificateTitle({\n          status,\n          value: value,\n          errorMessage: status === INPUT_STATUS.INVALID ? \"required field\" : \"\"\n        });\n        break;\n      case \"certificateDescription\":\n        const text = htmlToText.fromString(value).replace(/(\\r\\n|\\n|\\r)/gm, \"\");\n        status = text ? status : INPUT_STATUS.INVALID;\n        setCertificateDescription({\n          status,\n          value: value,\n          errorMessage: status === INPUT_STATUS.INVALID ? \"required field\" : \"\"\n        });\n        break;\n      case \"certificateScore\":\n        setCertificateScore({\n          status,\n          value: value,\n          errorMessage: status === INPUT_STATUS.INVALID ? \"required field\" : \"\"\n        });\n        break;\n      case \"certificateType\":\n        setCertificateType({\n          status,\n          value: value,\n          errorMessage: status === INPUT_STATUS.INVALID ? \"required field\" : \"\"\n        });\n        break;\n      case \"certificateDate\":\n        setCertificateDate({\n          status,\n          value: value,\n          errorMessage: status === INPUT_STATUS.INVALID ? \"required field\" : \"\"\n        });\n        break;\n      case \"certificateLogo\":\n        setCertificateLogo(value);\n        break;\n      case \"sendToPubKey\":\n        if (value.length === 42) {\n          loadSendToUser(value);\n        } else {\n          status = INPUT_STATUS.INVALID;\n          setSendToUser({});\n        }\n        setSendToPubKey({\n          status,\n          value: value,\n          errorMessage: status === INPUT_STATUS.INVALID ? \"public key length must be 42 characters\" : \"\"\n        });\n        break;\n      default:\n        break;\n    }\n  };\n  const getDataToSign = certificate => {\n    const {\n      receiver_name,\n      no,\n      title,\n      description,\n      score,\n      date\n    } = certificate;\n    const descriptionText = htmlToText.fromString(description).replace(/(\\r\\n|\\n|\\r| )/gm, \"\");\n    const mergeCertificateData = (receiver_name + no + title + descriptionText + score + date).replace(/(\\r\\n|\\n|\\r| )/gm, \"\");\n    return web3.utils.keccak256(mergeCertificateData);\n  };\n  const submit = async () => {\n    if (assignToPubKeys) {\n      const certificateHash = getDataToSign({\n        receiver_name: receiverName.value,\n        no: certificateNo.value,\n        title: certificateTitle.value,\n        description: certificateDescription.value,\n        score: certificateScore.value,\n        date: certificateDate.value\n      });\n      let approvers = [];\n      for (const assignToPubKey of assignToPubKeys) {\n        approvers.push(assignToPubKey.value);\n      }\n      const accounts = await web3.eth.getAccounts();\n\n      //jika signernya hanya admin, langsung Minting\n      // if (approvers[0] === accounts[0] && approvers.length === 1) {\n      const institution = await API.getInstitutionById(props.admin.institution_id);\n      // const certificateSet = CertificateSet.getNewInstance(\n      //   institution.sc_address\n      // );\n      // const today = new Date();\n      // const thisMonth = today.getMonth();\n      // const tx = certificateSet.methods.mint(\n      //   sendToPubKey.value,\n      //   0,\n      //   Math.floor(new Date(today.setMonth(thisMonth + 12)).getTime() / 1000),\n      //   certificateHash,\n      //   approvers\n      // );\n\n      try {\n        // createNotification({\n        //   type: \"Minting...\",\n        //   value:\n        //     \"Please check your metamask and stay on this page until Certificate is Minted to blockchain\",\n        // });\n\n        // tx.send({\n        //   from: accounts[0],\n        //   gas: 3000000,\n        //   gasPrice: \"30000000000\",\n        // }).then(async function (receipt) {\n        //   const tokenId = await certificateSet.methods\n        //     .encodeTokenId(0, sendToPubKey.value)\n        //     .call();\n\n        const certificate_signers = [];\n        let index = 0;\n        for (const assignToUser of assignToUsers) {\n          certificate_signers.push({\n            user_id: assignToUser.user_id,\n            priority: index\n          });\n          index++;\n        }\n\n        //save to database\n        API.addCertificate({\n          admin_id: props.admin.admin_id,\n          user_id: sendToUser.user_id,\n          logo: certificateLogo,\n          name: documentName.value,\n          title: certificateTitle.value,\n          no: certificateNo.value,\n          description: certificateDescription.value,\n          score: certificateScore.value,\n          date: certificateDate.value,\n          sc_address: institution.sc_address,\n          token_id: \"--- not yet minted ---\",\n          //tokenId, (default tokenid before minting)\n          receiver_name: receiverName.value,\n          certificate_type_id: selectedCertType.value,\n          certificate_signers\n        });\n        createNotification({\n          type: \"success\",\n          value: \"Your certificate has been created\" //already on blockchain\",\n        });\n\n        history.push(`/dashboard/${actor}?menu=manage-certificate`);\n        // });\n      } catch (e) {\n        console.log(e);\n        createNotification({\n          type: \"error\",\n          value: \"Something went wrong\"\n        });\n      }\n      // }\n    }\n  };\n\n  // old submit deploying new contract\n  // const submit = async () => {\n  //   const certificateHash = getDataToSign({\n  //     receiver_name: receiverName.value,\n  //     no: certificateNo.value,\n  //     title: certificateTitle.value,\n  //     description: certificateDescription.value,\n  //     score: certificateScore.value,\n  //     date: certificateDate.value\n  //   });\n\n  //   let approvers = [];\n  //   for (const assignToPubKey of assignToPubKeys) {\n  //     approvers.push(assignToPubKey.value);\n  //   }\n\n  //   const tx = DigitalCertificate.deploy(certificateHash, sendToPubKey.value, approvers);\n  //   const accounts = await web3.eth.getAccounts();\n  //   try {\n  //     createNotification({\n  //       type: \"info\",\n  //       value: \"Please check your metamask and stay on this page until certificate has been deployed to blockchain\"});\n  //     const res = await tx.send({\n  //       from: accounts[0],\n  //       gas: 3000000,\n  //       gasPrice: '30000000000'\n  //     });\n\n  //     const certificate_signers = [];\n  //     let index = 0;\n  //     for (const assignToUser of assignToUsers) {\n  //       certificate_signers.push({\n  //         user_id: assignToUser.user_id,\n  //         priority: index\n  //       });\n  //       index++;\n  //     }\n\n  //     API.addCertificate({\n  //       admin_id: props.admin.admin_id,\n  //       user_id: sendToUser.user_id,\n  //       logo: certificateLogo,\n  //       name: documentName.value,\n  //       title: certificateTitle.value,\n  //       no: certificateNo.value,\n  //       description: certificateDescription.value,\n  //       score: certificateScore.value,\n  //       date: certificateDate.value,\n  //       sc_address: res._address,\n  //       token_id: res._tokenId,\n  //       receiver_name: receiverName.value,\n  //       certificate_signers\n  //     });\n\n  //     await CertificateSet.verify(res._address, [certificateHash, sendToPubKey.value, approvers]);\n\n  //     createNotification({\n  //       type: \"success\",\n  //       value: \"Your certificate already on blockchain\"});\n\n  //       history.push(`/dashboard/${actor}?menu=manage-certificate`);\n  //   } catch(e) {\n  //     console.log(e);\n  //     createNotification({\n  //       type: \"error\",\n  //       value: \"Something went wrong\"\n  //     })\n  //   }\n  // }\n\n  // const onDelete = async () => {\n  //   try {\n  //     if (!web3.utils.isAddress(deleteSelectedData.scAddress)) {\n  //       throw \"Certificate not exist on blockchain\";\n  //     }\n\n  //     const certificateSet = CertificateSet.getNewInstance(deleteSelectedData.scAddress);\n  //     const accounts = await web3.eth.getAccounts();\n  //     createNotification({\n  //       type: \"info\",\n  //       value: \"Please check your metamask\"\n  //     });\n  //     await certificateSet.methods.dropCertificate().send({\n  //       from: accounts[0],\n  //       gas: await certificateSet.methods.dropCertificate().estimateGas({from: accounts[0]}),\n  //       gasPrice: '100000000000'\n  //     });\n  //     createNotification({\n  //       type: \"success\",\n  //       value: `Drop certificate success`\n  //     });\n  //     getAllCertificates(currentPage - 1, itemsPerPage);\n  //   } catch (e) {\n  //     const message = typeof e === 'object' ? e.message : e;\n  //     createNotification({\n  //       type: \"error\",\n  //       value: message\n  //     });\n\n  //   }\n  // }\n\n  const resolveContent = () => {\n    if (view) {\n      return /*#__PURE__*/_jsxDEV(ViewCertificate, {\n        actor: actor,\n        certificateId: certificateId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 14\n      }, this);\n    } else if (step) {\n      switch (step) {\n        case \"1\":\n          return /*#__PURE__*/_jsxDEV(CreateCertificate1, {\n            getInputValue: getInputValue,\n            setInputValue: setInputValue\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 545,\n            columnNumber: 13\n          }, this);\n        case \"2\":\n          return /*#__PURE__*/_jsxDEV(CreateCertificate2, {\n            getInputValue: getInputValue,\n            setInputValue: setInputValue,\n            sendToUser: sendToUser,\n            assignToPubKeys: assignToPubKeys,\n            setAssignToPubKeys: setAssignToPubKeys,\n            assignToUsers: assignToUsers,\n            setAssignToUsers: setAssignToUsers\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 552,\n            columnNumber: 13\n          }, this);\n        case \"3\":\n          return /*#__PURE__*/_jsxDEV(CreateCertificate3, {\n            sendToUser: sendToUser,\n            assignToUsers: assignToUsers,\n            getInputValue: getInputValue,\n            submit: submit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 564,\n            columnNumber: 13\n          }, this);\n        default:\n          return;\n      }\n    } else if (memberStep) {\n      switch (memberStep) {\n        case \"1\":\n          return /*#__PURE__*/_jsxDEV(CreateCertificateMember1, {\n            getInputValue: getInputValue,\n            setInputValue: setInputValue\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 578,\n            columnNumber: 13\n          }, this);\n        default:\n          return;\n      }\n    } else {\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [actor === ACTOR.ADMIN && props.admin.name === \"creator\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bef-table\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"btn-add-certificate\",\n            children: /*#__PURE__*/_jsxDEV(SubmitButton, {\n              buttonText: \"Create Certificate\",\n              onClick: () => {\n                setShowModalCertType(true);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 592,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 591,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 590,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(TableCertificate, {\n          certificates: certificates,\n          setIsDelete: setIsDelete,\n          actor: actor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 603,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n          currentPage: currentPage,\n          itemsPerPage: itemsPerPage,\n          totalItem: certificates.length,\n          setCurrentPage: setCurrentPage,\n          reloadFunction: getAllCertificates\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 608,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ModalSelectCertType, {\n          visible: showModalCertType,\n          onSubmit: val => {\n            setShowModalCertType(false);\n            setSelectedCertType(val);\n          },\n          onCancel: () => {\n            setShowModalCertType(false);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 615,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 588,\n        columnNumber: 9\n      }, this);\n    }\n  };\n  const resolveSubtitle = () => {\n    if (view) {\n      return /*#__PURE__*/_jsxDEV(\"h6\", {\n        className: \"breadcrumb-path\",\n        children: \" Manage Certificate - View Document\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 633,\n        columnNumber: 9\n      }, this);\n    } else if (step) {\n      switch (step) {\n        case \"1\":\n        case \"2\":\n        case \"3\":\n          return /*#__PURE__*/_jsxDEV(\"h6\", {\n            className: \"breadcrumb-path\",\n            children: [\" \", \"Manage Certificate - Create Document\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 641,\n            columnNumber: 13\n          }, this);\n        default:\n          return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 647,\n            columnNumber: 18\n          }, this);\n      }\n    } else if (memberStep) {\n      switch (memberStep) {\n        case \"1\":\n          return /*#__PURE__*/_jsxDEV(\"h6\", {\n            className: \"breadcrumb-path\",\n            children: \"Manage Certificate - Create Document Member\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 653,\n            columnNumber: 13\n          }, this);\n          break;\n        default:\n          break;\n      }\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 664,\n        columnNumber: 14\n      }, this);\n    }\n  };\n  const resolveProgressBarContent = () => {\n    if (!step) {\n      return [];\n    }\n    return [{\n      success: Number(step) >= 1 ? true : false,\n      text: \"Add Document\"\n    }, {\n      success: Number(step) >= 2 ? true : false,\n      text: \"Assign Document\"\n    }, {\n      success: Number(step) >= 3 ? true : false,\n      text: \"Preview\"\n    }];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"certificate-content\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"breadcrumb\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Manage Certificate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 692,\n        columnNumber: 9\n      }, this), resolveSubtitle()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 691,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n      progress: resolveProgressBarContent()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 695,\n      columnNumber: 7\n    }, this), resolveContent()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 690,\n    columnNumber: 5\n  }, this);\n};\n_s(ManageCertificate, \"+UqzJ/FQRzMgNHF9IIHu5p/qnF0=\", false, function () {\n  return [useParams, useSelector];\n});\n_c = ManageCertificate;\nconst mapStateToProps = state => ({\n  admin: state.getIn([\"actor\", \"admin\"]).toJS(),\n  user: state.getIn([\"actor\", \"user\"]).toJS(),\n  type: state.getIn([\"actor\", \"type\"])\n});\nexport default connect(mapStateToProps)( /*#__PURE__*/React.memo(withRouter(ManageCertificate)));\nvar _c;\n$RefreshReg$(_c, \"ManageCertificate\");","map":{"version":3,"names":["htmlToText","React","useEffect","useState","connect","useSelector","useParams","withRouter","createNotification","TableCertificate","Pagination","ProgressBar","SubmitButton","ACTOR","INPUT_STATUS","CertificateSet","API","web3","history","CreateCertificate1","CreateCertificate2","CreateCertificate3","ViewCertificate","name","ModalSelectCertType","CreateCertificateMember1","jsxDEV","_jsxDEV","Fragment","_Fragment","Buffer","require","ManageCertificate","props","_s","isDelete","setIsDelete","currentPage","setCurrentPage","itemsPerPage","certificateLogo","setCertificateLogo","documentName","setDocumentName","status","INIT","value","errorMessage","receiverName","setReceiverName","certificateNo","setCertificateNo","certificateTitle","setCertificateTitle","certificateDescription","setCertificateDescription","certificateScore","setCertificateScore","certificateType","setCertificateType","certificateDate","setCertificateDate","sendToPubKey","setSendToPubKey","sendToUser","setSendToUser","assignToPubKeys","setAssignToPubKeys","assignToUsers","setAssignToUsers","certificates","setCertificates","showModalCertType","setShowModalCertType","selectedCertType","setSelectedCertType","step","URLSearchParams","location","search","get","memberStep","view","certificateId","actor","deleteSelectedData","state","getIn","toJS","admins","setAdmins","selectedAdmin","setSelectedAdmin","getAllCertificates","type","user","handleSelectCertType","_selectedCertType$lab","_selectedCertType$lab2","label","toLowerCase","includes","push","getAllAdmins","offset","limit","results","length","USER","getCertificatesByUser","user_id","ADMIN","admin","creatorId","admin_id","find","institution_id","getCertificatesByAdmin","newCertificates","composeApprovers","approvers","names","approver","User","substring","result","id","certificate_id","date","sendTo","signaturedBy","CertificateSigners","scAddress","sc_address","tokenId","token_id","indexOfLastPost","indexOfFirstPost","currentItems","slice","getInputValue","key","loadSendToUser","publicKey","getUserByPublicKey","VALID","INVALID","setInputValue","text","fromString","replace","getDataToSign","certificate","receiver_name","no","title","description","score","descriptionText","mergeCertificateData","utils","keccak256","submit","certificateHash","assignToPubKey","accounts","eth","getAccounts","institution","getInstitutionById","certificate_signers","index","assignToUser","priority","addCertificate","logo","certificate_type_id","e","console","log","resolveContent","fileName","_jsxFileName","lineNumber","columnNumber","children","className","buttonText","onClick","totalItem","reloadFunction","visible","onSubmit","val","onCancel","resolveSubtitle","resolveProgressBarContent","success","Number","progress","_c","mapStateToProps","memo","$RefreshReg$"],"sources":["C:/spasi/frontend/src/pages/ManageCertificate/ManageCertificate.js"],"sourcesContent":["import htmlToText from \"html-to-text\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { connect, useSelector } from \"react-redux\";\r\nimport { useParams, withRouter } from \"react-router-dom\";\r\nimport { createNotification } from \"../../components/Notification/Notification\";\r\nimport TableCertificate from \"../../components/Table/TableCertificate\";\r\nimport Pagination from \"../../components/elements/Pagination/Pagination\";\r\nimport ProgressBar from \"../../components/elements/ProgressBar/ProgressBar\";\r\nimport SubmitButton from \"../../components/elements/SubmitButton/SubmitButton\";\r\nimport { ACTOR, INPUT_STATUS } from \"../../constants/component.constant\";\r\nimport CertificateSet from \"../../contracts/digital_certificate\";\r\nimport API from \"../../services/api\";\r\nimport web3 from \"../../services/web3\";\r\nimport { history } from \"../../store\";\r\nimport CreateCertificate1 from \"./CreateCertificate1\";\r\nimport CreateCertificate2 from \"./CreateCertificate2\";\r\nimport CreateCertificate3 from \"./CreateCertificate3\";\r\nimport \"./ManageCertificate.scss\";\r\nimport ViewCertificate from \"./ViewCertificate\";\r\nimport name from \"ipfs-http-client/src/name\";\r\nimport ModalSelectCertType from \"../../components/Modal/ModalSelectCertType\";\r\nimport CreateCertificateMember1 from \"./CreateCertificateMember/CreateCertificateMember1\";\r\nconst { Buffer } = require(\"buffer\");\r\n\r\nconst ManageCertificate = (props) => {\r\n  const [isDelete, setIsDelete] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [itemsPerPage] = useState(10);\r\n  const [certificateLogo, setCertificateLogo] = useState(null);\r\n  const [documentName, setDocumentName] = useState({\r\n    status: INPUT_STATUS.INIT,\r\n    value: \"\",\r\n    errorMessage: \"\",\r\n  });\r\n  const [receiverName, setReceiverName] = useState({\r\n    status: INPUT_STATUS.INIT,\r\n    value: \"\",\r\n    errorMessage: \"\",\r\n  });\r\n  const [certificateNo, setCertificateNo] = useState({\r\n    status: INPUT_STATUS.INIT,\r\n    value: \"\",\r\n    errorMessage: \"\",\r\n  });\r\n  const [certificateTitle, setCertificateTitle] = useState({\r\n    status: INPUT_STATUS.INIT,\r\n    value: \"\",\r\n    errorMessage: \"\",\r\n  });\r\n  const [certificateDescription, setCertificateDescription] = useState({\r\n    status: INPUT_STATUS.INIT,\r\n    value: \"\",\r\n    errorMessage: \"\",\r\n  });\r\n  const [certificateScore, setCertificateScore] = useState({\r\n    status: INPUT_STATUS.INIT,\r\n    value: \"\",\r\n    errorMessage: \"\",\r\n  });\r\n  const [certificateType, setCertificateType] = useState({\r\n    status: INPUT_STATUS.INIT,\r\n    value: \"\",\r\n    errorMessage: \"\",\r\n  });\r\n  const [certificateDate, setCertificateDate] = useState({\r\n    status: INPUT_STATUS.INIT,\r\n    value: \"\",\r\n    errorMessage: \"\",\r\n  });\r\n  const [sendToPubKey, setSendToPubKey] = useState({\r\n    status: INPUT_STATUS.INIT,\r\n    value: \"\",\r\n    errorMessage: \"\",\r\n  });\r\n  const [sendToUser, setSendToUser] = useState({});\r\n  const [assignToPubKeys, setAssignToPubKeys] = useState([\r\n    { status: INPUT_STATUS.INIT, value: \"\", errorMessage: \"\" },\r\n  ]);\r\n  const [assignToUsers, setAssignToUsers] = useState([{}]);\r\n  const [certificates, setCertificates] = useState([]);\r\n\r\n  const [showModalCertType, setShowModalCertType] = useState(false);\r\n  const [selectedCertType, setSelectedCertType] = useState(null);\r\n\r\n  const step = new URLSearchParams(props.location.search).get(\r\n    \"create_certificate_step\"\r\n  );\r\n  const memberStep = new URLSearchParams(props.location.search).get(\r\n    \"create_certificate_member_step\"\r\n  );\r\n  const view = new URLSearchParams(props.location.search).get(\r\n    \"view_certificate\"\r\n  );\r\n  const certificateId = new URLSearchParams(props.location.search).get(\r\n    \"certificate_id\"\r\n  );\r\n  const actor = useParams().actor;\r\n\r\n  const deleteSelectedData = useSelector((state) =>\r\n    state.getIn([\"delete\", \"selectedData\"]).toJS()\r\n  );\r\n\r\n  const [admins, setAdmins] = useState([]);\r\n  const [selectedAdmin, setSelectedAdmin] = useState({});\r\n\r\n  useEffect(() => {\r\n    getAllCertificates(currentPage - 1, itemsPerPage);\r\n  }, [step, currentPage, itemsPerPage, props?.type, props?.user]);\r\n\r\n  useEffect(() => {\r\n    if (selectedCertType) {\r\n      handleSelectCertType();\r\n    }\r\n  }, [selectedCertType]);\r\n\r\n  const handleSelectCertType = () => {\r\n    if (selectedCertType?.label?.toLowerCase()?.includes(\"keanggotaan\")) {\r\n      history.push(\r\n        `/dashboard/${actor}?menu=manage-certificate&create_certificate_member_step=1`\r\n      );\r\n    } \r\n    else \r\n    {\r\n      history.push(\r\n        `/dashboard/${actor}?menu=manage-certificate&create_certificate_step=1`\r\n      );\r\n    }\r\n  };\r\n\r\n  const getAllAdmins = async (offset, limit) => {\r\n    const results = await API.getAllAdmins(offset, limit);\r\n    if (results.length > 0) {\r\n      setAdmins(results);\r\n    }\r\n  };\r\n\r\n  const getAllCertificates = async (offset, limit) => {\r\n    let results = [];\r\n    if (props.type === ACTOR.USER && props.user) {\r\n      results = await API.getCertificatesByUser(\r\n        props.user.user_id,\r\n        offset,\r\n        limit\r\n      );\r\n    } else if (props.type === ACTOR.ADMIN && props.admin) {\r\n      let creatorId = props.admin.admin_id;\r\n      if (props.admin.name !== \"creator\") {\r\n        await getAllAdmins(0, 1000);\r\n        setSelectedAdmin(\r\n          admins.find((admin) => {\r\n            return (\r\n              admin.name === \"creator\" &&\r\n              admin.institution_id === props.admin.institution_id\r\n            );\r\n          })\r\n        );\r\n        if (selectedAdmin) creatorId = selectedAdmin.admin_id;\r\n      }\r\n\r\n      results = await API.getCertificatesByAdmin(creatorId, offset, limit);\r\n    }\r\n\r\n    const newCertificates = [];\r\n    const composeApprovers = (approvers) => {\r\n      let names = \"\";\r\n      for (const approver of approvers) {\r\n        names = names + ` ,${approver.User.name}`;\r\n      }\r\n\r\n      return names.substring(2, names.length);\r\n    };\r\n\r\n    for (const result of results) {\r\n      newCertificates.push({\r\n        id: result.certificate_id,\r\n        date: result.date,\r\n        documentName: result.name,\r\n        sendTo: result.User.name,\r\n        signaturedBy: composeApprovers(result.CertificateSigners),\r\n        status: 0,\r\n        scAddress: result.sc_address,\r\n        tokenId: result.token_id,\r\n      });\r\n    }\r\n    if (newCertificates.length > 0) {\r\n      setCertificates(newCertificates);\r\n    }\r\n  };\r\n\r\n  const indexOfLastPost = currentPage * itemsPerPage;\r\n  const indexOfFirstPost = indexOfLastPost - itemsPerPage;\r\n  const currentItems = certificates.slice(indexOfFirstPost, indexOfLastPost);\r\n\r\n  const getInputValue = (key) => {\r\n    switch (key) {\r\n      case \"documentName\":\r\n        return documentName;\r\n      case \"receiverName\":\r\n        return receiverName;\r\n      case \"certificateNo\":\r\n        return certificateNo;\r\n      case \"certificateTitle\":\r\n        return certificateTitle;\r\n      case \"certificateDescription\":\r\n        return certificateDescription;\r\n      case \"certificateScore\":\r\n        return certificateScore;\r\n      case \"certificateDate\":\r\n        return certificateDate;\r\n      case \"sendToPubKey\":\r\n        return sendToPubKey;\r\n      case \"certificateLogo\":\r\n        return certificateLogo;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const loadSendToUser = async (publicKey) => {\r\n    const user = await API.getUserByPublicKey(publicKey);\r\n    setSendToUser(user ? user : {});\r\n    const status = user ? INPUT_STATUS.VALID : INPUT_STATUS.INVALID;\r\n    setSendToPubKey({\r\n      status,\r\n      value: publicKey,\r\n      errorMessage:\r\n        status === INPUT_STATUS.INVALID\r\n          ? !user\r\n            ? \"user not found\"\r\n            : \"required field\"\r\n          : \"\",\r\n    });\r\n  };\r\n\r\n  const setInputValue = (key, value) => {\r\n    let status =\r\n      value && value != \"\" ? INPUT_STATUS.VALID : INPUT_STATUS.INVALID;\r\n\r\n    switch (key) {\r\n      case \"documentName\":\r\n        setDocumentName({\r\n          status,\r\n          value: value,\r\n          errorMessage: status === INPUT_STATUS.INVALID ? \"required field\" : \"\",\r\n        });\r\n        break;\r\n      case \"receiverName\":\r\n        setReceiverName({\r\n          status,\r\n          value: value,\r\n          errorMessage: status === INPUT_STATUS.INVALID ? \"required field\" : \"\",\r\n        });\r\n        break;\r\n      case \"certificateNo\":\r\n        setCertificateNo({\r\n          status,\r\n          value: value,\r\n          errorMessage: status === INPUT_STATUS.INVALID ? \"required field\" : \"\",\r\n        });\r\n        break;\r\n      case \"certificateTitle\":\r\n        setCertificateTitle({\r\n          status,\r\n          value: value,\r\n          errorMessage: status === INPUT_STATUS.INVALID ? \"required field\" : \"\",\r\n        });\r\n        break;\r\n      case \"certificateDescription\":\r\n        const text = htmlToText.fromString(value).replace(/(\\r\\n|\\n|\\r)/gm, \"\");\r\n        status = text ? status : INPUT_STATUS.INVALID;\r\n        setCertificateDescription({\r\n          status,\r\n          value: value,\r\n          errorMessage: status === INPUT_STATUS.INVALID ? \"required field\" : \"\",\r\n        });\r\n        break;\r\n      case \"certificateScore\":\r\n        setCertificateScore({\r\n          status,\r\n          value: value,\r\n          errorMessage: status === INPUT_STATUS.INVALID ? \"required field\" : \"\",\r\n        });\r\n        break;\r\n      case \"certificateType\":\r\n        setCertificateType({\r\n          status,\r\n          value: value,\r\n          errorMessage: status === INPUT_STATUS.INVALID ? \"required field\" : \"\",\r\n        });\r\n        break;\r\n      case \"certificateDate\":\r\n        setCertificateDate({\r\n          status,\r\n          value: value,\r\n          errorMessage: status === INPUT_STATUS.INVALID ? \"required field\" : \"\",\r\n        });\r\n        break;\r\n      case \"certificateLogo\":\r\n        setCertificateLogo(value);\r\n        break;\r\n      case \"sendToPubKey\":\r\n        if (value.length === 42) {\r\n          loadSendToUser(value);\r\n        } else {\r\n          status = INPUT_STATUS.INVALID;\r\n          setSendToUser({});\r\n        }\r\n        setSendToPubKey({\r\n          status,\r\n          value: value,\r\n          errorMessage:\r\n            status === INPUT_STATUS.INVALID\r\n              ? \"public key length must be 42 characters\"\r\n              : \"\",\r\n        });\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const getDataToSign = (certificate) => {\r\n    const { receiver_name, no, title, description, score, date } = certificate;\r\n    const descriptionText = htmlToText\r\n      .fromString(description)\r\n      .replace(/(\\r\\n|\\n|\\r| )/gm, \"\");\r\n    const mergeCertificateData = (\r\n      receiver_name +\r\n      no +\r\n      title +\r\n      descriptionText +\r\n      score +\r\n      date\r\n    ).replace(/(\\r\\n|\\n|\\r| )/gm, \"\");\r\n    return web3.utils.keccak256(mergeCertificateData);\r\n  };\r\n\r\n  const submit = async () => {\r\n    if (assignToPubKeys) {\r\n      const certificateHash = getDataToSign({\r\n        receiver_name: receiverName.value,\r\n        no: certificateNo.value,\r\n        title: certificateTitle.value,\r\n        description: certificateDescription.value,\r\n        score: certificateScore.value,\r\n        date: certificateDate.value,\r\n      });\r\n\r\n      let approvers = [];\r\n      for (const assignToPubKey of assignToPubKeys) {\r\n        approvers.push(assignToPubKey.value);\r\n      }\r\n\r\n      const accounts = await web3.eth.getAccounts();\r\n\r\n      //jika signernya hanya admin, langsung Minting\r\n      // if (approvers[0] === accounts[0] && approvers.length === 1) {\r\n      const institution = await API.getInstitutionById(\r\n        props.admin.institution_id\r\n      );\r\n      // const certificateSet = CertificateSet.getNewInstance(\r\n      //   institution.sc_address\r\n      // );\r\n      // const today = new Date();\r\n      // const thisMonth = today.getMonth();\r\n      // const tx = certificateSet.methods.mint(\r\n      //   sendToPubKey.value,\r\n      //   0,\r\n      //   Math.floor(new Date(today.setMonth(thisMonth + 12)).getTime() / 1000),\r\n      //   certificateHash,\r\n      //   approvers\r\n      // );\r\n\r\n      try {\r\n        // createNotification({\r\n        //   type: \"Minting...\",\r\n        //   value:\r\n        //     \"Please check your metamask and stay on this page until Certificate is Minted to blockchain\",\r\n        // });\r\n\r\n        // tx.send({\r\n        //   from: accounts[0],\r\n        //   gas: 3000000,\r\n        //   gasPrice: \"30000000000\",\r\n        // }).then(async function (receipt) {\r\n        //   const tokenId = await certificateSet.methods\r\n        //     .encodeTokenId(0, sendToPubKey.value)\r\n        //     .call();\r\n\r\n        const certificate_signers = [];\r\n        let index = 0;\r\n        for (const assignToUser of assignToUsers) {\r\n          certificate_signers.push({\r\n            user_id: assignToUser.user_id,\r\n            priority: index,\r\n          });\r\n          index++;\r\n        }\r\n\r\n        //save to database\r\n        API.addCertificate({\r\n          admin_id: props.admin.admin_id,\r\n          user_id: sendToUser.user_id,\r\n          logo: certificateLogo,\r\n          name: documentName.value,\r\n          title: certificateTitle.value,\r\n          no: certificateNo.value,\r\n          description: certificateDescription.value,\r\n          score: certificateScore.value,\r\n          date: certificateDate.value,\r\n          sc_address: institution.sc_address,\r\n          token_id: \"--- not yet minted ---\", //tokenId, (default tokenid before minting)\r\n          receiver_name: receiverName.value,\r\n          certificate_type_id: selectedCertType.value,\r\n          certificate_signers,\r\n        });\r\n\r\n        createNotification({\r\n          type: \"success\",\r\n          value: \"Your certificate has been created\", //already on blockchain\",\r\n        });\r\n\r\n        history.push(`/dashboard/${actor}?menu=manage-certificate`);\r\n        // });\r\n      } catch (e) {\r\n        console.log(e);\r\n        createNotification({\r\n          type: \"error\",\r\n          value: \"Something went wrong\",\r\n        });\r\n      }\r\n      // }\r\n    }\r\n  };\r\n\r\n  // old submit deploying new contract\r\n  // const submit = async () => {\r\n  //   const certificateHash = getDataToSign({\r\n  //     receiver_name: receiverName.value,\r\n  //     no: certificateNo.value,\r\n  //     title: certificateTitle.value,\r\n  //     description: certificateDescription.value,\r\n  //     score: certificateScore.value,\r\n  //     date: certificateDate.value\r\n  //   });\r\n\r\n  //   let approvers = [];\r\n  //   for (const assignToPubKey of assignToPubKeys) {\r\n  //     approvers.push(assignToPubKey.value);\r\n  //   }\r\n\r\n  //   const tx = DigitalCertificate.deploy(certificateHash, sendToPubKey.value, approvers);\r\n  //   const accounts = await web3.eth.getAccounts();\r\n  //   try {\r\n  //     createNotification({\r\n  //       type: \"info\",\r\n  //       value: \"Please check your metamask and stay on this page until certificate has been deployed to blockchain\"});\r\n  //     const res = await tx.send({\r\n  //       from: accounts[0],\r\n  //       gas: 3000000,\r\n  //       gasPrice: '30000000000'\r\n  //     });\r\n\r\n  //     const certificate_signers = [];\r\n  //     let index = 0;\r\n  //     for (const assignToUser of assignToUsers) {\r\n  //       certificate_signers.push({\r\n  //         user_id: assignToUser.user_id,\r\n  //         priority: index\r\n  //       });\r\n  //       index++;\r\n  //     }\r\n\r\n  //     API.addCertificate({\r\n  //       admin_id: props.admin.admin_id,\r\n  //       user_id: sendToUser.user_id,\r\n  //       logo: certificateLogo,\r\n  //       name: documentName.value,\r\n  //       title: certificateTitle.value,\r\n  //       no: certificateNo.value,\r\n  //       description: certificateDescription.value,\r\n  //       score: certificateScore.value,\r\n  //       date: certificateDate.value,\r\n  //       sc_address: res._address,\r\n  //       token_id: res._tokenId,\r\n  //       receiver_name: receiverName.value,\r\n  //       certificate_signers\r\n  //     });\r\n\r\n  //     await CertificateSet.verify(res._address, [certificateHash, sendToPubKey.value, approvers]);\r\n\r\n  //     createNotification({\r\n  //       type: \"success\",\r\n  //       value: \"Your certificate already on blockchain\"});\r\n\r\n  //       history.push(`/dashboard/${actor}?menu=manage-certificate`);\r\n  //   } catch(e) {\r\n  //     console.log(e);\r\n  //     createNotification({\r\n  //       type: \"error\",\r\n  //       value: \"Something went wrong\"\r\n  //     })\r\n  //   }\r\n  // }\r\n\r\n  // const onDelete = async () => {\r\n  //   try {\r\n  //     if (!web3.utils.isAddress(deleteSelectedData.scAddress)) {\r\n  //       throw \"Certificate not exist on blockchain\";\r\n  //     }\r\n\r\n  //     const certificateSet = CertificateSet.getNewInstance(deleteSelectedData.scAddress);\r\n  //     const accounts = await web3.eth.getAccounts();\r\n  //     createNotification({\r\n  //       type: \"info\",\r\n  //       value: \"Please check your metamask\"\r\n  //     });\r\n  //     await certificateSet.methods.dropCertificate().send({\r\n  //       from: accounts[0],\r\n  //       gas: await certificateSet.methods.dropCertificate().estimateGas({from: accounts[0]}),\r\n  //       gasPrice: '100000000000'\r\n  //     });\r\n  //     createNotification({\r\n  //       type: \"success\",\r\n  //       value: `Drop certificate success`\r\n  //     });\r\n  //     getAllCertificates(currentPage - 1, itemsPerPage);\r\n  //   } catch (e) {\r\n  //     const message = typeof e === 'object' ? e.message : e;\r\n  //     createNotification({\r\n  //       type: \"error\",\r\n  //       value: message\r\n  //     });\r\n\r\n  //   }\r\n  // }\r\n\r\n  const resolveContent = () => {\r\n    if (view) {\r\n      return <ViewCertificate actor={actor} certificateId={certificateId} />;\r\n    } else if (step) {\r\n      switch (step) {\r\n        case \"1\":\r\n          return (\r\n            <CreateCertificate1\r\n              getInputValue={getInputValue}\r\n              setInputValue={setInputValue}\r\n            />\r\n          );\r\n        case \"2\":\r\n          return (\r\n            <CreateCertificate2\r\n              getInputValue={getInputValue}\r\n              setInputValue={setInputValue}\r\n              sendToUser={sendToUser}\r\n              assignToPubKeys={assignToPubKeys}\r\n              setAssignToPubKeys={setAssignToPubKeys}\r\n              assignToUsers={assignToUsers}\r\n              setAssignToUsers={setAssignToUsers}\r\n            />\r\n          );\r\n        case \"3\":\r\n          return (\r\n            <CreateCertificate3\r\n              sendToUser={sendToUser}\r\n              assignToUsers={assignToUsers}\r\n              getInputValue={getInputValue}\r\n              submit={submit}\r\n            />\r\n          );\r\n        default:\r\n          return;\r\n      }\r\n    } else if (memberStep) {\r\n      switch (memberStep) {\r\n        case \"1\":\r\n          return (\r\n            <CreateCertificateMember1\r\n              getInputValue={getInputValue}\r\n              setInputValue={setInputValue}\r\n            />\r\n          );\r\n        default:\r\n          return;\r\n      }\r\n    } else {\r\n      return (\r\n        <React.Fragment>\r\n          {actor === ACTOR.ADMIN && props.admin.name === \"creator\" ? (\r\n            <div className=\"bef-table\">\r\n              <div className=\"btn-add-certificate\">\r\n                <SubmitButton\r\n                  buttonText={\"Create Certificate\"}\r\n                  onClick={() => {\r\n                    setShowModalCertType(true);\r\n                  }}\r\n                ></SubmitButton>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <></>\r\n          )}\r\n          <TableCertificate\r\n            certificates={certificates}\r\n            setIsDelete={setIsDelete}\r\n            actor={actor}\r\n          />\r\n          <Pagination\r\n            currentPage={currentPage}\r\n            itemsPerPage={itemsPerPage}\r\n            totalItem={certificates.length}\r\n            setCurrentPage={setCurrentPage}\r\n            reloadFunction={getAllCertificates}\r\n          />\r\n          <ModalSelectCertType\r\n            visible={showModalCertType}\r\n            onSubmit={(val) => {\r\n              setShowModalCertType(false);\r\n              setSelectedCertType(val);\r\n            }}\r\n            onCancel={() => {\r\n              setShowModalCertType(false);\r\n            }}\r\n          />\r\n        </React.Fragment>\r\n      );\r\n    }\r\n  };\r\n\r\n  const resolveSubtitle = () => {\r\n    if (view) {\r\n      return (\r\n        <h6 className=\"breadcrumb-path\"> Manage Certificate - View Document</h6>\r\n      );\r\n    } else if (step) {\r\n      switch (step) {\r\n        case \"1\":\r\n        case \"2\":\r\n        case \"3\":\r\n          return (\r\n            <h6 className=\"breadcrumb-path\">\r\n              {\" \"}\r\n              Manage Certificate - Create Document\r\n            </h6>\r\n          );\r\n        default:\r\n          return <div></div>;\r\n      }\r\n    } else if (memberStep) {\r\n      switch (memberStep) {\r\n        case \"1\":\r\n          return (\r\n            <h6 className=\"breadcrumb-path\">\r\n              Manage Certificate - Create Document Member\r\n            </h6>\r\n          );\r\n\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    } else {\r\n      return <div />;\r\n    }\r\n  };\r\n\r\n  const resolveProgressBarContent = () => {\r\n    if (!step) {\r\n      return [];\r\n    }\r\n\r\n    return [\r\n      {\r\n        success: Number(step) >= 1 ? true : false,\r\n        text: \"Add Document\",\r\n      },\r\n      {\r\n        success: Number(step) >= 2 ? true : false,\r\n        text: \"Assign Document\",\r\n      },\r\n      {\r\n        success: Number(step) >= 3 ? true : false,\r\n        text: \"Preview\",\r\n      },\r\n    ];\r\n  };\r\n\r\n  return (\r\n    <div className=\"certificate-content\">\r\n      <div className=\"breadcrumb\">\r\n        <h1>Manage Certificate</h1>\r\n        {resolveSubtitle()}\r\n      </div>\r\n      <ProgressBar progress={resolveProgressBarContent()} />\r\n      {resolveContent()}\r\n      {/* <Delete delete={isDelete} setIsDelete={setIsDelete} del={onDelete} /> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  admin: state.getIn([\"actor\", \"admin\"]).toJS(),\r\n  user: state.getIn([\"actor\", \"user\"]).toJS(),\r\n  type: state.getIn([\"actor\", \"type\"]),\r\n});\r\n\r\nexport default connect(mapStateToProps)(\r\n  React.memo(withRouter(ManageCertificate))\r\n);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}