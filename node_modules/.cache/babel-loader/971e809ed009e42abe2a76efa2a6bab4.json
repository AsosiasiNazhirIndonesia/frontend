{"ast":null,"code":"/*\r\n This file is part of web3.js.\r\n\r\n web3.js is free software: you can redistribute it and/or modify\r\n it under the terms of the GNU Lesser General Public License as published by\r\n the Free Software Foundation, either version 3 of the License, or\r\n (at your option) any later version.\r\n\r\n web3.js is distributed in the hope that it will be useful,\r\n but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n GNU Lesser General Public License for more details.\r\n\r\n You should have received a copy of the GNU Lesser General Public License\r\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n */\n/**\r\n * @file index.js\r\n * @author Fabian Vogelsteller <fabian@ethereum.org>\r\n * @date 2017\r\n */\n\"use strict\";\n\nvar core = require('web3-core');\nvar helpers = require('web3-core-helpers');\nvar Subscriptions = require('web3-core-subscriptions').subscriptions;\nvar Method = require('web3-core-method');\nvar utils = require('web3-utils');\nvar Net = require('web3-net');\nvar ENS = require('web3-eth-ens');\nvar Personal = require('web3-eth-personal');\nvar BaseContract = require('web3-eth-contract');\nvar Iban = require('web3-eth-iban');\nvar Accounts = require('web3-eth-accounts');\nvar abi = require('web3-eth-abi');\nvar getNetworkType = require('./getNetworkType.js');\nvar formatter = helpers.formatters;\nvar blockCall = function (args) {\n  return typeof args[0] === 'string' && args[0].indexOf('0x') === 0 ? \"eth_getBlockByHash\" : \"eth_getBlockByNumber\";\n};\nvar transactionFromBlockCall = function (args) {\n  return typeof args[0] === 'string' && args[0].indexOf('0x') === 0 ? 'eth_getTransactionByBlockHashAndIndex' : 'eth_getTransactionByBlockNumberAndIndex';\n};\nvar uncleCall = function (args) {\n  return typeof args[0] === 'string' && args[0].indexOf('0x') === 0 ? 'eth_getUncleByBlockHashAndIndex' : 'eth_getUncleByBlockNumberAndIndex';\n};\nvar getBlockTransactionCountCall = function (args) {\n  return typeof args[0] === 'string' && args[0].indexOf('0x') === 0 ? 'eth_getBlockTransactionCountByHash' : 'eth_getBlockTransactionCountByNumber';\n};\nvar uncleCountCall = function (args) {\n  return typeof args[0] === 'string' && args[0].indexOf('0x') === 0 ? 'eth_getUncleCountByBlockHash' : 'eth_getUncleCountByBlockNumber';\n};\nvar Eth = function Eth() {\n  var _this = this;\n  // sets _requestmanager\n  core.packageInit(this, arguments);\n  // overwrite package setRequestManager\n  var setRequestManager = this.setRequestManager;\n  this.setRequestManager = function (manager) {\n    setRequestManager(manager);\n    _this.net.setRequestManager(manager);\n    _this.personal.setRequestManager(manager);\n    _this.accounts.setRequestManager(manager);\n    _this.Contract._requestManager = _this._requestManager;\n    _this.Contract.currentProvider = _this._provider;\n    return true;\n  };\n  // overwrite setProvider\n  var setProvider = this.setProvider;\n  this.setProvider = function () {\n    setProvider.apply(_this, arguments);\n    _this.setRequestManager(_this._requestManager);\n    // Set detectedAddress/lastSyncCheck back to null because the provider could be connected to a different chain now\n    _this.ens._detectedAddress = null;\n    _this.ens._lastSyncCheck = null;\n  };\n  var handleRevert = false;\n  var defaultAccount = null;\n  var defaultBlock = 'latest';\n  var transactionBlockTimeout = 50;\n  var transactionConfirmationBlocks = 24;\n  var transactionPollingTimeout = 750;\n  var transactionPollingInterval = 1000;\n  var blockHeaderTimeout = 10; // 10 seconds\n  var maxListenersWarningThreshold = 100;\n  var defaultChain, defaultHardfork, defaultCommon;\n  Object.defineProperty(this, 'handleRevert', {\n    get: function () {\n      return handleRevert;\n    },\n    set: function (val) {\n      handleRevert = val;\n      // also set on the Contract object\n      _this.Contract.handleRevert = handleRevert;\n      // update handleRevert\n      methods.forEach(function (method) {\n        method.handleRevert = handleRevert;\n      });\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, 'defaultCommon', {\n    get: function () {\n      return defaultCommon;\n    },\n    set: function (val) {\n      defaultCommon = val;\n      // also set on the Contract object\n      _this.Contract.defaultCommon = defaultCommon;\n      // update defaultBlock\n      methods.forEach(function (method) {\n        method.defaultCommon = defaultCommon;\n      });\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, 'defaultHardfork', {\n    get: function () {\n      return defaultHardfork;\n    },\n    set: function (val) {\n      defaultHardfork = val;\n      // also set on the Contract object\n      _this.Contract.defaultHardfork = defaultHardfork;\n      // update defaultBlock\n      methods.forEach(function (method) {\n        method.defaultHardfork = defaultHardfork;\n      });\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, 'defaultChain', {\n    get: function () {\n      return defaultChain;\n    },\n    set: function (val) {\n      defaultChain = val;\n      // also set on the Contract object\n      _this.Contract.defaultChain = defaultChain;\n      // update defaultBlock\n      methods.forEach(function (method) {\n        method.defaultChain = defaultChain;\n      });\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, 'transactionPollingTimeout', {\n    get: function () {\n      return transactionPollingTimeout;\n    },\n    set: function (val) {\n      transactionPollingTimeout = val;\n      // also set on the Contract object\n      _this.Contract.transactionPollingTimeout = transactionPollingTimeout;\n      // update defaultBlock\n      methods.forEach(function (method) {\n        method.transactionPollingTimeout = transactionPollingTimeout;\n      });\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, 'transactionPollingInterval', {\n    get: function () {\n      return transactionPollingInterval;\n    },\n    set: function (val) {\n      transactionPollingInterval = val;\n      // also set on the Contract object\n      _this.Contract.transactionPollingInterval = transactionPollingInterval;\n      // update defaultBlock\n      methods.forEach(function (method) {\n        method.transactionPollingInterval = transactionPollingInterval;\n      });\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, 'transactionConfirmationBlocks', {\n    get: function () {\n      return transactionConfirmationBlocks;\n    },\n    set: function (val) {\n      transactionConfirmationBlocks = val;\n      // also set on the Contract object\n      _this.Contract.transactionConfirmationBlocks = transactionConfirmationBlocks;\n      // update defaultBlock\n      methods.forEach(function (method) {\n        method.transactionConfirmationBlocks = transactionConfirmationBlocks;\n      });\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, 'transactionBlockTimeout', {\n    get: function () {\n      return transactionBlockTimeout;\n    },\n    set: function (val) {\n      transactionBlockTimeout = val;\n      // also set on the Contract object\n      _this.Contract.transactionBlockTimeout = transactionBlockTimeout;\n      // update defaultBlock\n      methods.forEach(function (method) {\n        method.transactionBlockTimeout = transactionBlockTimeout;\n      });\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, 'blockHeaderTimeout', {\n    get: function () {\n      return blockHeaderTimeout;\n    },\n    set: function (val) {\n      blockHeaderTimeout = val;\n      // also set on the Contract object\n      _this.Contract.blockHeaderTimeout = blockHeaderTimeout;\n      // update defaultBlock\n      methods.forEach(function (method) {\n        method.blockHeaderTimeout = blockHeaderTimeout;\n      });\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, 'defaultAccount', {\n    get: function () {\n      return defaultAccount;\n    },\n    set: function (val) {\n      if (val) {\n        defaultAccount = utils.toChecksumAddress(formatter.inputAddressFormatter(val));\n      }\n      // also set on the Contract object\n      _this.Contract.defaultAccount = defaultAccount;\n      _this.personal.defaultAccount = defaultAccount;\n      // update defaultBlock\n      methods.forEach(function (method) {\n        method.defaultAccount = defaultAccount;\n      });\n      return val;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, 'defaultBlock', {\n    get: function () {\n      return defaultBlock;\n    },\n    set: function (val) {\n      defaultBlock = val;\n      // also set on the Contract object\n      _this.Contract.defaultBlock = defaultBlock;\n      _this.personal.defaultBlock = defaultBlock;\n      // update defaultBlock\n      methods.forEach(function (method) {\n        method.defaultBlock = defaultBlock;\n      });\n      return val;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, 'maxListenersWarningThreshold', {\n    get: function () {\n      return maxListenersWarningThreshold;\n    },\n    set: function (val) {\n      if (_this.currentProvider && _this.currentProvider.setMaxListeners) {\n        maxListenersWarningThreshold = val;\n        _this.currentProvider.setMaxListeners(val);\n      }\n    },\n    enumerable: true\n  });\n  this.clearSubscriptions = _this._requestManager.clearSubscriptions.bind(_this._requestManager);\n  this.removeSubscriptionById = _this._requestManager.removeSubscription.bind(_this._requestManager);\n  // add net\n  this.net = new Net(this);\n  // add chain detection\n  this.net.getNetworkType = getNetworkType.bind(this);\n  // add accounts\n  this.accounts = new Accounts(this);\n  // add personal\n  this.personal = new Personal(this);\n  this.personal.defaultAccount = this.defaultAccount;\n  // set warnings threshold\n  this.maxListenersWarningThreshold = maxListenersWarningThreshold;\n  // create a proxy Contract type for this instance, as a Contract's provider\n  // is stored as a class member rather than an instance variable. If we do\n  // not create this proxy type, changing the provider in one instance of\n  // web3-eth would subsequently change the provider for _all_ contract\n  // instances!\n  var self = this;\n  var Contract = function Contract() {\n    BaseContract.apply(this, arguments);\n    // when Eth.setProvider is called, call packageInit\n    // on all contract instances instantiated via this Eth\n    // instances. This will update the currentProvider for\n    // the contract instances\n    var _this = this;\n    var setProvider = self.setProvider;\n    self.setProvider = function () {\n      setProvider.apply(self, arguments);\n      core.packageInit(_this, [self]);\n    };\n  };\n  Contract.setProvider = function () {\n    BaseContract.setProvider.apply(this, arguments);\n  };\n  // make our proxy Contract inherit from web3-eth-contract so that it has all\n  // the right functionality and so that instanceof and friends work properly\n  Contract.prototype = Object.create(BaseContract.prototype);\n  Contract.prototype.constructor = Contract;\n  // add contract\n  this.Contract = Contract;\n  this.Contract.defaultAccount = this.defaultAccount;\n  this.Contract.defaultBlock = this.defaultBlock;\n  this.Contract.transactionBlockTimeout = this.transactionBlockTimeout;\n  this.Contract.transactionConfirmationBlocks = this.transactionConfirmationBlocks;\n  this.Contract.transactionPollingTimeout = this.transactionPollingTimeout;\n  this.Contract.transactionPollingInterval = this.transactionPollingInterval;\n  this.Contract.blockHeaderTimeout = this.blockHeaderTimeout;\n  this.Contract.handleRevert = this.handleRevert;\n  this.Contract._requestManager = this._requestManager;\n  this.Contract._ethAccounts = this.accounts;\n  this.Contract.currentProvider = this._requestManager.provider;\n  // add IBAN\n  this.Iban = Iban;\n  // add ABI\n  this.abi = abi;\n  // add ENS\n  this.ens = new ENS(this);\n  var methods = [new Method({\n    name: 'getNodeInfo',\n    call: 'web3_clientVersion'\n  }), new Method({\n    name: 'getProtocolVersion',\n    call: 'eth_protocolVersion',\n    params: 0\n  }), new Method({\n    name: 'getCoinbase',\n    call: 'eth_coinbase',\n    params: 0\n  }), new Method({\n    name: 'isMining',\n    call: 'eth_mining',\n    params: 0\n  }), new Method({\n    name: 'getHashrate',\n    call: 'eth_hashrate',\n    params: 0,\n    outputFormatter: utils.hexToNumber\n  }), new Method({\n    name: 'isSyncing',\n    call: 'eth_syncing',\n    params: 0,\n    outputFormatter: formatter.outputSyncingFormatter\n  }), new Method({\n    name: 'getGasPrice',\n    call: 'eth_gasPrice',\n    params: 0,\n    outputFormatter: formatter.outputBigNumberFormatter\n  }), new Method({\n    name: 'getFeeHistory',\n    call: 'eth_feeHistory',\n    params: 3,\n    inputFormatter: [utils.numberToHex, formatter.inputBlockNumberFormatter, null]\n  }), new Method({\n    name: 'getAccounts',\n    call: 'eth_accounts',\n    params: 0,\n    outputFormatter: utils.toChecksumAddress\n  }), new Method({\n    name: 'getBlockNumber',\n    call: 'eth_blockNumber',\n    params: 0,\n    outputFormatter: utils.hexToNumber\n  }), new Method({\n    name: 'getBalance',\n    call: 'eth_getBalance',\n    params: 2,\n    inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter],\n    outputFormatter: formatter.outputBigNumberFormatter\n  }), new Method({\n    name: 'getStorageAt',\n    call: 'eth_getStorageAt',\n    params: 3,\n    inputFormatter: [formatter.inputAddressFormatter, utils.numberToHex, formatter.inputDefaultBlockNumberFormatter]\n  }), new Method({\n    name: 'getCode',\n    call: 'eth_getCode',\n    params: 2,\n    inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter]\n  }), new Method({\n    name: 'getBlock',\n    call: blockCall,\n    params: 2,\n    inputFormatter: [formatter.inputBlockNumberFormatter, function (val) {\n      return !!val;\n    }],\n    outputFormatter: formatter.outputBlockFormatter\n  }), new Method({\n    name: 'getUncle',\n    call: uncleCall,\n    params: 2,\n    inputFormatter: [formatter.inputBlockNumberFormatter, utils.numberToHex],\n    outputFormatter: formatter.outputBlockFormatter\n  }), new Method({\n    name: 'getBlockTransactionCount',\n    call: getBlockTransactionCountCall,\n    params: 1,\n    inputFormatter: [formatter.inputBlockNumberFormatter],\n    outputFormatter: utils.hexToNumber\n  }), new Method({\n    name: 'getBlockUncleCount',\n    call: uncleCountCall,\n    params: 1,\n    inputFormatter: [formatter.inputBlockNumberFormatter],\n    outputFormatter: utils.hexToNumber\n  }), new Method({\n    name: 'getTransaction',\n    call: 'eth_getTransactionByHash',\n    params: 1,\n    inputFormatter: [null],\n    outputFormatter: formatter.outputTransactionFormatter\n  }), new Method({\n    name: 'getTransactionFromBlock',\n    call: transactionFromBlockCall,\n    params: 2,\n    inputFormatter: [formatter.inputBlockNumberFormatter, utils.numberToHex],\n    outputFormatter: formatter.outputTransactionFormatter\n  }), new Method({\n    name: 'getTransactionReceipt',\n    call: 'eth_getTransactionReceipt',\n    params: 1,\n    inputFormatter: [null],\n    outputFormatter: formatter.outputTransactionReceiptFormatter\n  }), new Method({\n    name: 'getTransactionCount',\n    call: 'eth_getTransactionCount',\n    params: 2,\n    inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter],\n    outputFormatter: utils.hexToNumber\n  }), new Method({\n    name: 'sendSignedTransaction',\n    call: 'eth_sendRawTransaction',\n    params: 1,\n    inputFormatter: [null],\n    abiCoder: abi\n  }), new Method({\n    name: 'signTransaction',\n    call: 'eth_signTransaction',\n    params: 1,\n    inputFormatter: [formatter.inputTransactionFormatter]\n  }), new Method({\n    name: 'sendTransaction',\n    call: 'eth_sendTransaction',\n    params: 1,\n    inputFormatter: [formatter.inputTransactionFormatter],\n    abiCoder: abi\n  }), new Method({\n    name: 'sign',\n    call: 'eth_sign',\n    params: 2,\n    inputFormatter: [formatter.inputSignFormatter, formatter.inputAddressFormatter],\n    transformPayload: function (payload) {\n      payload.params.reverse();\n      return payload;\n    }\n  }), new Method({\n    name: 'call',\n    call: 'eth_call',\n    params: 2,\n    inputFormatter: [formatter.inputCallFormatter, formatter.inputDefaultBlockNumberFormatter],\n    abiCoder: abi\n  }), new Method({\n    name: 'estimateGas',\n    call: 'eth_estimateGas',\n    params: 1,\n    inputFormatter: [formatter.inputCallFormatter],\n    outputFormatter: utils.hexToNumber\n  }), new Method({\n    name: 'submitWork',\n    call: 'eth_submitWork',\n    params: 3\n  }), new Method({\n    name: 'getWork',\n    call: 'eth_getWork',\n    params: 0\n  }), new Method({\n    name: 'getPastLogs',\n    call: 'eth_getLogs',\n    params: 1,\n    inputFormatter: [formatter.inputLogFormatter],\n    outputFormatter: formatter.outputLogFormatter\n  }), new Method({\n    name: 'getChainId',\n    call: 'eth_chainId',\n    params: 0,\n    outputFormatter: utils.hexToNumber\n  }), new Method({\n    name: 'requestAccounts',\n    call: 'eth_requestAccounts',\n    params: 0,\n    outputFormatter: utils.toChecksumAddress\n  }), new Method({\n    name: 'getProof',\n    call: 'eth_getProof',\n    params: 3,\n    inputFormatter: [formatter.inputAddressFormatter, formatter.inputStorageKeysFormatter, formatter.inputDefaultBlockNumberFormatter],\n    outputFormatter: formatter.outputProofFormatter\n  }), new Method({\n    name: 'getPendingTransactions',\n    call: 'eth_pendingTransactions',\n    params: 0,\n    outputFormatter: formatter.outputTransactionFormatter\n  }), new Method({\n    name: 'createAccessList',\n    call: 'eth_createAccessList',\n    params: 2,\n    inputFormatter: [formatter.inputTransactionFormatter, formatter.inputDefaultBlockNumberFormatter]\n  }),\n  // subscriptions\n  new Subscriptions({\n    name: 'subscribe',\n    type: 'eth',\n    subscriptions: {\n      'newBlockHeaders': {\n        // TODO rename on RPC side?\n        subscriptionName: 'newHeads',\n        params: 0,\n        outputFormatter: formatter.outputBlockFormatter\n      },\n      'pendingTransactions': {\n        subscriptionName: 'newPendingTransactions',\n        params: 0\n      },\n      'logs': {\n        params: 1,\n        inputFormatter: [formatter.inputLogFormatter],\n        outputFormatter: formatter.outputLogFormatter,\n        // DUBLICATE, also in web3-eth-contract\n        subscriptionHandler: function (output) {\n          if (output.removed) {\n            this.emit('changed', output);\n          } else {\n            this.emit('data', output);\n          }\n          if (typeof this.callback === 'function') {\n            this.callback(null, output, this);\n          }\n        }\n      },\n      'syncing': {\n        params: 0,\n        outputFormatter: formatter.outputSyncingFormatter,\n        subscriptionHandler: function (output) {\n          var _this = this;\n          // fire TRUE at start\n          if (this._isSyncing !== true) {\n            this._isSyncing = true;\n            this.emit('changed', _this._isSyncing);\n            if (typeof this.callback === 'function') {\n              this.callback(null, _this._isSyncing, this);\n            }\n            setTimeout(function () {\n              _this.emit('data', output);\n              if (typeof _this.callback === 'function') {\n                _this.callback(null, output, _this);\n              }\n            }, 0);\n            // fire sync status\n          } else {\n            this.emit('data', output);\n            if (typeof _this.callback === 'function') {\n              this.callback(null, output, this);\n            }\n            // wait for some time before fireing the FALSE\n            clearTimeout(this._isSyncingTimeout);\n            this._isSyncingTimeout = setTimeout(function () {\n              if (output.currentBlock > output.highestBlock - 200) {\n                _this._isSyncing = false;\n                _this.emit('changed', _this._isSyncing);\n                if (typeof _this.callback === 'function') {\n                  _this.callback(null, _this._isSyncing, _this);\n                }\n              }\n            }, 500);\n          }\n        }\n      }\n    }\n  })];\n  methods.forEach(function (method) {\n    method.attachToObject(_this);\n    method.setRequestManager(_this._requestManager, _this.accounts); // second param is the eth.accounts module (necessary for signing transactions locally)\n    method.defaultBlock = _this.defaultBlock;\n    method.defaultAccount = _this.defaultAccount;\n    method.transactionBlockTimeout = _this.transactionBlockTimeout;\n    method.transactionConfirmationBlocks = _this.transactionConfirmationBlocks;\n    method.transactionPollingTimeout = _this.transactionPollingTimeout;\n    method.transactionPollingInterval = _this.transactionPollingInterval;\n    method.handleRevert = _this.handleRevert;\n  });\n};\n// Adds the static givenProvider and providers property to the Eth module\ncore.addProviders(Eth);\nmodule.exports = Eth;","map":{"version":3,"names":["core","require","helpers","Subscriptions","subscriptions","Method","utils","Net","ENS","Personal","BaseContract","Iban","Accounts","abi","getNetworkType","formatter","formatters","blockCall","args","indexOf","transactionFromBlockCall","uncleCall","getBlockTransactionCountCall","uncleCountCall","Eth","_this","packageInit","arguments","setRequestManager","manager","net","personal","accounts","Contract","_requestManager","currentProvider","_provider","setProvider","apply","ens","_detectedAddress","_lastSyncCheck","handleRevert","defaultAccount","defaultBlock","transactionBlockTimeout","transactionConfirmationBlocks","transactionPollingTimeout","transactionPollingInterval","blockHeaderTimeout","maxListenersWarningThreshold","defaultChain","defaultHardfork","defaultCommon","Object","defineProperty","get","set","val","methods","forEach","method","enumerable","toChecksumAddress","inputAddressFormatter","setMaxListeners","clearSubscriptions","bind","removeSubscriptionById","removeSubscription","self","prototype","create","constructor","_ethAccounts","provider","name","call","params","outputFormatter","hexToNumber","outputSyncingFormatter","outputBigNumberFormatter","inputFormatter","numberToHex","inputBlockNumberFormatter","inputDefaultBlockNumberFormatter","outputBlockFormatter","outputTransactionFormatter","outputTransactionReceiptFormatter","abiCoder","inputTransactionFormatter","inputSignFormatter","transformPayload","payload","reverse","inputCallFormatter","inputLogFormatter","outputLogFormatter","inputStorageKeysFormatter","outputProofFormatter","type","subscriptionName","subscriptionHandler","output","removed","emit","callback","_isSyncing","setTimeout","clearTimeout","_isSyncingTimeout","currentBlock","highestBlock","attachToObject","addProviders","module","exports"],"sources":["C:/frontend/node_modules/web3-eth/lib/index.js"],"sourcesContent":["/*\r\n This file is part of web3.js.\r\n\r\n web3.js is free software: you can redistribute it and/or modify\r\n it under the terms of the GNU Lesser General Public License as published by\r\n the Free Software Foundation, either version 3 of the License, or\r\n (at your option) any later version.\r\n\r\n web3.js is distributed in the hope that it will be useful,\r\n but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n GNU Lesser General Public License for more details.\r\n\r\n You should have received a copy of the GNU Lesser General Public License\r\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n/**\r\n * @file index.js\r\n * @author Fabian Vogelsteller <fabian@ethereum.org>\r\n * @date 2017\r\n */\r\n\"use strict\";\r\nvar core = require('web3-core');\r\nvar helpers = require('web3-core-helpers');\r\nvar Subscriptions = require('web3-core-subscriptions').subscriptions;\r\nvar Method = require('web3-core-method');\r\nvar utils = require('web3-utils');\r\nvar Net = require('web3-net');\r\nvar ENS = require('web3-eth-ens');\r\nvar Personal = require('web3-eth-personal');\r\nvar BaseContract = require('web3-eth-contract');\r\nvar Iban = require('web3-eth-iban');\r\nvar Accounts = require('web3-eth-accounts');\r\nvar abi = require('web3-eth-abi');\r\nvar getNetworkType = require('./getNetworkType.js');\r\nvar formatter = helpers.formatters;\r\nvar blockCall = function (args) {\r\n    return (typeof args[0] === 'string' && args[0].indexOf('0x') === 0) ? \"eth_getBlockByHash\" : \"eth_getBlockByNumber\";\r\n};\r\nvar transactionFromBlockCall = function (args) {\r\n    return (typeof args[0] === 'string' && args[0].indexOf('0x') === 0) ? 'eth_getTransactionByBlockHashAndIndex' : 'eth_getTransactionByBlockNumberAndIndex';\r\n};\r\nvar uncleCall = function (args) {\r\n    return (typeof args[0] === 'string' && args[0].indexOf('0x') === 0) ? 'eth_getUncleByBlockHashAndIndex' : 'eth_getUncleByBlockNumberAndIndex';\r\n};\r\nvar getBlockTransactionCountCall = function (args) {\r\n    return (typeof args[0] === 'string' && args[0].indexOf('0x') === 0) ? 'eth_getBlockTransactionCountByHash' : 'eth_getBlockTransactionCountByNumber';\r\n};\r\nvar uncleCountCall = function (args) {\r\n    return (typeof args[0] === 'string' && args[0].indexOf('0x') === 0) ? 'eth_getUncleCountByBlockHash' : 'eth_getUncleCountByBlockNumber';\r\n};\r\nvar Eth = function Eth() {\r\n    var _this = this;\r\n    // sets _requestmanager\r\n    core.packageInit(this, arguments);\r\n    // overwrite package setRequestManager\r\n    var setRequestManager = this.setRequestManager;\r\n    this.setRequestManager = function (manager) {\r\n        setRequestManager(manager);\r\n        _this.net.setRequestManager(manager);\r\n        _this.personal.setRequestManager(manager);\r\n        _this.accounts.setRequestManager(manager);\r\n        _this.Contract._requestManager = _this._requestManager;\r\n        _this.Contract.currentProvider = _this._provider;\r\n        return true;\r\n    };\r\n    // overwrite setProvider\r\n    var setProvider = this.setProvider;\r\n    this.setProvider = function () {\r\n        setProvider.apply(_this, arguments);\r\n        _this.setRequestManager(_this._requestManager);\r\n        // Set detectedAddress/lastSyncCheck back to null because the provider could be connected to a different chain now\r\n        _this.ens._detectedAddress = null;\r\n        _this.ens._lastSyncCheck = null;\r\n    };\r\n    var handleRevert = false;\r\n    var defaultAccount = null;\r\n    var defaultBlock = 'latest';\r\n    var transactionBlockTimeout = 50;\r\n    var transactionConfirmationBlocks = 24;\r\n    var transactionPollingTimeout = 750;\r\n    var transactionPollingInterval = 1000;\r\n    var blockHeaderTimeout = 10; // 10 seconds\r\n    var maxListenersWarningThreshold = 100;\r\n    var defaultChain, defaultHardfork, defaultCommon;\r\n    Object.defineProperty(this, 'handleRevert', {\r\n        get: function () {\r\n            return handleRevert;\r\n        },\r\n        set: function (val) {\r\n            handleRevert = val;\r\n            // also set on the Contract object\r\n            _this.Contract.handleRevert = handleRevert;\r\n            // update handleRevert\r\n            methods.forEach(function (method) {\r\n                method.handleRevert = handleRevert;\r\n            });\r\n        },\r\n        enumerable: true\r\n    });\r\n    Object.defineProperty(this, 'defaultCommon', {\r\n        get: function () {\r\n            return defaultCommon;\r\n        },\r\n        set: function (val) {\r\n            defaultCommon = val;\r\n            // also set on the Contract object\r\n            _this.Contract.defaultCommon = defaultCommon;\r\n            // update defaultBlock\r\n            methods.forEach(function (method) {\r\n                method.defaultCommon = defaultCommon;\r\n            });\r\n        },\r\n        enumerable: true\r\n    });\r\n    Object.defineProperty(this, 'defaultHardfork', {\r\n        get: function () {\r\n            return defaultHardfork;\r\n        },\r\n        set: function (val) {\r\n            defaultHardfork = val;\r\n            // also set on the Contract object\r\n            _this.Contract.defaultHardfork = defaultHardfork;\r\n            // update defaultBlock\r\n            methods.forEach(function (method) {\r\n                method.defaultHardfork = defaultHardfork;\r\n            });\r\n        },\r\n        enumerable: true\r\n    });\r\n    Object.defineProperty(this, 'defaultChain', {\r\n        get: function () {\r\n            return defaultChain;\r\n        },\r\n        set: function (val) {\r\n            defaultChain = val;\r\n            // also set on the Contract object\r\n            _this.Contract.defaultChain = defaultChain;\r\n            // update defaultBlock\r\n            methods.forEach(function (method) {\r\n                method.defaultChain = defaultChain;\r\n            });\r\n        },\r\n        enumerable: true\r\n    });\r\n    Object.defineProperty(this, 'transactionPollingTimeout', {\r\n        get: function () {\r\n            return transactionPollingTimeout;\r\n        },\r\n        set: function (val) {\r\n            transactionPollingTimeout = val;\r\n            // also set on the Contract object\r\n            _this.Contract.transactionPollingTimeout = transactionPollingTimeout;\r\n            // update defaultBlock\r\n            methods.forEach(function (method) {\r\n                method.transactionPollingTimeout = transactionPollingTimeout;\r\n            });\r\n        },\r\n        enumerable: true\r\n    });\r\n    Object.defineProperty(this, 'transactionPollingInterval', {\r\n        get: function () {\r\n            return transactionPollingInterval;\r\n        },\r\n        set: function (val) {\r\n            transactionPollingInterval = val;\r\n            // also set on the Contract object\r\n            _this.Contract.transactionPollingInterval = transactionPollingInterval;\r\n            // update defaultBlock\r\n            methods.forEach(function (method) {\r\n                method.transactionPollingInterval = transactionPollingInterval;\r\n            });\r\n        },\r\n        enumerable: true\r\n    });\r\n    Object.defineProperty(this, 'transactionConfirmationBlocks', {\r\n        get: function () {\r\n            return transactionConfirmationBlocks;\r\n        },\r\n        set: function (val) {\r\n            transactionConfirmationBlocks = val;\r\n            // also set on the Contract object\r\n            _this.Contract.transactionConfirmationBlocks = transactionConfirmationBlocks;\r\n            // update defaultBlock\r\n            methods.forEach(function (method) {\r\n                method.transactionConfirmationBlocks = transactionConfirmationBlocks;\r\n            });\r\n        },\r\n        enumerable: true\r\n    });\r\n    Object.defineProperty(this, 'transactionBlockTimeout', {\r\n        get: function () {\r\n            return transactionBlockTimeout;\r\n        },\r\n        set: function (val) {\r\n            transactionBlockTimeout = val;\r\n            // also set on the Contract object\r\n            _this.Contract.transactionBlockTimeout = transactionBlockTimeout;\r\n            // update defaultBlock\r\n            methods.forEach(function (method) {\r\n                method.transactionBlockTimeout = transactionBlockTimeout;\r\n            });\r\n        },\r\n        enumerable: true\r\n    });\r\n    Object.defineProperty(this, 'blockHeaderTimeout', {\r\n        get: function () {\r\n            return blockHeaderTimeout;\r\n        },\r\n        set: function (val) {\r\n            blockHeaderTimeout = val;\r\n            // also set on the Contract object\r\n            _this.Contract.blockHeaderTimeout = blockHeaderTimeout;\r\n            // update defaultBlock\r\n            methods.forEach(function (method) {\r\n                method.blockHeaderTimeout = blockHeaderTimeout;\r\n            });\r\n        },\r\n        enumerable: true\r\n    });\r\n    Object.defineProperty(this, 'defaultAccount', {\r\n        get: function () {\r\n            return defaultAccount;\r\n        },\r\n        set: function (val) {\r\n            if (val) {\r\n                defaultAccount = utils.toChecksumAddress(formatter.inputAddressFormatter(val));\r\n            }\r\n            // also set on the Contract object\r\n            _this.Contract.defaultAccount = defaultAccount;\r\n            _this.personal.defaultAccount = defaultAccount;\r\n            // update defaultBlock\r\n            methods.forEach(function (method) {\r\n                method.defaultAccount = defaultAccount;\r\n            });\r\n            return val;\r\n        },\r\n        enumerable: true\r\n    });\r\n    Object.defineProperty(this, 'defaultBlock', {\r\n        get: function () {\r\n            return defaultBlock;\r\n        },\r\n        set: function (val) {\r\n            defaultBlock = val;\r\n            // also set on the Contract object\r\n            _this.Contract.defaultBlock = defaultBlock;\r\n            _this.personal.defaultBlock = defaultBlock;\r\n            // update defaultBlock\r\n            methods.forEach(function (method) {\r\n                method.defaultBlock = defaultBlock;\r\n            });\r\n            return val;\r\n        },\r\n        enumerable: true\r\n    });\r\n    Object.defineProperty(this, 'maxListenersWarningThreshold', {\r\n        get: function () {\r\n            return maxListenersWarningThreshold;\r\n        },\r\n        set: function (val) {\r\n            if (_this.currentProvider && _this.currentProvider.setMaxListeners) {\r\n                maxListenersWarningThreshold = val;\r\n                _this.currentProvider.setMaxListeners(val);\r\n            }\r\n        },\r\n        enumerable: true\r\n    });\r\n    this.clearSubscriptions = _this._requestManager.clearSubscriptions.bind(_this._requestManager);\r\n    this.removeSubscriptionById = _this._requestManager.removeSubscription.bind(_this._requestManager);\r\n    // add net\r\n    this.net = new Net(this);\r\n    // add chain detection\r\n    this.net.getNetworkType = getNetworkType.bind(this);\r\n    // add accounts\r\n    this.accounts = new Accounts(this);\r\n    // add personal\r\n    this.personal = new Personal(this);\r\n    this.personal.defaultAccount = this.defaultAccount;\r\n    // set warnings threshold\r\n    this.maxListenersWarningThreshold = maxListenersWarningThreshold;\r\n    // create a proxy Contract type for this instance, as a Contract's provider\r\n    // is stored as a class member rather than an instance variable. If we do\r\n    // not create this proxy type, changing the provider in one instance of\r\n    // web3-eth would subsequently change the provider for _all_ contract\r\n    // instances!\r\n    var self = this;\r\n    var Contract = function Contract() {\r\n        BaseContract.apply(this, arguments);\r\n        // when Eth.setProvider is called, call packageInit\r\n        // on all contract instances instantiated via this Eth\r\n        // instances. This will update the currentProvider for\r\n        // the contract instances\r\n        var _this = this;\r\n        var setProvider = self.setProvider;\r\n        self.setProvider = function () {\r\n            setProvider.apply(self, arguments);\r\n            core.packageInit(_this, [self]);\r\n        };\r\n    };\r\n    Contract.setProvider = function () {\r\n        BaseContract.setProvider.apply(this, arguments);\r\n    };\r\n    // make our proxy Contract inherit from web3-eth-contract so that it has all\r\n    // the right functionality and so that instanceof and friends work properly\r\n    Contract.prototype = Object.create(BaseContract.prototype);\r\n    Contract.prototype.constructor = Contract;\r\n    // add contract\r\n    this.Contract = Contract;\r\n    this.Contract.defaultAccount = this.defaultAccount;\r\n    this.Contract.defaultBlock = this.defaultBlock;\r\n    this.Contract.transactionBlockTimeout = this.transactionBlockTimeout;\r\n    this.Contract.transactionConfirmationBlocks = this.transactionConfirmationBlocks;\r\n    this.Contract.transactionPollingTimeout = this.transactionPollingTimeout;\r\n    this.Contract.transactionPollingInterval = this.transactionPollingInterval;\r\n    this.Contract.blockHeaderTimeout = this.blockHeaderTimeout;\r\n    this.Contract.handleRevert = this.handleRevert;\r\n    this.Contract._requestManager = this._requestManager;\r\n    this.Contract._ethAccounts = this.accounts;\r\n    this.Contract.currentProvider = this._requestManager.provider;\r\n    // add IBAN\r\n    this.Iban = Iban;\r\n    // add ABI\r\n    this.abi = abi;\r\n    // add ENS\r\n    this.ens = new ENS(this);\r\n    var methods = [\r\n        new Method({\r\n            name: 'getNodeInfo',\r\n            call: 'web3_clientVersion'\r\n        }),\r\n        new Method({\r\n            name: 'getProtocolVersion',\r\n            call: 'eth_protocolVersion',\r\n            params: 0\r\n        }),\r\n        new Method({\r\n            name: 'getCoinbase',\r\n            call: 'eth_coinbase',\r\n            params: 0\r\n        }),\r\n        new Method({\r\n            name: 'isMining',\r\n            call: 'eth_mining',\r\n            params: 0\r\n        }),\r\n        new Method({\r\n            name: 'getHashrate',\r\n            call: 'eth_hashrate',\r\n            params: 0,\r\n            outputFormatter: utils.hexToNumber\r\n        }),\r\n        new Method({\r\n            name: 'isSyncing',\r\n            call: 'eth_syncing',\r\n            params: 0,\r\n            outputFormatter: formatter.outputSyncingFormatter\r\n        }),\r\n        new Method({\r\n            name: 'getGasPrice',\r\n            call: 'eth_gasPrice',\r\n            params: 0,\r\n            outputFormatter: formatter.outputBigNumberFormatter\r\n        }),\r\n        new Method({\r\n            name: 'getFeeHistory',\r\n            call: 'eth_feeHistory',\r\n            params: 3,\r\n            inputFormatter: [utils.numberToHex, formatter.inputBlockNumberFormatter, null]\r\n        }),\r\n        new Method({\r\n            name: 'getAccounts',\r\n            call: 'eth_accounts',\r\n            params: 0,\r\n            outputFormatter: utils.toChecksumAddress\r\n        }),\r\n        new Method({\r\n            name: 'getBlockNumber',\r\n            call: 'eth_blockNumber',\r\n            params: 0,\r\n            outputFormatter: utils.hexToNumber\r\n        }),\r\n        new Method({\r\n            name: 'getBalance',\r\n            call: 'eth_getBalance',\r\n            params: 2,\r\n            inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter],\r\n            outputFormatter: formatter.outputBigNumberFormatter\r\n        }),\r\n        new Method({\r\n            name: 'getStorageAt',\r\n            call: 'eth_getStorageAt',\r\n            params: 3,\r\n            inputFormatter: [formatter.inputAddressFormatter, utils.numberToHex, formatter.inputDefaultBlockNumberFormatter]\r\n        }),\r\n        new Method({\r\n            name: 'getCode',\r\n            call: 'eth_getCode',\r\n            params: 2,\r\n            inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter]\r\n        }),\r\n        new Method({\r\n            name: 'getBlock',\r\n            call: blockCall,\r\n            params: 2,\r\n            inputFormatter: [formatter.inputBlockNumberFormatter, function (val) { return !!val; }],\r\n            outputFormatter: formatter.outputBlockFormatter\r\n        }),\r\n        new Method({\r\n            name: 'getUncle',\r\n            call: uncleCall,\r\n            params: 2,\r\n            inputFormatter: [formatter.inputBlockNumberFormatter, utils.numberToHex],\r\n            outputFormatter: formatter.outputBlockFormatter,\r\n        }),\r\n        new Method({\r\n            name: 'getBlockTransactionCount',\r\n            call: getBlockTransactionCountCall,\r\n            params: 1,\r\n            inputFormatter: [formatter.inputBlockNumberFormatter],\r\n            outputFormatter: utils.hexToNumber\r\n        }),\r\n        new Method({\r\n            name: 'getBlockUncleCount',\r\n            call: uncleCountCall,\r\n            params: 1,\r\n            inputFormatter: [formatter.inputBlockNumberFormatter],\r\n            outputFormatter: utils.hexToNumber\r\n        }),\r\n        new Method({\r\n            name: 'getTransaction',\r\n            call: 'eth_getTransactionByHash',\r\n            params: 1,\r\n            inputFormatter: [null],\r\n            outputFormatter: formatter.outputTransactionFormatter\r\n        }),\r\n        new Method({\r\n            name: 'getTransactionFromBlock',\r\n            call: transactionFromBlockCall,\r\n            params: 2,\r\n            inputFormatter: [formatter.inputBlockNumberFormatter, utils.numberToHex],\r\n            outputFormatter: formatter.outputTransactionFormatter\r\n        }),\r\n        new Method({\r\n            name: 'getTransactionReceipt',\r\n            call: 'eth_getTransactionReceipt',\r\n            params: 1,\r\n            inputFormatter: [null],\r\n            outputFormatter: formatter.outputTransactionReceiptFormatter\r\n        }),\r\n        new Method({\r\n            name: 'getTransactionCount',\r\n            call: 'eth_getTransactionCount',\r\n            params: 2,\r\n            inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter],\r\n            outputFormatter: utils.hexToNumber\r\n        }),\r\n        new Method({\r\n            name: 'sendSignedTransaction',\r\n            call: 'eth_sendRawTransaction',\r\n            params: 1,\r\n            inputFormatter: [null],\r\n            abiCoder: abi\r\n        }),\r\n        new Method({\r\n            name: 'signTransaction',\r\n            call: 'eth_signTransaction',\r\n            params: 1,\r\n            inputFormatter: [formatter.inputTransactionFormatter]\r\n        }),\r\n        new Method({\r\n            name: 'sendTransaction',\r\n            call: 'eth_sendTransaction',\r\n            params: 1,\r\n            inputFormatter: [formatter.inputTransactionFormatter],\r\n            abiCoder: abi\r\n        }),\r\n        new Method({\r\n            name: 'sign',\r\n            call: 'eth_sign',\r\n            params: 2,\r\n            inputFormatter: [formatter.inputSignFormatter, formatter.inputAddressFormatter],\r\n            transformPayload: function (payload) {\r\n                payload.params.reverse();\r\n                return payload;\r\n            }\r\n        }),\r\n        new Method({\r\n            name: 'call',\r\n            call: 'eth_call',\r\n            params: 2,\r\n            inputFormatter: [formatter.inputCallFormatter, formatter.inputDefaultBlockNumberFormatter],\r\n            abiCoder: abi\r\n        }),\r\n        new Method({\r\n            name: 'estimateGas',\r\n            call: 'eth_estimateGas',\r\n            params: 1,\r\n            inputFormatter: [formatter.inputCallFormatter],\r\n            outputFormatter: utils.hexToNumber\r\n        }),\r\n        new Method({\r\n            name: 'submitWork',\r\n            call: 'eth_submitWork',\r\n            params: 3\r\n        }),\r\n        new Method({\r\n            name: 'getWork',\r\n            call: 'eth_getWork',\r\n            params: 0\r\n        }),\r\n        new Method({\r\n            name: 'getPastLogs',\r\n            call: 'eth_getLogs',\r\n            params: 1,\r\n            inputFormatter: [formatter.inputLogFormatter],\r\n            outputFormatter: formatter.outputLogFormatter\r\n        }),\r\n        new Method({\r\n            name: 'getChainId',\r\n            call: 'eth_chainId',\r\n            params: 0,\r\n            outputFormatter: utils.hexToNumber\r\n        }),\r\n        new Method({\r\n            name: 'requestAccounts',\r\n            call: 'eth_requestAccounts',\r\n            params: 0,\r\n            outputFormatter: utils.toChecksumAddress\r\n        }),\r\n        new Method({\r\n            name: 'getProof',\r\n            call: 'eth_getProof',\r\n            params: 3,\r\n            inputFormatter: [formatter.inputAddressFormatter, formatter.inputStorageKeysFormatter, formatter.inputDefaultBlockNumberFormatter],\r\n            outputFormatter: formatter.outputProofFormatter\r\n        }),\r\n        new Method({\r\n            name: 'getPendingTransactions',\r\n            call: 'eth_pendingTransactions',\r\n            params: 0,\r\n            outputFormatter: formatter.outputTransactionFormatter\r\n        }),\r\n        new Method({\r\n            name: 'createAccessList',\r\n            call: 'eth_createAccessList',\r\n            params: 2,\r\n            inputFormatter: [formatter.inputTransactionFormatter, formatter.inputDefaultBlockNumberFormatter],\r\n        }),\r\n        // subscriptions\r\n        new Subscriptions({\r\n            name: 'subscribe',\r\n            type: 'eth',\r\n            subscriptions: {\r\n                'newBlockHeaders': {\r\n                    // TODO rename on RPC side?\r\n                    subscriptionName: 'newHeads',\r\n                    params: 0,\r\n                    outputFormatter: formatter.outputBlockFormatter\r\n                },\r\n                'pendingTransactions': {\r\n                    subscriptionName: 'newPendingTransactions',\r\n                    params: 0\r\n                },\r\n                'logs': {\r\n                    params: 1,\r\n                    inputFormatter: [formatter.inputLogFormatter],\r\n                    outputFormatter: formatter.outputLogFormatter,\r\n                    // DUBLICATE, also in web3-eth-contract\r\n                    subscriptionHandler: function (output) {\r\n                        if (output.removed) {\r\n                            this.emit('changed', output);\r\n                        }\r\n                        else {\r\n                            this.emit('data', output);\r\n                        }\r\n                        if (typeof this.callback === 'function') {\r\n                            this.callback(null, output, this);\r\n                        }\r\n                    }\r\n                },\r\n                'syncing': {\r\n                    params: 0,\r\n                    outputFormatter: formatter.outputSyncingFormatter,\r\n                    subscriptionHandler: function (output) {\r\n                        var _this = this;\r\n                        // fire TRUE at start\r\n                        if (this._isSyncing !== true) {\r\n                            this._isSyncing = true;\r\n                            this.emit('changed', _this._isSyncing);\r\n                            if (typeof this.callback === 'function') {\r\n                                this.callback(null, _this._isSyncing, this);\r\n                            }\r\n                            setTimeout(function () {\r\n                                _this.emit('data', output);\r\n                                if (typeof _this.callback === 'function') {\r\n                                    _this.callback(null, output, _this);\r\n                                }\r\n                            }, 0);\r\n                            // fire sync status\r\n                        }\r\n                        else {\r\n                            this.emit('data', output);\r\n                            if (typeof _this.callback === 'function') {\r\n                                this.callback(null, output, this);\r\n                            }\r\n                            // wait for some time before fireing the FALSE\r\n                            clearTimeout(this._isSyncingTimeout);\r\n                            this._isSyncingTimeout = setTimeout(function () {\r\n                                if (output.currentBlock > output.highestBlock - 200) {\r\n                                    _this._isSyncing = false;\r\n                                    _this.emit('changed', _this._isSyncing);\r\n                                    if (typeof _this.callback === 'function') {\r\n                                        _this.callback(null, _this._isSyncing, _this);\r\n                                    }\r\n                                }\r\n                            }, 500);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    ];\r\n    methods.forEach(function (method) {\r\n        method.attachToObject(_this);\r\n        method.setRequestManager(_this._requestManager, _this.accounts); // second param is the eth.accounts module (necessary for signing transactions locally)\r\n        method.defaultBlock = _this.defaultBlock;\r\n        method.defaultAccount = _this.defaultAccount;\r\n        method.transactionBlockTimeout = _this.transactionBlockTimeout;\r\n        method.transactionConfirmationBlocks = _this.transactionConfirmationBlocks;\r\n        method.transactionPollingTimeout = _this.transactionPollingTimeout;\r\n        method.transactionPollingInterval = _this.transactionPollingInterval;\r\n        method.handleRevert = _this.handleRevert;\r\n    });\r\n};\r\n// Adds the static givenProvider and providers property to the Eth module\r\ncore.addProviders(Eth);\r\nmodule.exports = Eth;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}