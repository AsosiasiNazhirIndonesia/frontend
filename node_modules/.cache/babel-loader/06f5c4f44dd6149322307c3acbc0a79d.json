{"ast":null,"code":"'use strict';\n\nconst map = require('lodash.map');\nconst extend = require('xtend');\nconst codec = require('./codec');\nconst protocols = require('./protocols-table');\nconst varint = require('varint');\nconst bs58 = require('bs58');\nconst withIs = require('class-is');\nconst NotImplemented = new Error('Sorry, Not Implemented Yet.');\n\n/**\r\n * Creates a [multiaddr](https://github.com/multiformats/multiaddr) from\r\n * a Buffer, String or another Multiaddr instance\r\n * public key.\r\n * @class Multiaddr\r\n * @param {(String|Buffer|Multiaddr)} addr - If String or Buffer, needs to adhere\r\n * to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\r\n * @example\r\n * Multiaddr('/ip4/127.0.0.1/tcp/4001')\r\n * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\r\n */\nconst Multiaddr = withIs.proto(function (addr) {\n  if (!(this instanceof Multiaddr)) {\n    return new Multiaddr(addr);\n  }\n\n  // default\n  if (addr == null) {\n    addr = '';\n  }\n  if (addr instanceof Buffer) {\n    /**\r\n     * @type {Buffer} - The raw bytes representing this multiaddress\r\n     */\n    this.buffer = codec.fromBuffer(addr);\n  } else if (typeof addr === 'string' || addr instanceof String) {\n    if (addr.length > 0 && addr.charAt(0) !== '/') {\n      throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`);\n    }\n    this.buffer = codec.fromString(addr);\n  } else if (addr.buffer && addr.protos && addr.protoCodes) {\n    // Multiaddr\n    this.buffer = codec.fromBuffer(addr.buffer); // validate + copy buffer\n  } else {\n    throw new Error('addr must be a string, Buffer, or another Multiaddr');\n  }\n}, {\n  className: 'Multiaddr',\n  symbolName: '@multiformats/js-multiaddr/multiaddr'\n});\n\n/**\r\n * Returns Multiaddr as a String\r\n *\r\n * @returns {String}\r\n * @example\r\n * Multiaddr('/ip4/127.0.0.1/tcp/4001').toString()\r\n * // '/ip4/127.0.0.1/tcp/4001'\r\n */\nMultiaddr.prototype.toString = function toString() {\n  return codec.bufferToString(this.buffer);\n};\n\n/**\r\n * Returns Multiaddr as a convinient options object to be used with net.createConnection\r\n *\r\n * @returns {{family: String, host: String, transport: String, port: String}}\r\n * @example\r\n * Multiaddr('/ip4/127.0.0.1/tcp/4001').toOptions()\r\n * // { family: 'ipv4', host: '127.0.0.1', transport: 'tcp', port: '4001' }\r\n */\nMultiaddr.prototype.toOptions = function toOptions() {\n  const opts = {};\n  const parsed = this.toString().split('/');\n  opts.family = parsed[1] === 'ip4' ? 'ipv4' : 'ipv6';\n  opts.host = parsed[2];\n  opts.transport = parsed[3];\n  opts.port = parsed[4];\n  return opts;\n};\n\n/**\r\n * Returns Multiaddr as a human-readable string\r\n *\r\n * @returns {String}\r\n * @example\r\n * Multiaddr('/ip4/127.0.0.1/tcp/4001').inspect()\r\n * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'\r\n */\nMultiaddr.prototype.inspect = function inspect() {\n  return '<Multiaddr ' + this.buffer.toString('hex') + ' - ' + codec.bufferToString(this.buffer) + '>';\n};\n\n/**\r\n * Returns the protocols the Multiaddr is defined with, as an array of objects, in\r\n * left-to-right order. Each object contains the protocol code, protocol name,\r\n * and the size of its address space in bits.\r\n * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\r\n *\r\n * @returns {Array.<Object>} protocols - All the protocols the address is composed of\r\n * @returns {Number} protocols[].code\r\n * @returns {Number} protocols[].size\r\n * @returns {String} protocols[].name\r\n * @example\r\n * Multiaddr('/ip4/127.0.0.1/tcp/4001').protos()\r\n * // [ { code: 4, size: 32, name: 'ip4' },\r\n * //   { code: 6, size: 16, name: 'tcp' } ]\r\n */\nMultiaddr.prototype.protos = function protos() {\n  return map(this.protoCodes(), function (code) {\n    return extend(protocols(code));\n    // copy to prevent users from modifying the internal objs.\n  });\n};\n\n/**\r\n * Returns the codes of the protocols in left-to-right order.\r\n * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\r\n *\r\n * @returns {Array.<Number>} protocol codes\r\n * @example\r\n * Multiaddr('/ip4/127.0.0.1/tcp/4001').protoCodes()\r\n * // [ 4, 6 ]\r\n */\nMultiaddr.prototype.protoCodes = function protoCodes() {\n  const codes = [];\n  const buf = this.buffer;\n  let i = 0;\n  while (i < buf.length) {\n    const code = varint.decode(buf, i);\n    const n = varint.decode.bytes;\n    const p = protocols(code);\n    const size = codec.sizeForAddr(p, buf.slice(i + n));\n    i += size + n;\n    codes.push(code);\n  }\n  return codes;\n};\n\n/**\r\n * Returns the names of the protocols in left-to-right order.\r\n * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\r\n *\r\n * @return {Array.<String>} protocol names\r\n * @example\r\n * Multiaddr('/ip4/127.0.0.1/tcp/4001').protoNames()\r\n * // [ 'ip4', 'tcp' ]\r\n */\nMultiaddr.prototype.protoNames = function protoNames() {\n  return map(this.protos(), function (proto) {\n    return proto.name;\n  });\n};\n\n/**\r\n * Returns a tuple of parts\r\n *\r\n * @return {Array.<Array>} tuples\r\n * @return {Number} tuples[].0 code of protocol\r\n * @return {Buffer} tuples[].1 contents of address\r\n * @example\r\n * Multiaddr(\"/ip4/127.0.0.1/tcp/4001\").tuples()\r\n * // [ [ 4, <Buffer 7f 00 00 01> ], [ 6, <Buffer 0f a1> ] ]\r\n */\nMultiaddr.prototype.tuples = function tuples() {\n  return codec.bufferToTuples(this.buffer);\n};\n\n/**\r\n * Returns a tuple of string/number parts\r\n *\r\n * @return {Array.<Array>} tuples\r\n * @return {Number} tuples[].0 code of protocol\r\n * @return {(String|Number)} tuples[].1 contents of address\r\n * @example\r\n * Multiaddr(\"/ip4/127.0.0.1/tcp/4001\").stringTuples()\r\n * // [ [ 4, '127.0.0.1' ], [ 6, 4001 ] ]\r\n */\nMultiaddr.prototype.stringTuples = function stringTuples() {\n  const t = codec.bufferToTuples(this.buffer);\n  return codec.tuplesToStringTuples(t);\n};\n\n/**\r\n * Encapsulates a Multiaddr in another Multiaddr\r\n *\r\n * @param {Multiaddr} addr - Multiaddr to add into this Multiaddr\r\n * @return {Multiaddr}\r\n * @example\r\n * const mh1 = Multiaddr('/ip4/8.8.8.8/tcp/1080')\r\n * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\r\n *\r\n * const mh2 = Multiaddr('/ip4/127.0.0.1/tcp/4001')\r\n * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\r\n *\r\n * const mh3 = mh1.encapsulate(mh2)\r\n * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>\r\n *\r\n * mh3.toString()\r\n * // '/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001'\r\n */\nMultiaddr.prototype.encapsulate = function encapsulate(addr) {\n  addr = Multiaddr(addr);\n  return Multiaddr(this.toString() + addr.toString());\n};\n\n/**\r\n * Decapsulates a Multiaddr from another Multiaddr\r\n *\r\n * @param {Multiaddr} addr - Multiaddr to remove from this Multiaddr\r\n * @return {Multiaddr}\r\n * @example\r\n * const mh1 = Multiaddr('/ip4/8.8.8.8/tcp/1080')\r\n * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\r\n *\r\n * const mh2 = Multiaddr('/ip4/127.0.0.1/tcp/4001')\r\n * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\r\n *\r\n * const mh3 = mh1.encapsulate(mh2)\r\n * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>\r\n *\r\n * mh3.decapsulate(mh2).toString()\r\n * // '/ip4/8.8.8.8/tcp/1080'\r\n */\nMultiaddr.prototype.decapsulate = function decapsulate(addr) {\n  addr = addr.toString();\n  const s = this.toString();\n  const i = s.lastIndexOf(addr);\n  if (i < 0) {\n    throw new Error('Address ' + this + ' does not contain subaddress: ' + addr);\n  }\n  return Multiaddr(s.slice(0, i));\n};\n\n/**\r\n * Extract the peerId if the multiaddr contains one\r\n *\r\n * @return {String|null} peerId - The id of the peer or null if invalid or missing from the ma\r\n * @example\r\n * const mh1 = Multiaddr('/ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string')\r\n * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string>\r\n *\r\n * // should return QmValidBase58string or null if the id is missing or invalid\r\n * const peerId = mh1.getPeerId()\r\n */\nMultiaddr.prototype.getPeerId = function getPeerId() {\n  let b58str = null;\n  try {\n    b58str = this.stringTuples().filter(tuple => {\n      if (tuple[0] === protocols.names['ipfs'].code) {\n        return true;\n      }\n    })[0][1];\n    bs58.decode(b58str);\n  } catch (e) {\n    b58str = null;\n  }\n  return b58str;\n};\n\n/**\r\n * Checks if two Multiaddrs are the same\r\n *\r\n * @param {Multiaddr} addr\r\n * @return {Bool}\r\n * @example\r\n * const mh1 = Multiaddr('/ip4/8.8.8.8/tcp/1080')\r\n * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\r\n *\r\n * const mh2 = Multiaddr('/ip4/127.0.0.1/tcp/4001')\r\n * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\r\n *\r\n * mh1.equals(mh1)\r\n * // true\r\n *\r\n * mh1.equals(mh2)\r\n * // false\r\n */\nMultiaddr.prototype.equals = function equals(addr) {\n  return this.buffer.equals(addr.buffer);\n};\n\n/**\r\n * Gets a Multiaddrs node-friendly address object. Note that protocol information\r\n * is left out: in Node (and most network systems) the protocol is unknowable\r\n * given only the address.\r\n *\r\n * Has to be a ThinWaist Address, otherwise throws error\r\n *\r\n * @returns {{family: String, address: String, port: String}}\r\n * @throws {Error} Throws error if Multiaddr is not a Thin Waist address\r\n * @example\r\n * Multiaddr('/ip4/127.0.0.1/tcp/4001').nodeAddress()\r\n * // {family: 'IPv4', address: '127.0.0.1', port: '4001'}\r\n */\nMultiaddr.prototype.nodeAddress = function nodeAddress() {\n  const codes = this.protoCodes();\n  const names = this.protoNames();\n  const parts = this.toString().split('/').slice(1);\n  if (parts.length < 4) {\n    throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6}/{address}/{tcp, udp}/{port}\".');\n  } else if (codes[0] !== 4 && codes[0] !== 41 && codes[0] !== 54 && codes[0] !== 55) {\n    throw new Error(`no protocol with name: \"'${names[0]}'\". Must have a valid family name: \"{ip4, ip6, dns4, dns6}\".`);\n  } else if (parts[2] !== 'tcp' && parts[2] !== 'udp') {\n    throw new Error(`no protocol with name: \"'${names[1]}'\". Must have a valid transport protocol: \"{tcp, udp}\".`);\n  }\n  return {\n    family: codes[0] === 41 || codes[0] === 55 ? 6 : 4,\n    address: parts[1],\n    // ip addr\n    port: parts[3] // tcp or udp port\n  };\n};\n\n/**\r\n * Creates a Multiaddr from a node-friendly address object\r\n *\r\n * @param {String} addr\r\n * @param {String} transport\r\n * @returns {Multiaddr} multiaddr\r\n * @throws {Error} Throws error if addr is not truthy\r\n * @throws {Error} Throws error if transport is not truthy\r\n * @example\r\n * Multiaddr.fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\r\n * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\r\n */\nMultiaddr.fromNodeAddress = function fromNodeAddress(addr, transport) {\n  if (!addr) throw new Error('requires node address object');\n  if (!transport) throw new Error('requires transport protocol');\n  const ip = addr.family === 'IPv6' ? 'ip6' : 'ip4';\n  return Multiaddr('/' + [ip, addr.address, transport, addr.port].join('/'));\n};\n\n// TODO find a better example, not sure about it's good enough\n/**\r\n * Returns if a Multiaddr is a Thin Waist address or not.\r\n *\r\n * Thin Waist is if a Multiaddr adheres to the standard combination of:\r\n *\r\n * `{IPv4, IPv6}/{TCP, UDP}`\r\n *\r\n * @param {Multiaddr} [addr] - Defaults to using `this` instance\r\n * @returns {Boolean} isThinWaistAddress\r\n * @example\r\n * const mh1 = Multiaddr('/ip4/127.0.0.1/tcp/4001')\r\n * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\r\n * const mh2 = Multiaddr('/ip4/192.168.2.1/tcp/5001')\r\n * // <Multiaddr 04c0a80201061389 - /ip4/192.168.2.1/tcp/5001>\r\n * const mh3 = mh1.encapsulate(mh2)\r\n * // <Multiaddr 047f000001060fa104c0a80201061389 - /ip4/127.0.0.1/tcp/4001/ip4/192.168.2.1/tcp/5001>\r\n * mh1.isThinWaistAddress()\r\n * // true\r\n * mh2.isThinWaistAddress()\r\n * // true\r\n * mh3.isThinWaistAddress()\r\n * // false\r\n */\nMultiaddr.prototype.isThinWaistAddress = function isThinWaistAddress(addr) {\n  const protos = (addr || this).protos();\n  if (protos.length !== 2) {\n    return false;\n  }\n  if (protos[0].code !== 4 && protos[0].code !== 41) {\n    return false;\n  }\n  if (protos[1].code !== 6 && protos[1].code !== 17) {\n    return false;\n  }\n  return true;\n};\n\n// TODO rename this to something else than \"stupid string\"\n/**\r\n * Converts a \"stupid string\" into a Multiaddr.\r\n *\r\n * Stupid string format:\r\n * ```\r\n * <proto><IPv>://<IP Addr>[:<proto port>]\r\n * udp4://1.2.3.4:5678\r\n * ```\r\n *\r\n * @param {String} [str] - String in the \"stupid\" format\r\n * @throws {NotImplemented}\r\n * @returns {undefined}\r\n * @todo Not Implemented yet\r\n */\nMultiaddr.prototype.fromStupidString = function fromStupidString(str) {\n  throw NotImplemented;\n};\n\n/**\r\n * Object containing table, names and codes of all supported protocols.\r\n * To get the protocol values from a Multiaddr, you can use\r\n * [`.protos()`](#multiaddrprotos),\r\n * [`.protoCodes()`](#multiaddrprotocodes) or\r\n * [`.protoNames()`](#multiaddrprotonames)\r\n *\r\n * @instance\r\n * @returns {{table: Array, names: Object, codes: Object}}\r\n *\r\n */\nMultiaddr.protocols = protocols;\n\n/**\r\n * Returns if something is a Multiaddr that is a name\r\n *\r\n * @param {Multiaddr} addr\r\n * @return {Bool} isName\r\n */\nMultiaddr.isName = function isName(addr) {\n  if (!Multiaddr.isMultiaddr(addr)) {\n    return false;\n  }\n\n  // if a part of the multiaddr is resolvable, then return true\n  return addr.protos().some(proto => proto.resolvable);\n};\n\n/**\r\n * Returns an array of multiaddrs, by resolving the multiaddr that is a name\r\n *\r\n * @param {Multiaddr} addr\r\n *\r\n * @param {Function} callback\r\n * @return {Bool} isName\r\n */\nMultiaddr.resolve = function resolve(addr, callback) {\n  if (!Multiaddr.isMultiaddr(addr) || !Multiaddr.isName(addr)) {\n    return callback(new Error('not a valid name'));\n  }\n\n  /*\r\n   * Needs more consideration from spec design:\r\n   *   - what to return\r\n   *   - how to achieve it in the browser?\r\n   */\n  return callback(new Error('not implemented yet'));\n};\nexports = module.exports = Multiaddr;","map":{"version":3,"names":["map","require","extend","codec","protocols","varint","bs58","withIs","NotImplemented","Error","Multiaddr","proto","addr","Buffer","buffer","fromBuffer","String","length","charAt","fromString","protos","protoCodes","className","symbolName","prototype","toString","bufferToString","toOptions","opts","parsed","split","family","host","transport","port","inspect","code","codes","buf","i","decode","n","bytes","p","size","sizeForAddr","slice","push","protoNames","name","tuples","bufferToTuples","stringTuples","t","tuplesToStringTuples","encapsulate","decapsulate","s","lastIndexOf","getPeerId","b58str","filter","tuple","names","e","equals","nodeAddress","parts","address","fromNodeAddress","ip","join","isThinWaistAddress","fromStupidString","str","isName","isMultiaddr","some","resolvable","resolve","callback","exports","module"],"sources":["C:/frontend/node_modules/ipfs-http-client/node_modules/multiaddr/src/index.js"],"sourcesContent":["'use strict'\r\n\r\nconst map = require('lodash.map')\r\nconst extend = require('xtend')\r\nconst codec = require('./codec')\r\nconst protocols = require('./protocols-table')\r\nconst varint = require('varint')\r\nconst bs58 = require('bs58')\r\nconst withIs = require('class-is')\r\n\r\nconst NotImplemented = new Error('Sorry, Not Implemented Yet.')\r\n\r\n/**\r\n * Creates a [multiaddr](https://github.com/multiformats/multiaddr) from\r\n * a Buffer, String or another Multiaddr instance\r\n * public key.\r\n * @class Multiaddr\r\n * @param {(String|Buffer|Multiaddr)} addr - If String or Buffer, needs to adhere\r\n * to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\r\n * @example\r\n * Multiaddr('/ip4/127.0.0.1/tcp/4001')\r\n * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\r\n */\r\nconst Multiaddr = withIs.proto(function (addr) {\r\n  if (!(this instanceof Multiaddr)) {\r\n    return new Multiaddr(addr)\r\n  }\r\n\r\n  // default\r\n  if (addr == null) {\r\n    addr = ''\r\n  }\r\n\r\n  if (addr instanceof Buffer) {\r\n    /**\r\n     * @type {Buffer} - The raw bytes representing this multiaddress\r\n     */\r\n    this.buffer = codec.fromBuffer(addr)\r\n  } else if (typeof addr === 'string' || addr instanceof String) {\r\n    if (addr.length > 0 && addr.charAt(0) !== '/') {\r\n      throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`)\r\n    }\r\n    this.buffer = codec.fromString(addr)\r\n  } else if (addr.buffer && addr.protos && addr.protoCodes) { // Multiaddr\r\n    this.buffer = codec.fromBuffer(addr.buffer) // validate + copy buffer\r\n  } else {\r\n    throw new Error('addr must be a string, Buffer, or another Multiaddr')\r\n  }\r\n}, { className: 'Multiaddr', symbolName: '@multiformats/js-multiaddr/multiaddr' })\r\n\r\n/**\r\n * Returns Multiaddr as a String\r\n *\r\n * @returns {String}\r\n * @example\r\n * Multiaddr('/ip4/127.0.0.1/tcp/4001').toString()\r\n * // '/ip4/127.0.0.1/tcp/4001'\r\n */\r\nMultiaddr.prototype.toString = function toString () {\r\n  return codec.bufferToString(this.buffer)\r\n}\r\n\r\n/**\r\n * Returns Multiaddr as a convinient options object to be used with net.createConnection\r\n *\r\n * @returns {{family: String, host: String, transport: String, port: String}}\r\n * @example\r\n * Multiaddr('/ip4/127.0.0.1/tcp/4001').toOptions()\r\n * // { family: 'ipv4', host: '127.0.0.1', transport: 'tcp', port: '4001' }\r\n */\r\nMultiaddr.prototype.toOptions = function toOptions () {\r\n  const opts = {}\r\n  const parsed = this.toString().split('/')\r\n  opts.family = parsed[1] === 'ip4' ? 'ipv4' : 'ipv6'\r\n  opts.host = parsed[2]\r\n  opts.transport = parsed[3]\r\n  opts.port = parsed[4]\r\n  return opts\r\n}\r\n\r\n/**\r\n * Returns Multiaddr as a human-readable string\r\n *\r\n * @returns {String}\r\n * @example\r\n * Multiaddr('/ip4/127.0.0.1/tcp/4001').inspect()\r\n * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'\r\n */\r\nMultiaddr.prototype.inspect = function inspect () {\r\n  return '<Multiaddr ' +\r\n    this.buffer.toString('hex') + ' - ' +\r\n    codec.bufferToString(this.buffer) + '>'\r\n}\r\n\r\n/**\r\n * Returns the protocols the Multiaddr is defined with, as an array of objects, in\r\n * left-to-right order. Each object contains the protocol code, protocol name,\r\n * and the size of its address space in bits.\r\n * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\r\n *\r\n * @returns {Array.<Object>} protocols - All the protocols the address is composed of\r\n * @returns {Number} protocols[].code\r\n * @returns {Number} protocols[].size\r\n * @returns {String} protocols[].name\r\n * @example\r\n * Multiaddr('/ip4/127.0.0.1/tcp/4001').protos()\r\n * // [ { code: 4, size: 32, name: 'ip4' },\r\n * //   { code: 6, size: 16, name: 'tcp' } ]\r\n */\r\nMultiaddr.prototype.protos = function protos () {\r\n  return map(this.protoCodes(), function (code) {\r\n    return extend(protocols(code))\r\n    // copy to prevent users from modifying the internal objs.\r\n  })\r\n}\r\n\r\n/**\r\n * Returns the codes of the protocols in left-to-right order.\r\n * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\r\n *\r\n * @returns {Array.<Number>} protocol codes\r\n * @example\r\n * Multiaddr('/ip4/127.0.0.1/tcp/4001').protoCodes()\r\n * // [ 4, 6 ]\r\n */\r\nMultiaddr.prototype.protoCodes = function protoCodes () {\r\n  const codes = []\r\n  const buf = this.buffer\r\n  let i = 0\r\n  while (i < buf.length) {\r\n    const code = varint.decode(buf, i)\r\n    const n = varint.decode.bytes\r\n\r\n    const p = protocols(code)\r\n    const size = codec.sizeForAddr(p, buf.slice(i + n))\r\n\r\n    i += (size + n)\r\n    codes.push(code)\r\n  }\r\n\r\n  return codes\r\n}\r\n\r\n/**\r\n * Returns the names of the protocols in left-to-right order.\r\n * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\r\n *\r\n * @return {Array.<String>} protocol names\r\n * @example\r\n * Multiaddr('/ip4/127.0.0.1/tcp/4001').protoNames()\r\n * // [ 'ip4', 'tcp' ]\r\n */\r\nMultiaddr.prototype.protoNames = function protoNames () {\r\n  return map(this.protos(), function (proto) {\r\n    return proto.name\r\n  })\r\n}\r\n\r\n/**\r\n * Returns a tuple of parts\r\n *\r\n * @return {Array.<Array>} tuples\r\n * @return {Number} tuples[].0 code of protocol\r\n * @return {Buffer} tuples[].1 contents of address\r\n * @example\r\n * Multiaddr(\"/ip4/127.0.0.1/tcp/4001\").tuples()\r\n * // [ [ 4, <Buffer 7f 00 00 01> ], [ 6, <Buffer 0f a1> ] ]\r\n */\r\nMultiaddr.prototype.tuples = function tuples () {\r\n  return codec.bufferToTuples(this.buffer)\r\n}\r\n\r\n/**\r\n * Returns a tuple of string/number parts\r\n *\r\n * @return {Array.<Array>} tuples\r\n * @return {Number} tuples[].0 code of protocol\r\n * @return {(String|Number)} tuples[].1 contents of address\r\n * @example\r\n * Multiaddr(\"/ip4/127.0.0.1/tcp/4001\").stringTuples()\r\n * // [ [ 4, '127.0.0.1' ], [ 6, 4001 ] ]\r\n */\r\nMultiaddr.prototype.stringTuples = function stringTuples () {\r\n  const t = codec.bufferToTuples(this.buffer)\r\n  return codec.tuplesToStringTuples(t)\r\n}\r\n\r\n/**\r\n * Encapsulates a Multiaddr in another Multiaddr\r\n *\r\n * @param {Multiaddr} addr - Multiaddr to add into this Multiaddr\r\n * @return {Multiaddr}\r\n * @example\r\n * const mh1 = Multiaddr('/ip4/8.8.8.8/tcp/1080')\r\n * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\r\n *\r\n * const mh2 = Multiaddr('/ip4/127.0.0.1/tcp/4001')\r\n * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\r\n *\r\n * const mh3 = mh1.encapsulate(mh2)\r\n * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>\r\n *\r\n * mh3.toString()\r\n * // '/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001'\r\n */\r\nMultiaddr.prototype.encapsulate = function encapsulate (addr) {\r\n  addr = Multiaddr(addr)\r\n  return Multiaddr(this.toString() + addr.toString())\r\n}\r\n\r\n/**\r\n * Decapsulates a Multiaddr from another Multiaddr\r\n *\r\n * @param {Multiaddr} addr - Multiaddr to remove from this Multiaddr\r\n * @return {Multiaddr}\r\n * @example\r\n * const mh1 = Multiaddr('/ip4/8.8.8.8/tcp/1080')\r\n * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\r\n *\r\n * const mh2 = Multiaddr('/ip4/127.0.0.1/tcp/4001')\r\n * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\r\n *\r\n * const mh3 = mh1.encapsulate(mh2)\r\n * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>\r\n *\r\n * mh3.decapsulate(mh2).toString()\r\n * // '/ip4/8.8.8.8/tcp/1080'\r\n */\r\nMultiaddr.prototype.decapsulate = function decapsulate (addr) {\r\n  addr = addr.toString()\r\n  const s = this.toString()\r\n  const i = s.lastIndexOf(addr)\r\n  if (i < 0) {\r\n    throw new Error('Address ' + this + ' does not contain subaddress: ' + addr)\r\n  }\r\n  return Multiaddr(s.slice(0, i))\r\n}\r\n\r\n/**\r\n * Extract the peerId if the multiaddr contains one\r\n *\r\n * @return {String|null} peerId - The id of the peer or null if invalid or missing from the ma\r\n * @example\r\n * const mh1 = Multiaddr('/ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string')\r\n * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string>\r\n *\r\n * // should return QmValidBase58string or null if the id is missing or invalid\r\n * const peerId = mh1.getPeerId()\r\n */\r\nMultiaddr.prototype.getPeerId = function getPeerId () {\r\n  let b58str = null\r\n  try {\r\n    b58str = this.stringTuples().filter((tuple) => {\r\n      if (tuple[0] === protocols.names['ipfs'].code) {\r\n        return true\r\n      }\r\n    })[0][1]\r\n\r\n    bs58.decode(b58str)\r\n  } catch (e) {\r\n    b58str = null\r\n  }\r\n\r\n  return b58str\r\n}\r\n\r\n/**\r\n * Checks if two Multiaddrs are the same\r\n *\r\n * @param {Multiaddr} addr\r\n * @return {Bool}\r\n * @example\r\n * const mh1 = Multiaddr('/ip4/8.8.8.8/tcp/1080')\r\n * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\r\n *\r\n * const mh2 = Multiaddr('/ip4/127.0.0.1/tcp/4001')\r\n * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\r\n *\r\n * mh1.equals(mh1)\r\n * // true\r\n *\r\n * mh1.equals(mh2)\r\n * // false\r\n */\r\nMultiaddr.prototype.equals = function equals (addr) {\r\n  return this.buffer.equals(addr.buffer)\r\n}\r\n\r\n/**\r\n * Gets a Multiaddrs node-friendly address object. Note that protocol information\r\n * is left out: in Node (and most network systems) the protocol is unknowable\r\n * given only the address.\r\n *\r\n * Has to be a ThinWaist Address, otherwise throws error\r\n *\r\n * @returns {{family: String, address: String, port: String}}\r\n * @throws {Error} Throws error if Multiaddr is not a Thin Waist address\r\n * @example\r\n * Multiaddr('/ip4/127.0.0.1/tcp/4001').nodeAddress()\r\n * // {family: 'IPv4', address: '127.0.0.1', port: '4001'}\r\n */\r\nMultiaddr.prototype.nodeAddress = function nodeAddress () {\r\n  const codes = this.protoCodes()\r\n  const names = this.protoNames()\r\n  const parts = this.toString().split('/').slice(1)\r\n\r\n  if (parts.length < 4) {\r\n    throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6}/{address}/{tcp, udp}/{port}\".')\r\n  } else if (codes[0] !== 4 && codes[0] !== 41 && codes[0] !== 54 && codes[0] !== 55) {\r\n    throw new Error(`no protocol with name: \"'${names[0]}'\". Must have a valid family name: \"{ip4, ip6, dns4, dns6}\".`)\r\n  } else if (parts[2] !== 'tcp' && parts[2] !== 'udp') {\r\n    throw new Error(`no protocol with name: \"'${names[1]}'\". Must have a valid transport protocol: \"{tcp, udp}\".`)\r\n  }\r\n\r\n  return {\r\n    family: (codes[0] === 41 || codes[0] === 55) ? 6 : 4,\r\n    address: parts[1], // ip addr\r\n    port: parts[3] // tcp or udp port\r\n  }\r\n}\r\n\r\n/**\r\n * Creates a Multiaddr from a node-friendly address object\r\n *\r\n * @param {String} addr\r\n * @param {String} transport\r\n * @returns {Multiaddr} multiaddr\r\n * @throws {Error} Throws error if addr is not truthy\r\n * @throws {Error} Throws error if transport is not truthy\r\n * @example\r\n * Multiaddr.fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\r\n * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\r\n */\r\nMultiaddr.fromNodeAddress = function fromNodeAddress (addr, transport) {\r\n  if (!addr) throw new Error('requires node address object')\r\n  if (!transport) throw new Error('requires transport protocol')\r\n  const ip = (addr.family === 'IPv6') ? 'ip6' : 'ip4'\r\n  return Multiaddr('/' + [ip, addr.address, transport, addr.port].join('/'))\r\n}\r\n\r\n// TODO find a better example, not sure about it's good enough\r\n/**\r\n * Returns if a Multiaddr is a Thin Waist address or not.\r\n *\r\n * Thin Waist is if a Multiaddr adheres to the standard combination of:\r\n *\r\n * `{IPv4, IPv6}/{TCP, UDP}`\r\n *\r\n * @param {Multiaddr} [addr] - Defaults to using `this` instance\r\n * @returns {Boolean} isThinWaistAddress\r\n * @example\r\n * const mh1 = Multiaddr('/ip4/127.0.0.1/tcp/4001')\r\n * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\r\n * const mh2 = Multiaddr('/ip4/192.168.2.1/tcp/5001')\r\n * // <Multiaddr 04c0a80201061389 - /ip4/192.168.2.1/tcp/5001>\r\n * const mh3 = mh1.encapsulate(mh2)\r\n * // <Multiaddr 047f000001060fa104c0a80201061389 - /ip4/127.0.0.1/tcp/4001/ip4/192.168.2.1/tcp/5001>\r\n * mh1.isThinWaistAddress()\r\n * // true\r\n * mh2.isThinWaistAddress()\r\n * // true\r\n * mh3.isThinWaistAddress()\r\n * // false\r\n */\r\nMultiaddr.prototype.isThinWaistAddress = function isThinWaistAddress (addr) {\r\n  const protos = (addr || this).protos()\r\n\r\n  if (protos.length !== 2) {\r\n    return false\r\n  }\r\n\r\n  if (protos[0].code !== 4 && protos[0].code !== 41) {\r\n    return false\r\n  }\r\n  if (protos[1].code !== 6 && protos[1].code !== 17) {\r\n    return false\r\n  }\r\n  return true\r\n}\r\n\r\n// TODO rename this to something else than \"stupid string\"\r\n/**\r\n * Converts a \"stupid string\" into a Multiaddr.\r\n *\r\n * Stupid string format:\r\n * ```\r\n * <proto><IPv>://<IP Addr>[:<proto port>]\r\n * udp4://1.2.3.4:5678\r\n * ```\r\n *\r\n * @param {String} [str] - String in the \"stupid\" format\r\n * @throws {NotImplemented}\r\n * @returns {undefined}\r\n * @todo Not Implemented yet\r\n */\r\nMultiaddr.prototype.fromStupidString = function fromStupidString (str) {\r\n  throw NotImplemented\r\n}\r\n\r\n/**\r\n * Object containing table, names and codes of all supported protocols.\r\n * To get the protocol values from a Multiaddr, you can use\r\n * [`.protos()`](#multiaddrprotos),\r\n * [`.protoCodes()`](#multiaddrprotocodes) or\r\n * [`.protoNames()`](#multiaddrprotonames)\r\n *\r\n * @instance\r\n * @returns {{table: Array, names: Object, codes: Object}}\r\n *\r\n */\r\nMultiaddr.protocols = protocols\r\n\r\n/**\r\n * Returns if something is a Multiaddr that is a name\r\n *\r\n * @param {Multiaddr} addr\r\n * @return {Bool} isName\r\n */\r\nMultiaddr.isName = function isName (addr) {\r\n  if (!Multiaddr.isMultiaddr(addr)) {\r\n    return false\r\n  }\r\n\r\n  // if a part of the multiaddr is resolvable, then return true\r\n  return addr.protos().some((proto) => proto.resolvable)\r\n}\r\n\r\n/**\r\n * Returns an array of multiaddrs, by resolving the multiaddr that is a name\r\n *\r\n * @param {Multiaddr} addr\r\n *\r\n * @param {Function} callback\r\n * @return {Bool} isName\r\n */\r\nMultiaddr.resolve = function resolve (addr, callback) {\r\n  if (!Multiaddr.isMultiaddr(addr) || !Multiaddr.isName(addr)) {\r\n    return callback(new Error('not a valid name'))\r\n  }\r\n\r\n  /*\r\n   * Needs more consideration from spec design:\r\n   *   - what to return\r\n   *   - how to achieve it in the browser?\r\n   */\r\n  return callback(new Error('not implemented yet'))\r\n}\r\n\r\nexports = module.exports = Multiaddr\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}