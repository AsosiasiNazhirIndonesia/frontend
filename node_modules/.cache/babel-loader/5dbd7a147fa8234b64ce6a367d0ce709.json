{"ast":null,"code":"import axios from \"axios\";\nimport web3 from \"../services/web3\";\nimport abi from \"./abi.json\";\nimport bytecodes from \"./bytecodes.json\";\nimport { sourceCode } from \"./source_code\";\nconst CertificateSet = {};\n\n// when switching to new Org\nCertificateSet.getNewInstance = address => {\n  return new web3.eth.Contract(abi, address, {\n    transactionConfirmationBlocks: 3\n  });\n};\n\n// when creating to new Org, dont use deploy, use CertificateSetFactory instead\nCertificateSet.deploy = (certificateHash, receiver, approvers) => {\n  const CertificateSet = CertificateSet.getNewInstance(undefined);\n  return CertificateSet.deploy({\n    data: bytecodes.object,\n    arguments: [certificateHash, receiver, approvers]\n  });\n};\n\n// when creating to new Org, dont use deploy, use CertificateSetFactory instead\nCertificateSet.verify = async (address, constructorArguements) => {\n  try {\n    console.log(\"try to verifying contract\");\n    var data = new FormData();\n    data.append(\"apikey\", \"K9YR1H15TT4PHY9AXM7DZM38N6HCVA6PEV\");\n    data.append(\"module\", \"contract\");\n    data.append(\"action\", \"verifysourcecode\");\n    data.append(\"contractaddress\", address);\n    data.append(\"sourceCode\", sourceCode);\n    data.append(\"codeformat\", \"solidity-single-file\");\n    data.append(\"contractname\", \"DigitalCertificate\");\n    data.append(\"compilerversion\", \"v0.8.7+commit.e28d00a7\");\n    data.append(\"optimizationUsed\", \"0\");\n    data.append(\"runs\", \"200\");\n    data.append(\"constructorArguments\", constructorArguements);\n    var config = {\n      method: \"post\",\n      url: \"https://api-sepolia.etherscan.io/api\",\n      headers: {\n        ...data.getHeaders()\n      },\n      data: data\n    };\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport default CertificateSet;","map":{"version":3,"names":["axios","web3","abi","bytecodes","sourceCode","CertificateSet","getNewInstance","address","eth","Contract","transactionConfirmationBlocks","deploy","certificateHash","receiver","approvers","undefined","data","object","arguments","verify","constructorArguements","console","log","FormData","append","config","method","url","headers","getHeaders","e"],"sources":["C:/spasi/frontend/src/contracts/digital_certificate.js"],"sourcesContent":["import axios from \"axios\";\r\nimport web3 from \"../services/web3\";\r\nimport abi from \"./abi.json\";\r\nimport bytecodes from \"./bytecodes.json\";\r\nimport { sourceCode } from \"./source_code\";\r\n\r\nconst CertificateSet = {};\r\n\r\n// when switching to new Org\r\nCertificateSet.getNewInstance = (address) => {\r\n  return new web3.eth.Contract(abi, address, {\r\n    transactionConfirmationBlocks: 3,\r\n  });\r\n};\r\n\r\n// when creating to new Org, dont use deploy, use CertificateSetFactory instead\r\nCertificateSet.deploy = (certificateHash, receiver, approvers) => {\r\n  const CertificateSet = CertificateSet.getNewInstance(undefined);\r\n  return CertificateSet.deploy({\r\n    data: bytecodes.object,\r\n    arguments: [certificateHash, receiver, approvers],\r\n  });\r\n};\r\n\r\n// when creating to new Org, dont use deploy, use CertificateSetFactory instead\r\nCertificateSet.verify = async (address, constructorArguements) => {\r\n  try {\r\n    console.log(\"try to verifying contract\");\r\n    var data = new FormData();\r\n    data.append(\"apikey\", \"K9YR1H15TT4PHY9AXM7DZM38N6HCVA6PEV\");\r\n    data.append(\"module\", \"contract\");\r\n    data.append(\"action\", \"verifysourcecode\");\r\n    data.append(\"contractaddress\", address);\r\n    data.append(\"sourceCode\", sourceCode);\r\n    data.append(\"codeformat\", \"solidity-single-file\");\r\n    data.append(\"contractname\", \"DigitalCertificate\");\r\n    data.append(\"compilerversion\", \"v0.8.7+commit.e28d00a7\");\r\n    data.append(\"optimizationUsed\", \"0\");\r\n    data.append(\"runs\", \"200\");\r\n    data.append(\"constructorArguments\", constructorArguements);\r\n\r\n    var config = {\r\n      method: \"post\",\r\n      url: \"https://api-sepolia.etherscan.io/api\",\r\n      headers: {\r\n        ...data.getHeaders(),\r\n      },\r\n      data: data,\r\n    };\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n};\r\n\r\nexport default CertificateSet;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,kBAAkB;AACnC,OAAOC,GAAG,MAAM,YAAY;AAC5B,OAAOC,SAAS,MAAM,kBAAkB;AACxC,SAASC,UAAU,QAAQ,eAAe;AAE1C,MAAMC,cAAc,GAAG,CAAC,CAAC;;AAEzB;AACAA,cAAc,CAACC,cAAc,GAAIC,OAAO,IAAK;EAC3C,OAAO,IAAIN,IAAI,CAACO,GAAG,CAACC,QAAQ,CAACP,GAAG,EAAEK,OAAO,EAAE;IACzCG,6BAA6B,EAAE;EACjC,CAAC,CAAC;AACJ,CAAC;;AAED;AACAL,cAAc,CAACM,MAAM,GAAG,CAACC,eAAe,EAAEC,QAAQ,EAAEC,SAAS,KAAK;EAChE,MAAMT,cAAc,GAAGA,cAAc,CAACC,cAAc,CAACS,SAAS,CAAC;EAC/D,OAAOV,cAAc,CAACM,MAAM,CAAC;IAC3BK,IAAI,EAAEb,SAAS,CAACc,MAAM;IACtBC,SAAS,EAAE,CAACN,eAAe,EAAEC,QAAQ,EAAEC,SAAS;EAClD,CAAC,CAAC;AACJ,CAAC;;AAED;AACAT,cAAc,CAACc,MAAM,GAAG,OAAOZ,OAAO,EAAEa,qBAAqB,KAAK;EAChE,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;IACxC,IAAIN,IAAI,GAAG,IAAIO,QAAQ,EAAE;IACzBP,IAAI,CAACQ,MAAM,CAAC,QAAQ,EAAE,oCAAoC,CAAC;IAC3DR,IAAI,CAACQ,MAAM,CAAC,QAAQ,EAAE,UAAU,CAAC;IACjCR,IAAI,CAACQ,MAAM,CAAC,QAAQ,EAAE,kBAAkB,CAAC;IACzCR,IAAI,CAACQ,MAAM,CAAC,iBAAiB,EAAEjB,OAAO,CAAC;IACvCS,IAAI,CAACQ,MAAM,CAAC,YAAY,EAAEpB,UAAU,CAAC;IACrCY,IAAI,CAACQ,MAAM,CAAC,YAAY,EAAE,sBAAsB,CAAC;IACjDR,IAAI,CAACQ,MAAM,CAAC,cAAc,EAAE,oBAAoB,CAAC;IACjDR,IAAI,CAACQ,MAAM,CAAC,iBAAiB,EAAE,wBAAwB,CAAC;IACxDR,IAAI,CAACQ,MAAM,CAAC,kBAAkB,EAAE,GAAG,CAAC;IACpCR,IAAI,CAACQ,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC;IAC1BR,IAAI,CAACQ,MAAM,CAAC,sBAAsB,EAAEJ,qBAAqB,CAAC;IAE1D,IAAIK,MAAM,GAAG;MACXC,MAAM,EAAE,MAAM;MACdC,GAAG,EAAE,sCAAsC;MAC3CC,OAAO,EAAE;QACP,GAAGZ,IAAI,CAACa,UAAU;MACpB,CAAC;MACDb,IAAI,EAAEA;IACR,CAAC;EACH,CAAC,CAAC,OAAOc,CAAC,EAAE;IACVT,OAAO,CAACC,GAAG,CAACQ,CAAC,CAAC;EAChB;AACF,CAAC;AAED,eAAezB,cAAc"},"metadata":{},"sourceType":"module"}