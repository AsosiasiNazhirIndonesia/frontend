{"ast":null,"code":"var _jsxFileName = \"C:\\\\spasi\\\\frontend\\\\src\\\\pages\\\\ManageCertificate\\\\CertificateTypeMaster\\\\CertificateTypeMaster.js\",\n  _s = $RefreshSig$();\nimport { withRouter } from \"react-router-dom\";\nimport SubmitButton from \"../../../components/elements/SubmitButton/SubmitButton\";\n// import AddEditInstitution from \"./AddEditInstitution\";\nimport { useEffect, useState } from \"react\";\nimport ModalCertificateType from \"../../../components/Modal/ModalCertificateType\";\nimport Delete from \"../../../components/Popup/Delete\";\nimport TableCertificateTypes from \"../../../components/Table/TableCertificateTypes\";\nimport Pagination from \"../../../components/elements/Pagination/Pagination\";\nimport API from \"../../../services/api\";\nimport styles from \"./CertificateTypeMaster.module.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CertificateTypeMaster = props => {\n  _s();\n  const [isDelete, setIsDelete] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage] = useState(10);\n  const [certTypes, setCertTypes] = useState([]);\n  const [selectedCert, setSelectedCert] = useState(null);\n  const [isLoading, setLoading] = useState(false);\n  const [isLoadingDelete, setLoadingDelete] = useState(false);\n  const [modalChange, setModalChange] = useState(false);\n  useEffect(() => {\n    getAllCertificateTypes(currentPage - 1, itemsPerPage);\n  }, []);\n  const getAllCertificateTypes = async (offset, limit) => {\n    if (!isLoading) {\n      setLoading(true);\n    }\n    try {\n      const results = await API.getAllCertificateTypes(offset, limit);\n      const certTypes = [];\n      for (const result of results) {\n        certTypes.push({\n          name: result === null || result === void 0 ? void 0 : result.type,\n          id: result === null || result === void 0 ? void 0 : result.certificate_type_id\n        });\n      }\n      if (certTypes.length > 0) {\n        setCertTypes(certTypes);\n      }\n    } catch (error) {} finally {\n      setLoading(false);\n    }\n  };\n  const handleDelete = async () => {\n    setLoadingDelete(true);\n    try {\n      const response = await API.deleteCertificateType({\n        certificate_type_id: selectedCert === null || selectedCert === void 0 ? void 0 : selectedCert.id\n      });\n      setSelectedCert(null);\n      getAllCertificateTypes(currentPage - 1, itemsPerPage);\n    } catch (error) {} finally {\n      setLoadingDelete(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles[\"certificatetype-content\"],\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles[\"breadcrumb\"],\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Certificate Type Master\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles[\"bef-table\"],\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles[\"btn-add-certificatetype\"],\n        children: /*#__PURE__*/_jsxDEV(SubmitButton, {\n          buttonText: \"Add Certificate Type\",\n          onClick: () => setModalChange(true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableCertificateTypes, {\n      loading: isLoading\n      // setInputValue={setInputValue}\n      ,\n      certTypes: certTypes\n      // setIsEdit={setIsEdit}\n      ,\n      onDelete: certType => {\n        setIsDelete(true);\n        setSelectedCert(certType);\n      },\n      onEdit: certType => {\n        setModalChange(true);\n        setSelectedCert(certType);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      currentPage: currentPage,\n      itemsPerPage: itemsPerPage,\n      totalItem: certTypes.length,\n      setCurrentPage: setCurrentPage,\n      reloadFunction: getAllCertificateTypes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), modalChange && /*#__PURE__*/_jsxDEV(ModalCertificateType, {\n      onCancel: () => {\n        setModalChange(false);\n        if (selectedCert) {\n          setSelectedCert(null);\n        }\n      },\n      onSubmitted: () => {\n        getAllCertificateTypes(currentPage - 1, itemsPerPage);\n        setModalChange(false);\n        if (selectedCert) {\n          setSelectedCert(null);\n        }\n      },\n      selectedData: selectedCert,\n      visible: modalChange,\n      title: \"Add Certificate Type\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Delete, {\n      loading: isLoadingDelete,\n      delete: isDelete,\n      setIsDelete: setIsDelete,\n      del: handleDelete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(CertificateTypeMaster, \"4p+eYjVEgVNVqlcY5mCaAqWOrZw=\");\n_c = CertificateTypeMaster;\nexport default _c2 = withRouter(CertificateTypeMaster);\nvar _c, _c2;\n$RefreshReg$(_c, \"CertificateTypeMaster\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["withRouter","SubmitButton","useEffect","useState","ModalCertificateType","Delete","TableCertificateTypes","Pagination","API","styles","jsxDEV","_jsxDEV","CertificateTypeMaster","props","_s","isDelete","setIsDelete","currentPage","setCurrentPage","itemsPerPage","certTypes","setCertTypes","selectedCert","setSelectedCert","isLoading","setLoading","isLoadingDelete","setLoadingDelete","modalChange","setModalChange","getAllCertificateTypes","offset","limit","results","result","push","name","type","id","certificate_type_id","length","error","handleDelete","response","deleteCertificateType","className","children","fileName","_jsxFileName","lineNumber","columnNumber","buttonText","onClick","loading","onDelete","certType","onEdit","totalItem","reloadFunction","onCancel","onSubmitted","selectedData","visible","title","delete","del","_c","_c2","$RefreshReg$"],"sources":["C:/spasi/frontend/src/pages/ManageCertificate/CertificateTypeMaster/CertificateTypeMaster.js"],"sourcesContent":["import { withRouter } from \"react-router-dom\";\r\nimport SubmitButton from \"../../../components/elements/SubmitButton/SubmitButton\";\r\n// import AddEditInstitution from \"./AddEditInstitution\";\r\nimport { useEffect, useState } from \"react\";\r\nimport ModalCertificateType from \"../../../components/Modal/ModalCertificateType\";\r\nimport Delete from \"../../../components/Popup/Delete\";\r\nimport TableCertificateTypes from \"../../../components/Table/TableCertificateTypes\";\r\nimport Pagination from \"../../../components/elements/Pagination/Pagination\";\r\nimport API from \"../../../services/api\";\r\nimport styles from \"./CertificateTypeMaster.module.scss\";\r\n\r\nconst CertificateTypeMaster = (props) => {\r\n  const [isDelete, setIsDelete] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [itemsPerPage] = useState(10);\r\n  const [certTypes, setCertTypes] = useState([]);\r\n  const [selectedCert, setSelectedCert] = useState(null);\r\n\r\n  const [isLoading, setLoading] = useState(false);\r\n  const [isLoadingDelete, setLoadingDelete] = useState(false);\r\n\r\n  const [modalChange, setModalChange] = useState(false);\r\n\r\n  useEffect(() => {\r\n    getAllCertificateTypes(currentPage - 1, itemsPerPage);\r\n  }, []);\r\n\r\n  const getAllCertificateTypes = async (offset, limit) => {\r\n    if (!isLoading) {\r\n      setLoading(true);\r\n    }\r\n    try {\r\n      const results = await API.getAllCertificateTypes(offset, limit);\r\n      const certTypes = [];\r\n      for (const result of results) {\r\n        certTypes.push({\r\n          name: result?.type,\r\n          id: result?.certificate_type_id,\r\n        });\r\n      }\r\n      if (certTypes.length > 0) {\r\n        setCertTypes(certTypes);\r\n      }\r\n    } catch (error) {\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleDelete = async () => {\r\n    setLoadingDelete(true);\r\n    try {\r\n      const response = await API.deleteCertificateType({\r\n        certificate_type_id: selectedCert?.id,\r\n      });\r\n      setSelectedCert(null);\r\n      getAllCertificateTypes(currentPage - 1, itemsPerPage);\r\n    } catch (error) {\r\n    } finally {\r\n      setLoadingDelete(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={styles[\"certificatetype-content\"]}>\r\n      <div className={styles[\"breadcrumb\"]}>\r\n        <h1>Certificate Type Master</h1>\r\n      </div>\r\n      <div className={styles[\"bef-table\"]}>\r\n        <div className={styles[\"btn-add-certificatetype\"]}>\r\n          <SubmitButton\r\n            buttonText={\"Add Certificate Type\"}\r\n            onClick={() => setModalChange(true)}\r\n          ></SubmitButton>\r\n        </div>\r\n      </div>\r\n      <TableCertificateTypes\r\n        loading={isLoading}\r\n        // setInputValue={setInputValue}\r\n        certTypes={certTypes}\r\n        // setIsEdit={setIsEdit}\r\n        onDelete={(certType) => {\r\n          setIsDelete(true);\r\n          setSelectedCert(certType);\r\n        }}\r\n        onEdit={(certType) => {\r\n          setModalChange(true);\r\n          setSelectedCert(certType);\r\n        }}\r\n      />\r\n      <Pagination\r\n        currentPage={currentPage}\r\n        itemsPerPage={itemsPerPage}\r\n        totalItem={certTypes.length}\r\n        setCurrentPage={setCurrentPage}\r\n        reloadFunction={getAllCertificateTypes}\r\n      />\r\n      {modalChange && (\r\n        <ModalCertificateType\r\n          onCancel={() => {\r\n            setModalChange(false);\r\n            if (selectedCert) {\r\n              setSelectedCert(null);\r\n            }\r\n          }}\r\n          onSubmitted={() => {\r\n            getAllCertificateTypes(currentPage - 1, itemsPerPage);\r\n            setModalChange(false);\r\n            if (selectedCert) {\r\n              setSelectedCert(null);\r\n            }\r\n          }}\r\n          selectedData={selectedCert}\r\n          visible={modalChange}\r\n          title={\"Add Certificate Type\"}\r\n        />\r\n      )}\r\n      {/* <AddEditInstitution\r\n        add={isAdd}\r\n        edit={isEdit}\r\n        setIsAdd={setIsAdd}\r\n        setIsEdit={setIsEdit}\r\n        submit={submit}\r\n        update={update}\r\n        getInputValue={getInputValue}\r\n        setInputValue={setInputValue}\r\n      /> */}\r\n      <Delete\r\n        loading={isLoadingDelete}\r\n        delete={isDelete}\r\n        setIsDelete={setIsDelete}\r\n        del={handleDelete}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(CertificateTypeMaster);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}