{"ast":null,"code":"\"use strict\";\n\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n///////////////////////////////\nexport var UnicodeNormalizationForm;\n(function (UnicodeNormalizationForm) {\n  UnicodeNormalizationForm[\"current\"] = \"\";\n  UnicodeNormalizationForm[\"NFC\"] = \"NFC\";\n  UnicodeNormalizationForm[\"NFD\"] = \"NFD\";\n  UnicodeNormalizationForm[\"NFKC\"] = \"NFKC\";\n  UnicodeNormalizationForm[\"NFKD\"] = \"NFKD\";\n})(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));\n;\nexport var Utf8ErrorReason;\n(function (Utf8ErrorReason) {\n  // A continuation byte was present where there was nothing to continue\n  // - offset = the index the codepoint began in\n  Utf8ErrorReason[\"UNEXPECTED_CONTINUE\"] = \"unexpected continuation byte\";\n  // An invalid (non-continuation) byte to start a UTF-8 codepoint was found\n  // - offset = the index the codepoint began in\n  Utf8ErrorReason[\"BAD_PREFIX\"] = \"bad codepoint prefix\";\n  // The string is too short to process the expected codepoint\n  // - offset = the index the codepoint began in\n  Utf8ErrorReason[\"OVERRUN\"] = \"string overrun\";\n  // A missing continuation byte was expected but not found\n  // - offset = the index the continuation byte was expected at\n  Utf8ErrorReason[\"MISSING_CONTINUE\"] = \"missing continuation byte\";\n  // The computed code point is outside the range for UTF-8\n  // - offset       = start of this codepoint\n  // - badCodepoint = the computed codepoint; outside the UTF-8 range\n  Utf8ErrorReason[\"OUT_OF_RANGE\"] = \"out of UTF-8 range\";\n  // UTF-8 strings may not contain UTF-16 surrogate pairs\n  // - offset       = start of this codepoint\n  // - badCodepoint = the computed codepoint; inside the UTF-16 surrogate range\n  Utf8ErrorReason[\"UTF16_SURROGATE\"] = \"UTF-16 surrogate\";\n  // The string is an overlong representation\n  // - offset       = start of this codepoint\n  // - badCodepoint = the computed codepoint; already bounds checked\n  Utf8ErrorReason[\"OVERLONG\"] = \"overlong representation\";\n})(Utf8ErrorReason || (Utf8ErrorReason = {}));\n;\nfunction errorFunc(reason, offset, bytes, output, badCodepoint) {\n  return logger.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, \"bytes\", bytes);\n}\nfunction ignoreFunc(reason, offset, bytes, output, badCodepoint) {\n  // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes\n  if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {\n    let i = 0;\n    for (let o = offset + 1; o < bytes.length; o++) {\n      if (bytes[o] >> 6 !== 0x02) {\n        break;\n      }\n      i++;\n    }\n    return i;\n  }\n  // This byte runs us past the end of the string, so just jump to the end\n  // (but the first byte was read already read and therefore skipped)\n  if (reason === Utf8ErrorReason.OVERRUN) {\n    return bytes.length - offset - 1;\n  }\n  // Nothing to skip\n  return 0;\n}\nfunction replaceFunc(reason, offset, bytes, output, badCodepoint) {\n  // Overlong representations are otherwise \"valid\" code points; just non-deistingtished\n  if (reason === Utf8ErrorReason.OVERLONG) {\n    output.push(badCodepoint);\n    return 0;\n  }\n  // Put the replacement character into the output\n  output.push(0xfffd);\n  // Otherwise, process as if ignoring errors\n  return ignoreFunc(reason, offset, bytes, output, badCodepoint);\n}\n// Common error handing strategies\nexport const Utf8ErrorFuncs = Object.freeze({\n  error: errorFunc,\n  ignore: ignoreFunc,\n  replace: replaceFunc\n});\n// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499\nfunction getUtf8CodePoints(bytes, onError) {\n  if (onError == null) {\n    onError = Utf8ErrorFuncs.error;\n  }\n  bytes = arrayify(bytes);\n  const result = [];\n  let i = 0;\n  // Invalid bytes are ignored\n  while (i < bytes.length) {\n    const c = bytes[i++];\n    // 0xxx xxxx\n    if (c >> 7 === 0) {\n      result.push(c);\n      continue;\n    }\n    // Multibyte; how many bytes left for this character?\n    let extraLength = null;\n    let overlongMask = null;\n    // 110x xxxx 10xx xxxx\n    if ((c & 0xe0) === 0xc0) {\n      extraLength = 1;\n      overlongMask = 0x7f;\n      // 1110 xxxx 10xx xxxx 10xx xxxx\n    } else if ((c & 0xf0) === 0xe0) {\n      extraLength = 2;\n      overlongMask = 0x7ff;\n      // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx\n    } else if ((c & 0xf8) === 0xf0) {\n      extraLength = 3;\n      overlongMask = 0xffff;\n    } else {\n      if ((c & 0xc0) === 0x80) {\n        i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);\n      } else {\n        i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);\n      }\n      continue;\n    }\n    // Do we have enough bytes in our data?\n    if (i - 1 + extraLength >= bytes.length) {\n      i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);\n      continue;\n    }\n    // Remove the length prefix from the char\n    let res = c & (1 << 8 - extraLength - 1) - 1;\n    for (let j = 0; j < extraLength; j++) {\n      let nextChar = bytes[i];\n      // Invalid continuation byte\n      if ((nextChar & 0xc0) != 0x80) {\n        i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);\n        res = null;\n        break;\n      }\n      ;\n      res = res << 6 | nextChar & 0x3f;\n      i++;\n    }\n    // See above loop for invalid continuation byte\n    if (res === null) {\n      continue;\n    }\n    // Maximum code point\n    if (res > 0x10ffff) {\n      i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);\n      continue;\n    }\n    // Reserved for UTF-16 surrogate halves\n    if (res >= 0xd800 && res <= 0xdfff) {\n      i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);\n      continue;\n    }\n    // Check for overlong sequences (more bytes than needed)\n    if (res <= overlongMask) {\n      i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);\n      continue;\n    }\n    result.push(res);\n  }\n  return result;\n}\n// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\nexport function toUtf8Bytes(str) {\n  let form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : UnicodeNormalizationForm.current;\n  if (form != UnicodeNormalizationForm.current) {\n    logger.checkNormalize();\n    str = str.normalize(form);\n  }\n  let result = [];\n  for (let i = 0; i < str.length; i++) {\n    const c = str.charCodeAt(i);\n    if (c < 0x80) {\n      result.push(c);\n    } else if (c < 0x800) {\n      result.push(c >> 6 | 0xc0);\n      result.push(c & 0x3f | 0x80);\n    } else if ((c & 0xfc00) == 0xd800) {\n      i++;\n      const c2 = str.charCodeAt(i);\n      if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {\n        throw new Error(\"invalid utf-8 string\");\n      }\n      // Surrogate Pair\n      const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\n      result.push(pair >> 18 | 0xf0);\n      result.push(pair >> 12 & 0x3f | 0x80);\n      result.push(pair >> 6 & 0x3f | 0x80);\n      result.push(pair & 0x3f | 0x80);\n    } else {\n      result.push(c >> 12 | 0xe0);\n      result.push(c >> 6 & 0x3f | 0x80);\n      result.push(c & 0x3f | 0x80);\n    }\n  }\n  return arrayify(result);\n}\n;\nfunction escapeChar(value) {\n  const hex = \"0000\" + value.toString(16);\n  return \"\\\\u\" + hex.substring(hex.length - 4);\n}\nexport function _toEscapedUtf8String(bytes, onError) {\n  return '\"' + getUtf8CodePoints(bytes, onError).map(codePoint => {\n    if (codePoint < 256) {\n      switch (codePoint) {\n        case 8:\n          return \"\\\\b\";\n        case 9:\n          return \"\\\\t\";\n        case 10:\n          return \"\\\\n\";\n        case 13:\n          return \"\\\\r\";\n        case 34:\n          return \"\\\\\\\"\";\n        case 92:\n          return \"\\\\\\\\\";\n      }\n      if (codePoint >= 32 && codePoint < 127) {\n        return String.fromCharCode(codePoint);\n      }\n    }\n    if (codePoint <= 0xffff) {\n      return escapeChar(codePoint);\n    }\n    codePoint -= 0x10000;\n    return escapeChar((codePoint >> 10 & 0x3ff) + 0xd800) + escapeChar((codePoint & 0x3ff) + 0xdc00);\n  }).join(\"\") + '\"';\n}\nexport function _toUtf8String(codePoints) {\n  return codePoints.map(codePoint => {\n    if (codePoint <= 0xffff) {\n      return String.fromCharCode(codePoint);\n    }\n    codePoint -= 0x10000;\n    return String.fromCharCode((codePoint >> 10 & 0x3ff) + 0xd800, (codePoint & 0x3ff) + 0xdc00);\n  }).join(\"\");\n}\nexport function toUtf8String(bytes, onError) {\n  return _toUtf8String(getUtf8CodePoints(bytes, onError));\n}\nexport function toUtf8CodePoints(str) {\n  let form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : UnicodeNormalizationForm.current;\n  return getUtf8CodePoints(toUtf8Bytes(str, form));\n}","map":{"version":3,"sources":["../src.ts/utf8.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nimport { arrayify } from \"@ethersproject/bytes\";\r\nimport { Logger } from \"@ethersproject/logger\";\r\nimport { version } from \"./_version\";\r\nconst logger = new Logger(version);\r\n///////////////////////////////\r\nexport var UnicodeNormalizationForm;\r\n(function (UnicodeNormalizationForm) {\r\n    UnicodeNormalizationForm[\"current\"] = \"\";\r\n    UnicodeNormalizationForm[\"NFC\"] = \"NFC\";\r\n    UnicodeNormalizationForm[\"NFD\"] = \"NFD\";\r\n    UnicodeNormalizationForm[\"NFKC\"] = \"NFKC\";\r\n    UnicodeNormalizationForm[\"NFKD\"] = \"NFKD\";\r\n})(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));\r\n;\r\nexport var Utf8ErrorReason;\r\n(function (Utf8ErrorReason) {\r\n    // A continuation byte was present where there was nothing to continue\r\n    // - offset = the index the codepoint began in\r\n    Utf8ErrorReason[\"UNEXPECTED_CONTINUE\"] = \"unexpected continuation byte\";\r\n    // An invalid (non-continuation) byte to start a UTF-8 codepoint was found\r\n    // - offset = the index the codepoint began in\r\n    Utf8ErrorReason[\"BAD_PREFIX\"] = \"bad codepoint prefix\";\r\n    // The string is too short to process the expected codepoint\r\n    // - offset = the index the codepoint began in\r\n    Utf8ErrorReason[\"OVERRUN\"] = \"string overrun\";\r\n    // A missing continuation byte was expected but not found\r\n    // - offset = the index the continuation byte was expected at\r\n    Utf8ErrorReason[\"MISSING_CONTINUE\"] = \"missing continuation byte\";\r\n    // The computed code point is outside the range for UTF-8\r\n    // - offset       = start of this codepoint\r\n    // - badCodepoint = the computed codepoint; outside the UTF-8 range\r\n    Utf8ErrorReason[\"OUT_OF_RANGE\"] = \"out of UTF-8 range\";\r\n    // UTF-8 strings may not contain UTF-16 surrogate pairs\r\n    // - offset       = start of this codepoint\r\n    // - badCodepoint = the computed codepoint; inside the UTF-16 surrogate range\r\n    Utf8ErrorReason[\"UTF16_SURROGATE\"] = \"UTF-16 surrogate\";\r\n    // The string is an overlong representation\r\n    // - offset       = start of this codepoint\r\n    // - badCodepoint = the computed codepoint; already bounds checked\r\n    Utf8ErrorReason[\"OVERLONG\"] = \"overlong representation\";\r\n})(Utf8ErrorReason || (Utf8ErrorReason = {}));\r\n;\r\nfunction errorFunc(reason, offset, bytes, output, badCodepoint) {\r\n    return logger.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, \"bytes\", bytes);\r\n}\r\nfunction ignoreFunc(reason, offset, bytes, output, badCodepoint) {\r\n    // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes\r\n    if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {\r\n        let i = 0;\r\n        for (let o = offset + 1; o < bytes.length; o++) {\r\n            if (bytes[o] >> 6 !== 0x02) {\r\n                break;\r\n            }\r\n            i++;\r\n        }\r\n        return i;\r\n    }\r\n    // This byte runs us past the end of the string, so just jump to the end\r\n    // (but the first byte was read already read and therefore skipped)\r\n    if (reason === Utf8ErrorReason.OVERRUN) {\r\n        return bytes.length - offset - 1;\r\n    }\r\n    // Nothing to skip\r\n    return 0;\r\n}\r\nfunction replaceFunc(reason, offset, bytes, output, badCodepoint) {\r\n    // Overlong representations are otherwise \"valid\" code points; just non-deistingtished\r\n    if (reason === Utf8ErrorReason.OVERLONG) {\r\n        output.push(badCodepoint);\r\n        return 0;\r\n    }\r\n    // Put the replacement character into the output\r\n    output.push(0xfffd);\r\n    // Otherwise, process as if ignoring errors\r\n    return ignoreFunc(reason, offset, bytes, output, badCodepoint);\r\n}\r\n// Common error handing strategies\r\nexport const Utf8ErrorFuncs = Object.freeze({\r\n    error: errorFunc,\r\n    ignore: ignoreFunc,\r\n    replace: replaceFunc\r\n});\r\n// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499\r\nfunction getUtf8CodePoints(bytes, onError) {\r\n    if (onError == null) {\r\n        onError = Utf8ErrorFuncs.error;\r\n    }\r\n    bytes = arrayify(bytes);\r\n    const result = [];\r\n    let i = 0;\r\n    // Invalid bytes are ignored\r\n    while (i < bytes.length) {\r\n        const c = bytes[i++];\r\n        // 0xxx xxxx\r\n        if (c >> 7 === 0) {\r\n            result.push(c);\r\n            continue;\r\n        }\r\n        // Multibyte; how many bytes left for this character?\r\n        let extraLength = null;\r\n        let overlongMask = null;\r\n        // 110x xxxx 10xx xxxx\r\n        if ((c & 0xe0) === 0xc0) {\r\n            extraLength = 1;\r\n            overlongMask = 0x7f;\r\n            // 1110 xxxx 10xx xxxx 10xx xxxx\r\n        }\r\n        else if ((c & 0xf0) === 0xe0) {\r\n            extraLength = 2;\r\n            overlongMask = 0x7ff;\r\n            // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx\r\n        }\r\n        else if ((c & 0xf8) === 0xf0) {\r\n            extraLength = 3;\r\n            overlongMask = 0xffff;\r\n        }\r\n        else {\r\n            if ((c & 0xc0) === 0x80) {\r\n                i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);\r\n            }\r\n            else {\r\n                i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);\r\n            }\r\n            continue;\r\n        }\r\n        // Do we have enough bytes in our data?\r\n        if (i - 1 + extraLength >= bytes.length) {\r\n            i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);\r\n            continue;\r\n        }\r\n        // Remove the length prefix from the char\r\n        let res = c & ((1 << (8 - extraLength - 1)) - 1);\r\n        for (let j = 0; j < extraLength; j++) {\r\n            let nextChar = bytes[i];\r\n            // Invalid continuation byte\r\n            if ((nextChar & 0xc0) != 0x80) {\r\n                i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);\r\n                res = null;\r\n                break;\r\n            }\r\n            ;\r\n            res = (res << 6) | (nextChar & 0x3f);\r\n            i++;\r\n        }\r\n        // See above loop for invalid continuation byte\r\n        if (res === null) {\r\n            continue;\r\n        }\r\n        // Maximum code point\r\n        if (res > 0x10ffff) {\r\n            i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);\r\n            continue;\r\n        }\r\n        // Reserved for UTF-16 surrogate halves\r\n        if (res >= 0xd800 && res <= 0xdfff) {\r\n            i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);\r\n            continue;\r\n        }\r\n        // Check for overlong sequences (more bytes than needed)\r\n        if (res <= overlongMask) {\r\n            i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);\r\n            continue;\r\n        }\r\n        result.push(res);\r\n    }\r\n    return result;\r\n}\r\n// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\r\nexport function toUtf8Bytes(str, form = UnicodeNormalizationForm.current) {\r\n    if (form != UnicodeNormalizationForm.current) {\r\n        logger.checkNormalize();\r\n        str = str.normalize(form);\r\n    }\r\n    let result = [];\r\n    for (let i = 0; i < str.length; i++) {\r\n        const c = str.charCodeAt(i);\r\n        if (c < 0x80) {\r\n            result.push(c);\r\n        }\r\n        else if (c < 0x800) {\r\n            result.push((c >> 6) | 0xc0);\r\n            result.push((c & 0x3f) | 0x80);\r\n        }\r\n        else if ((c & 0xfc00) == 0xd800) {\r\n            i++;\r\n            const c2 = str.charCodeAt(i);\r\n            if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {\r\n                throw new Error(\"invalid utf-8 string\");\r\n            }\r\n            // Surrogate Pair\r\n            const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\r\n            result.push((pair >> 18) | 0xf0);\r\n            result.push(((pair >> 12) & 0x3f) | 0x80);\r\n            result.push(((pair >> 6) & 0x3f) | 0x80);\r\n            result.push((pair & 0x3f) | 0x80);\r\n        }\r\n        else {\r\n            result.push((c >> 12) | 0xe0);\r\n            result.push(((c >> 6) & 0x3f) | 0x80);\r\n            result.push((c & 0x3f) | 0x80);\r\n        }\r\n    }\r\n    return arrayify(result);\r\n}\r\n;\r\nfunction escapeChar(value) {\r\n    const hex = (\"0000\" + value.toString(16));\r\n    return \"\\\\u\" + hex.substring(hex.length - 4);\r\n}\r\nexport function _toEscapedUtf8String(bytes, onError) {\r\n    return '\"' + getUtf8CodePoints(bytes, onError).map((codePoint) => {\r\n        if (codePoint < 256) {\r\n            switch (codePoint) {\r\n                case 8: return \"\\\\b\";\r\n                case 9: return \"\\\\t\";\r\n                case 10: return \"\\\\n\";\r\n                case 13: return \"\\\\r\";\r\n                case 34: return \"\\\\\\\"\";\r\n                case 92: return \"\\\\\\\\\";\r\n            }\r\n            if (codePoint >= 32 && codePoint < 127) {\r\n                return String.fromCharCode(codePoint);\r\n            }\r\n        }\r\n        if (codePoint <= 0xffff) {\r\n            return escapeChar(codePoint);\r\n        }\r\n        codePoint -= 0x10000;\r\n        return escapeChar(((codePoint >> 10) & 0x3ff) + 0xd800) + escapeChar((codePoint & 0x3ff) + 0xdc00);\r\n    }).join(\"\") + '\"';\r\n}\r\nexport function _toUtf8String(codePoints) {\r\n    return codePoints.map((codePoint) => {\r\n        if (codePoint <= 0xffff) {\r\n            return String.fromCharCode(codePoint);\r\n        }\r\n        codePoint -= 0x10000;\r\n        return String.fromCharCode((((codePoint >> 10) & 0x3ff) + 0xd800), ((codePoint & 0x3ff) + 0xdc00));\r\n    }).join(\"\");\r\n}\r\nexport function toUtf8String(bytes, onError) {\r\n    return _toUtf8String(getUtf8CodePoints(bytes, onError));\r\n}\r\nexport function toUtf8CodePoints(str, form = UnicodeNormalizationForm.current) {\r\n    return getUtf8CodePoints(toUtf8Bytes(str, form));\r\n}\r\n//# sourceMappingURL=utf8.js.map"]},"metadata":{},"sourceType":"module"}