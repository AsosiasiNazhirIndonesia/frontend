{"ast":null,"code":"var _jsxFileName = \"C:\\\\spasi\\\\frontend\\\\src\\\\pages\\\\ManageCertificate\\\\ViewCertificate.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { withRouter, Link } from \"react-router-dom\";\nimport SubmitButton from \"../../components/elements/SubmitButton/SubmitButton\";\nimport { CERTIFICATE_STATUS } from \"../../constants/component.constant\";\nimport CertificateSet from \"../../contracts/digital_certificate\";\nimport API from \"../../services/api\";\nimport web3 from \"../../services/web3\";\nimport { history } from \"../../store\";\nimport ProgressBar from \"../../components/elements/ProgressBar/ProgressBar\";\nimport CertificatePDF from \"../../components/CertificatePDF/CertificatePDF\";\nimport jsPDF from \"jspdf\";\nimport DomToImage from \"dom-to-image\";\nimport { useSelector } from \"react-redux\";\nimport { createNotification } from \"../../components/Notification/Notification\";\nimport htmlToText from \"html-to-text\";\nimport linkedinLogo from \"../../assets/images/linkedin.svg\";\nimport styles from \"./ViewCertificate.module.scss\";\nimport Status from \"../../components/elements/Status/Status\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ViewCertificate = props => {\n  _s();\n  const [certificate, setCertificate] = useState({});\n  const [certificateStatus, setCertificateStatus] = useState(0);\n  const [progressBarContent, setProgressBarContent] = useState([]);\n  const [isSigner, setSigner] = useState(false);\n  const [isSigned, setSigned] = useState(true);\n  const [isReceiver, setReceiver] = useState(false);\n  const [isProcessing, setProcessing] = useState(false);\n  const [allowToSigning, setAllowToSigning] = useState(false);\n  const user = useSelector(state => state.getIn([\"actor\", \"user\"]).toJS());\n  const admin = useSelector(state => state.getIn([\"actor\", \"admin\"]).toJS());\n  const certificateId = props.certificateId;\n  const decideSigner = () => {\n    // console.log(progressBarContent[progressBarContent.length - 1], admin);\n    if (!(Object.keys(certificate) <= 0 || progressBarContent.length <= 0 || (user !== null && user !== void 0 && user.user_id ? !user || Object.keys(user) <= 0 : !admin || Object.keys(admin) <= 0))) {\n      let temp = {};\n      setReceiver(progressBarContent[progressBarContent.length - 1].user_id === user.user_id);\n      for (const content of progressBarContent) {\n        if (user !== null && user !== void 0 && user.user_id) {\n          if (content.user_id === user.user_id) {\n            setSigner(true);\n            if (temp.success && !content.success) {\n              setAllowToSigning(true);\n              setSigned(false);\n            } else if (content.success) {\n              setAllowToSigning(false);\n              setSigned(true);\n            } else {\n              setSigned(false);\n              setAllowToSigning(false);\n            }\n          }\n        } else if (admin !== null && admin !== void 0 && admin.admin_id) {\n          if (content.user_id === admin.admin_id) {\n            setSigner(true);\n            if (temp.success && !content.success) {\n              setAllowToSigning(true);\n              setSigned(false);\n            } else if (content.success) {\n              setAllowToSigning(false);\n              setSigned(true);\n            } else {\n              setSigned(false);\n              setAllowToSigning(false);\n            }\n          }\n        }\n        temp = content;\n      }\n    }\n  };\n\n  //TO DO\n  const getCertificate = async () => {\n    const newCert = await API.getCertificateById(certificateId);\n    setCertificate(newCert);\n    getCertificateStatus(newCert.sc_address, newCert.token_id);\n    const newProgressBarContent = [{\n      success: true,\n      text: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles[\"progress-title\"],\n          children: \"Init By:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles[\"progress-link\"],\n          children: newCert.Admin.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this)\n    }];\n    const sortedApprovers = newCert.CertificateSigners.sort((a, b) => {\n      return a.priority - b.priority;\n    });\n    const certificateSet = CertificateSet.getNewInstance(newCert.sc_address);\n    let index = 0;\n    const signedByReceiver = newCert.is_accepted;\n    const signedByApprovers = await certificateSet.methods.signedByApprovers(newCert.token_id).call();\n    for (const approver of sortedApprovers) {\n      const signedByApprover = signedByApprovers[index];\n      const link = /*#__PURE__*/_jsxDEV(Link, {\n        to: \"\",\n        onClick: e => {\n          e.preventDefault();\n          window.open(`/profile?actor_type=USER&actor_public_key=${approver.User.public_key}`, \"_blank\");\n        },\n        children: approver.User.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this);\n      newProgressBarContent.push({\n        success: signedByApprover,\n        text: signedByApprover ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles[\"progress-title\"],\n            children: \"Signed by :\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles[\"progress-link\"],\n            children: link\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles[\"progress-title\"],\n            children: \"Assign to:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles[\"progress-link\"],\n            children: link\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this),\n        user_id: approver.user_id\n      });\n      index++;\n    }\n\n    // const signedByReceiver = await certificateSet.methods\n    //   .signedByReceiver(newCert.token_id)\n    //   .call();\n\n    const link = /*#__PURE__*/_jsxDEV(Link, {\n      to: \"\",\n      onClick: e => {\n        e.preventDefault();\n        window.open(`/profile?actor_type=USER&actor_public_key=${newCert.User.public_key}`, \"_blank\");\n      },\n      children: newCert.User.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this);\n    newProgressBarContent.push({\n      success: signedByReceiver,\n      text: signedByReceiver ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles[\"progress-title\"],\n          children: \"Received by :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles[\"progress-link\"],\n          children: link\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles[\"progress-title\"],\n          children: \"Send to :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles[\"progress-link\"],\n          children: link\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this),\n      user_id: newCert.user_id\n    });\n    setProgressBarContent(newProgressBarContent);\n  };\n  const getCertificateStatus = async (scAddress, tokenId) => {\n    if (!web3.utils.isAddress(scAddress)) {\n      return;\n    }\n    const certificateSet = CertificateSet.getNewInstance(scAddress);\n    setCertificateStatus(await certificateSet.methods.status(tokenId).call());\n  };\n  useEffect(() => {\n    if (Object.keys(certificate) <= 0) {\n      getCertificate();\n    }\n    if (user || admin) {\n      decideSigner();\n    }\n  }, [props.certificateId, certificate, certificateStatus, progressBarContent]);\n  const LazyDownloadPDFButton = async () => {\n    const pdf = new jsPDF(\"l\", \"px\", [595, 842]);\n    if (pdf) {\n      const input = document.getElementById(\"certificateImage\");\n      DomToImage.toPng(input).then(imgData => {\n        pdf.addImage(imgData, \"PNG\", 0, 0, 842, 595);\n        pdf.save(\"digital-certificate.pdf\");\n      });\n    }\n  };\n  const UploadPNGButton = async () => {\n    setProcessing(true);\n    const fileBlob = await DomToImage.toBlob(document.getElementById(\"certificateImage\")).then(function (blob) {\n      return blob;\n    });\n    const ipfsURI = await API.uploadFileToIPFS(fileBlob, certificate.token_id);\n    const certificateSet = CertificateSet.getNewInstance(certificate.sc_address);\n    const accounts = await web3.eth.getAccounts();\n    const tx = certificateSet.methods.setURI(certificate.token_id, ipfsURI);\n    createNotification({\n      type: \"Set URI...\",\n      value: \"Please check your metamask and stay on this page until new URI is set\"\n    });\n    const res = await tx.send({\n      from: accounts[0],\n      gas: 3000000,\n      gasPrice: \"30000000000\"\n    });\n    setProcessing(false);\n  };\n  const getDataToSign = certificate => {\n    const {\n      receiver_name,\n      no,\n      title,\n      description,\n      score,\n      date\n    } = certificate;\n    const descriptionText = htmlToText.fromString(description).replace(/(\\r\\n|\\n|\\r| )/gm, \"\");\n    const mergeCertificateData = (receiver_name + no + title + descriptionText + score + date).replace(/(\\r\\n|\\n|\\r| )/gm, \"\");\n    return web3.utils.keccak256(mergeCertificateData);\n  };\n  const getSignature = async certificate => {\n    const certificateHash = getDataToSign(certificate);\n    const accounts = await web3.eth.getAccounts();\n    const signature = await web3.eth.personal.sign(certificateHash, accounts[0]);\n    return signature;\n  };\n  const onSign = async () => {\n    setProcessing(true);\n    createNotification({\n      type: \"Signing...\",\n      value: \"Please check your metamask and click SIGN\"\n    });\n    try {\n      let tokenId = certificate.token_id;\n      if (!isReceiver) {\n        // Receiver tidak perlu klik Accept\n\n        const accounts = await web3.eth.getAccounts();\n        const certificateSet = CertificateSet.getNewInstance(certificate.sc_address);\n        const signature = await getSignature(certificate);\n        let method;\n        if (tokenId === '111111111111111111111111111111111111111111111111') {\n          const today = new Date();\n          const thisMonth = today.getMonth();\n          let approvers = [];\n          for (const signer of certificate.CertificateSigners) {\n            approvers.push(signer.User.public_key);\n          }\n          const tx = certificateSet.methods.mint(certificate.User.public_key, 0, Math.floor(new Date(today.setMonth(thisMonth + 12)).getTime() / 1000), getDataToSign(certificate), approvers);\n          const accounts = await web3.eth.getAccounts();\n          try {\n            createNotification({\n              type: \"Minting...\",\n              value: \"Please check your metamask and stay on this page until Certificate is Minted to blockchain\"\n            });\n            await tx.send({\n              from: accounts[0],\n              gas: 3000000,\n              gasPrice: \"30000000000\"\n            }).then(async function (receipt) {\n              tokenId = receipt.events.TransferSingle.returnValues.id;\n              try {\n                await API.updateCertificate({\n                  certificate_id: certificateId,\n                  admin_id: certificate.admin_id,\n                  user_id: certificate.user_id,\n                  logo: certificate.logo,\n                  name: certificate.name,\n                  title: certificate.title,\n                  no: certificate.no,\n                  description: certificate.description,\n                  score: certificate.score,\n                  date: certificate.date,\n                  sc_address: certificate.sc_address,\n                  token_id: tokenId,\n                  receiver_name: certificate.receiver_name,\n                  is_accepted: String(certificate.is_accepted),\n                  certificate_type_id: certificate.certificate_type_id\n                });\n                createNotification({\n                  type: \"success\",\n                  value: \"Update TokenId Success\"\n                });\n              } catch (e) {\n                console.log(e);\n                createNotification({\n                  type: \"error\",\n                  value: \"Can't update TokenId to Database\"\n                });\n              }\n            });\n          } catch (e) {\n            console.log(e);\n            createNotification({\n              type: \"error\",\n              value: \"Minting Error\"\n            });\n          }\n        }\n        method = certificateSet.methods.approverSigning(tokenId, signature);\n        await method.send({\n          from: accounts[0],\n          gasLimit: await method.estimateGas({\n            from: accounts[0]\n          }),\n          gasPrice: \"100000000000\"\n        }).then(async function (receipt) {\n          await API.signingCertificate({\n            user_id: user.user_id || (admin === null || admin === void 0 ? void 0 : admin.admin_id),\n            certificate_id: certificate.certificate_id\n          });\n          createNotification({\n            type: \"success\",\n            value: \"Your signature submitted on blockchain and saved to database!\"\n          });\n        });\n      } else {\n        try {\n          await API.updateCertificate({\n            certificate_id: certificateId,\n            admin_id: certificate.admin_id,\n            user_id: certificate.user_id,\n            logo: certificate.logo,\n            name: certificate.name,\n            title: certificate.title,\n            no: certificate.no,\n            description: certificate.description,\n            score: certificate.score,\n            date: certificate.date,\n            sc_address: certificate.sc_address,\n            token_id: tokenId,\n            receiver_name: certificate.receiver_name,\n            is_accepted: String(true),\n            certificate_type_id: certificate.certificate_type_id\n          });\n          createNotification({\n            type: \"success\",\n            value: \"Update IsAccepted Success\"\n          });\n        } catch (e) {\n          console.log(e);\n          createNotification({\n            type: \"error\",\n            value: \"Can't update IsAccepted to Database\"\n          });\n        }\n        createNotification({\n          type: \"success\",\n          value: \"Your signature saved to database!\"\n        });\n\n        // } catch (e) {\n        //   createNotification({\n        //     type: \"error\",\n        //     value: typeof e === \"object\" ? e.message : e,\n        //   });\n        // }\n      }\n\n      getCertificate();\n    } catch (e) {\n      createNotification({\n        type: \"error\",\n        value: typeof e === \"object\" ? e.message : e\n      });\n    }\n    setProcessing(false);\n  };\n  const shareToLinkedIn = () => {\n    const dateArr = certificate.date.split(\"-\");\n    //To Do : change ip address, add token id\n    window.open(`https://www.linkedin.com/profile/add?startTask=Spasi%20Blockchain%20Based%20Digital%20Certificate&name=${certificate.name}&organizationId=75615928&issueYear=${dateArr[2]}&issueMonth=${dateArr[1]}&expirationYear=0&expirationMonth=0&certUrl=http%3A%2F%2F103.172.204.60%2F%3Fcontract_address%3D${certificate.sc_address}`);\n  };\n  console.log(\"##################################################\");\n  console.log(certificateStatus);\n  console.log(allowToSigning);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.documentContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        className: styles[\"form-document-status\"],\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles[\"document-name\"],\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: styles[\"document-name-title\"],\n            children: \"Document Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 479,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: styles[\"document-name-value\"],\n            children: certificate === null || certificate === void 0 ? void 0 : certificate.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 482,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 478,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles[\"status\"],\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: styles[\"status-title\"],\n            children: \"Status:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 487,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Status, {\n            value: CERTIFICATE_STATUS[certificateStatus]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 488,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n        progress: progressBarContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles[\"view-action-btn\"],\n        children: [isReceiver ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles[\"share-btn\"],\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            alt: \"\",\n            src: linkedinLogo,\n            onClick: () => {\n              shareToLinkedIn();\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 495,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 494,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), isReceiver ? /*#__PURE__*/_jsxDEV(SubmitButton, {\n          buttonText: \"Download\",\n          onClick: () => {\n            LazyDownloadPDFButton();\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), !isReceiver ? /*#__PURE__*/_jsxDEV(SubmitButton, {\n          buttonText: \"Upload\",\n          onClick: async () => {\n            await UploadPNGButton();\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 524,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(SubmitButton, {\n          buttonText: \"View\",\n          onClick: async () => {\n            window.open(`https://testnets.opensea.io/assets/goerli/${certificate.sc_address}/${certificate.token_id}`, \"__blank\");\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles[\"view-pdf\"],\n      children: [/*#__PURE__*/_jsxDEV(CertificatePDF, {\n        certificateTitle: certificate.title,\n        receiverName: certificate.receiver_name,\n        certificateNo: certificate.no,\n        certificateDescription: certificate.description,\n        certificateScore: certificate.score,\n        certificateDate: certificate.date,\n        scAddress: certificate.sc_address,\n        tokenId: certificate.token_id,\n        certificateLogo: certificate.logo,\n        certificateSigners: certificate.CertificateSigners\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 9\n      }, this), isSigner ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles[\"btn-done\"],\n        children: /*#__PURE__*/_jsxDEV(SubmitButton, {\n          isProcessing: isProcessing,\n          disabled: !allowToSigning || certificate.is_accepted,\n          buttonText: isSigned && !isReceiver ? \"Signed\" : isSigned && isReceiver ? \"Accepted\" : isReceiver ? \"Accept\" : \"Sign\",\n          onClick: () => {\n            onSign();\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 553,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 537,\n      columnNumber: 7\n    }, this), props.actor ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles[\"btn-done\"],\n      children: /*#__PURE__*/_jsxDEV(SubmitButton, {\n        buttonText: \"Back\",\n        onClick: () => {\n          history.push(`/dashboard/${props.actor}?menu=manage-certificate`);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 576,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 575,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 475,\n    columnNumber: 5\n  }, this);\n};\n_s(ViewCertificate, \"ydqrEw932dtyySqPfPxZTRl0fPc=\", false, function () {\n  return [useSelector, useSelector];\n});\n_c = ViewCertificate;\nexport default _c3 = /*#__PURE__*/React.memo(_c2 = withRouter(ViewCertificate));\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"ViewCertificate\");\n$RefreshReg$(_c2, \"%default%$React.memo\");\n$RefreshReg$(_c3, \"%default%\");","map":{"version":3,"names":["React","useEffect","useState","withRouter","Link","SubmitButton","CERTIFICATE_STATUS","CertificateSet","API","web3","history","ProgressBar","CertificatePDF","jsPDF","DomToImage","useSelector","createNotification","htmlToText","linkedinLogo","styles","Status","jsxDEV","_jsxDEV","Fragment","_Fragment","ViewCertificate","props","_s","certificate","setCertificate","certificateStatus","setCertificateStatus","progressBarContent","setProgressBarContent","isSigner","setSigner","isSigned","setSigned","isReceiver","setReceiver","isProcessing","setProcessing","allowToSigning","setAllowToSigning","user","state","getIn","toJS","admin","certificateId","decideSigner","Object","keys","length","user_id","temp","content","success","admin_id","getCertificate","newCert","getCertificateById","getCertificateStatus","sc_address","token_id","newProgressBarContent","text","children","className","fileName","_jsxFileName","lineNumber","columnNumber","Admin","name","sortedApprovers","CertificateSigners","sort","a","b","priority","certificateSet","getNewInstance","index","signedByReceiver","is_accepted","signedByApprovers","methods","call","approver","signedByApprover","link","to","onClick","e","preventDefault","window","open","User","public_key","push","scAddress","tokenId","utils","isAddress","status","LazyDownloadPDFButton","pdf","input","document","getElementById","toPng","then","imgData","addImage","save","UploadPNGButton","fileBlob","toBlob","blob","ipfsURI","uploadFileToIPFS","accounts","eth","getAccounts","tx","setURI","type","value","res","send","from","gas","gasPrice","getDataToSign","receiver_name","no","title","description","score","date","descriptionText","fromString","replace","mergeCertificateData","keccak256","getSignature","certificateHash","signature","personal","sign","onSign","method","today","Date","thisMonth","getMonth","approvers","signer","mint","Math","floor","setMonth","getTime","receipt","events","TransferSingle","returnValues","id","updateCertificate","certificate_id","logo","String","certificate_type_id","console","log","approverSigning","gasLimit","estimateGas","signingCertificate","message","shareToLinkedIn","dateArr","split","container","documentContainer","progress","alt","src","buttonText","certificateTitle","receiverName","certificateNo","certificateDescription","certificateScore","certificateDate","certificateLogo","certificateSigners","disabled","actor","_c","_c3","memo","_c2","$RefreshReg$"],"sources":["C:/spasi/frontend/src/pages/ManageCertificate/ViewCertificate.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { withRouter, Link } from \"react-router-dom\";\r\nimport SubmitButton from \"../../components/elements/SubmitButton/SubmitButton\";\r\nimport { CERTIFICATE_STATUS } from \"../../constants/component.constant\";\r\nimport CertificateSet from \"../../contracts/digital_certificate\";\r\nimport API from \"../../services/api\";\r\nimport web3 from \"../../services/web3\";\r\nimport { history } from \"../../store\";\r\nimport ProgressBar from \"../../components/elements/ProgressBar/ProgressBar\";\r\nimport CertificatePDF from \"../../components/CertificatePDF/CertificatePDF\";\r\nimport jsPDF from \"jspdf\";\r\nimport DomToImage from \"dom-to-image\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { createNotification } from \"../../components/Notification/Notification\";\r\nimport htmlToText from \"html-to-text\";\r\nimport linkedinLogo from \"../../assets/images/linkedin.svg\";\r\n\r\nimport styles from \"./ViewCertificate.module.scss\";\r\nimport Status from \"../../components/elements/Status/Status\";\r\n\r\nconst ViewCertificate = (props) => {\r\n  const [certificate, setCertificate] = useState({});\r\n  const [certificateStatus, setCertificateStatus] = useState(0);\r\n  const [progressBarContent, setProgressBarContent] = useState([]);\r\n  const [isSigner, setSigner] = useState(false);\r\n  const [isSigned, setSigned] = useState(true);\r\n  const [isReceiver, setReceiver] = useState(false);\r\n  const [isProcessing, setProcessing] = useState(false);\r\n  const [allowToSigning, setAllowToSigning] = useState(false);\r\n  const user = useSelector((state) => state.getIn([\"actor\", \"user\"]).toJS());\r\n  const admin = useSelector((state) => state.getIn([\"actor\", \"admin\"]).toJS());\r\n  const certificateId = props.certificateId;\r\n\r\n  const decideSigner = () => {\r\n    // console.log(progressBarContent[progressBarContent.length - 1], admin);\r\n    if (\r\n      !(\r\n        Object.keys(certificate) <= 0 ||\r\n        progressBarContent.length <= 0 ||\r\n        (user?.user_id\r\n          ? !user || Object.keys(user) <= 0\r\n          : !admin || Object.keys(admin) <= 0)\r\n      )\r\n    ) {\r\n      let temp = {};\r\n      \r\n      setReceiver(\r\n        progressBarContent[progressBarContent.length - 1].user_id ===\r\n          user.user_id\r\n      );\r\n      for (const content of progressBarContent) {\r\n        if (user?.user_id) {\r\n          if (content.user_id === user.user_id) {\r\n            setSigner(true);\r\n            if (temp.success && !content.success) {\r\n              setAllowToSigning(true);\r\n              setSigned(false);\r\n            } else if (content.success) {\r\n              setAllowToSigning(false);\r\n              setSigned(true);\r\n            } else {\r\n              setSigned(false);\r\n              setAllowToSigning(false);\r\n            }\r\n          }\r\n        } else if (admin?.admin_id) {\r\n          if (content.user_id === admin.admin_id) {\r\n            setSigner(true);\r\n            if (temp.success && !content.success) {\r\n              setAllowToSigning(true);\r\n              setSigned(false);\r\n            } else if (content.success) {\r\n              setAllowToSigning(false);\r\n              setSigned(true);\r\n            } else {\r\n              setSigned(false);\r\n              setAllowToSigning(false);\r\n            }\r\n          }\r\n        }\r\n        temp = content;\r\n      }\r\n    }\r\n  };\r\n\r\n  //TO DO\r\n  const getCertificate = async () => {\r\n    const newCert = await API.getCertificateById(certificateId);\r\n    setCertificate(newCert);\r\n    getCertificateStatus(newCert.sc_address, newCert.token_id);\r\n\r\n    const newProgressBarContent = [\r\n      {\r\n        success: true,\r\n        text: (\r\n          <div>\r\n            <div className={styles[\"progress-title\"]}>Init By:</div>\r\n            <div className={styles[\"progress-link\"]}>{newCert.Admin.name}</div>\r\n          </div>\r\n        ),\r\n      },\r\n    ];\r\n\r\n    const sortedApprovers = newCert.CertificateSigners.sort((a, b) => {\r\n      return a.priority - b.priority;\r\n    });\r\n\r\n    const certificateSet = CertificateSet.getNewInstance(newCert.sc_address);\r\n    let index = 0;\r\n    const signedByReceiver = newCert.is_accepted;\r\n    const signedByApprovers = await certificateSet.methods\r\n      .signedByApprovers(newCert.token_id)\r\n      .call();\r\n\r\n    for (const approver of sortedApprovers) {\r\n\r\n      const signedByApprover = signedByApprovers[index];\r\n      const link = (\r\n        <Link\r\n          to=\"\"\r\n          onClick={(e) => {\r\n            e.preventDefault();\r\n            window.open(\r\n              `/profile?actor_type=USER&actor_public_key=${approver.User.public_key}`,\r\n              \"_blank\"\r\n            );\r\n          }}\r\n        >\r\n          {approver.User.name}\r\n        </Link>\r\n      );\r\n\r\n      newProgressBarContent.push({\r\n        success: signedByApprover,\r\n        text: signedByApprover ? (\r\n          <div>\r\n            <div className={styles[\"progress-title\"]}>Signed by :</div>\r\n            <div className={styles[\"progress-link\"]}>{link}</div>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <div className={styles[\"progress-title\"]}>Assign to:</div>\r\n            <div className={styles[\"progress-link\"]}>{link}</div>\r\n          </div>\r\n        ),\r\n        user_id: approver.user_id,\r\n      });\r\n      index++;\r\n    }\r\n\r\n    // const signedByReceiver = await certificateSet.methods\r\n    //   .signedByReceiver(newCert.token_id)\r\n    //   .call();\r\n\r\n    const link = (\r\n      <Link\r\n        to=\"\"\r\n        onClick={(e) => {\r\n          e.preventDefault();\r\n          window.open(\r\n            `/profile?actor_type=USER&actor_public_key=${newCert.User.public_key}`,\r\n            \"_blank\"\r\n          );\r\n        }}\r\n      >\r\n        {newCert.User.name}\r\n      </Link>\r\n    );\r\n    \r\n    newProgressBarContent.push({\r\n      success: signedByReceiver,\r\n      text: signedByReceiver ? (\r\n        <div>\r\n          <div className={styles[\"progress-title\"]}>Received by :</div>\r\n          <div className={styles[\"progress-link\"]}>{link}</div>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <div className={styles[\"progress-title\"]}>Send to :</div>\r\n          <div className={styles[\"progress-link\"]}>{link}</div>\r\n        </div>\r\n      ),\r\n      user_id: newCert.user_id,\r\n    });\r\n\r\n    setProgressBarContent(newProgressBarContent);\r\n  };\r\n\r\n  const getCertificateStatus = async (scAddress, tokenId) => {\r\n    if (!web3.utils.isAddress(scAddress)) {\r\n      return;\r\n    }\r\n    const certificateSet = CertificateSet.getNewInstance(scAddress);\r\n    setCertificateStatus(await certificateSet.methods.status(tokenId).call());\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(certificate) <= 0) {\r\n      getCertificate();\r\n    }\r\n\r\n    if (user || admin) {\r\n      decideSigner();\r\n    }\r\n  }, [props.certificateId, certificate, certificateStatus, progressBarContent]);\r\n\r\n  const LazyDownloadPDFButton = async () => {\r\n    const pdf = new jsPDF(\"l\", \"px\", [595, 842]);\r\n    if (pdf) {\r\n      const input = document.getElementById(\"certificateImage\");\r\n      DomToImage.toPng(input).then((imgData) => {\r\n        pdf.addImage(imgData, \"PNG\", 0, 0, 842, 595);\r\n        pdf.save(\"digital-certificate.pdf\");\r\n      });\r\n    }\r\n  };\r\n\r\n  const UploadPNGButton = async () => {\r\n    setProcessing(true);\r\n    const fileBlob = await DomToImage.toBlob(\r\n      document.getElementById(\"certificateImage\")\r\n    ).then(function (blob) {\r\n      return blob;\r\n    });\r\n    const ipfsURI = await API.uploadFileToIPFS(fileBlob, certificate.token_id);\r\n    const certificateSet = CertificateSet.getNewInstance(\r\n      certificate.sc_address\r\n    );\r\n    const accounts = await web3.eth.getAccounts();\r\n\r\n    const tx = certificateSet.methods.setURI(certificate.token_id, ipfsURI);\r\n\r\n    createNotification({\r\n      type: \"Set URI...\",\r\n      value:\r\n        \"Please check your metamask and stay on this page until new URI is set\",\r\n    });\r\n\r\n    const res = await tx.send({\r\n      from: accounts[0],\r\n      gas: 3000000,\r\n      gasPrice: \"30000000000\",\r\n    });\r\n    setProcessing(false);\r\n  };\r\n\r\n  const getDataToSign = (certificate) => {\r\n    const { receiver_name, no, title, description, score, date } = certificate;\r\n    const descriptionText = htmlToText\r\n      .fromString(description)\r\n      .replace(/(\\r\\n|\\n|\\r| )/gm, \"\");\r\n    const mergeCertificateData = (\r\n      receiver_name +\r\n      no +\r\n      title +\r\n      descriptionText +\r\n      score +\r\n      date\r\n    ).replace(/(\\r\\n|\\n|\\r| )/gm, \"\");\r\n\r\n    return web3.utils.keccak256(mergeCertificateData);\r\n  };\r\n\r\n  const getSignature = async (certificate) => {\r\n    const certificateHash = getDataToSign(certificate);\r\n    const accounts = await web3.eth.getAccounts();\r\n    const signature = await web3.eth.personal.sign(\r\n      certificateHash,\r\n      accounts[0]\r\n    );\r\n    return signature;\r\n  };\r\n\r\n  const onSign = async () => {\r\n    setProcessing(true);\r\n    createNotification({\r\n      type: \"Signing...\",\r\n      value: \"Please check your metamask and click SIGN\",\r\n    });\r\n    try {\r\n\r\n\r\n      let tokenId = certificate.token_id;\r\n\r\n      if (!isReceiver) { // Receiver tidak perlu klik Accept\r\n\r\n        const accounts = await web3.eth.getAccounts();\r\n        const certificateSet = CertificateSet.getNewInstance(\r\n          certificate.sc_address\r\n        );\r\n        const signature = await getSignature(certificate);\r\n  \r\n        let method;\r\n\r\n        if (tokenId === '111111111111111111111111111111111111111111111111')\r\n        \r\n        {\r\n\r\n            const today = new Date();\r\n\r\n            const thisMonth = today.getMonth();\r\n\r\n            let approvers = [];\r\n            for (const signer of certificate.CertificateSigners) {\r\n              approvers.push(signer.User.public_key);\r\n            }\r\n\r\n            const tx = certificateSet.methods.mint(\r\n              certificate.User.public_key,\r\n              0,\r\n              Math.floor(new Date(today.setMonth(thisMonth + 12)).getTime() / 1000),\r\n              getDataToSign(certificate),\r\n              approvers\r\n            );\r\n\r\n            const accounts = await web3.eth.getAccounts();\r\n\r\n            try {\r\n              createNotification({\r\n                type: \"Minting...\",\r\n                value:\r\n                  \"Please check your metamask and stay on this page until Certificate is Minted to blockchain\",\r\n              });\r\n\r\n              await tx.send({\r\n                from: accounts[0],\r\n                gas: 3000000,\r\n                gasPrice: \"30000000000\",\r\n              }).then(async function (receipt) {\r\n                tokenId = receipt.events.TransferSingle.returnValues.id;\r\n                try {\r\n                  await API.updateCertificate({\r\n                    certificate_id: certificateId,\r\n                    admin_id: certificate.admin_id,\r\n                    user_id: certificate.user_id,\r\n                    logo: certificate.logo,\r\n                    name: certificate.name,\r\n                    title: certificate.title,\r\n                    no: certificate.no,\r\n                    description: certificate.description,\r\n                    score: certificate.score,\r\n                    date: certificate.date,\r\n                    sc_address: certificate.sc_address,\r\n                    token_id: tokenId,\r\n                    receiver_name: certificate.receiver_name,\r\n                    is_accepted: String(certificate.is_accepted),\r\n                    certificate_type_id: certificate.certificate_type_id\r\n                    });\r\n          \r\n                    createNotification({\r\n                      type: \"success\",\r\n                      value: \"Update TokenId Success\",\r\n                    });\r\n      \r\n                  } catch (e) {\r\n                    console.log(e);\r\n                    createNotification({\r\n                      type: \"error\",\r\n                      value: \"Can't update TokenId to Database\",\r\n                    });\r\n                  }\r\n                });\r\n\r\n            } catch (e) {\r\n              console.log(e);\r\n              createNotification({\r\n                type: \"error\",\r\n                value: \"Minting Error\",\r\n              });\r\n            }\r\n\r\n        }\r\n\r\n        method = certificateSet.methods.approverSigning(\r\n          tokenId,\r\n          signature\r\n        );\r\n        await method.send({\r\n          from: accounts[0],\r\n          gasLimit: await method.estimateGas({ from: accounts[0] }),\r\n          gasPrice: \"100000000000\",\r\n        }).then(async function (receipt) {\r\n\r\n          await API.signingCertificate({\r\n            user_id: user.user_id || admin?.admin_id,\r\n            certificate_id: certificate.certificate_id,\r\n          });\r\n\r\n          createNotification({\r\n            type: \"success\",\r\n            value: \"Your signature submitted on blockchain and saved to database!\",\r\n          });\r\n        });\r\n\r\n\r\n        \r\n\r\n\r\n      }\r\n\r\n      else\r\n      {\r\n\r\n        try {\r\n          await API.updateCertificate({\r\n            certificate_id: certificateId,\r\n            admin_id: certificate.admin_id,\r\n            user_id: certificate.user_id,\r\n            logo: certificate.logo,\r\n            name: certificate.name,\r\n            title: certificate.title,\r\n            no: certificate.no,\r\n            description: certificate.description,\r\n            score: certificate.score,\r\n            date: certificate.date,\r\n            sc_address: certificate.sc_address,\r\n            token_id: tokenId,\r\n            receiver_name: certificate.receiver_name,\r\n            is_accepted: String(true),\r\n            certificate_type_id: certificate.certificate_type_id\r\n            });\r\n  \r\n            createNotification({\r\n              type: \"success\",\r\n              value: \"Update IsAccepted Success\",\r\n            });\r\n\r\n          } catch (e) {\r\n            console.log(e);\r\n            createNotification({\r\n              type: \"error\",\r\n              value: \"Can't update IsAccepted to Database\",\r\n            });\r\n          }\r\n\r\n          createNotification({\r\n            type: \"success\",\r\n            value: \"Your signature saved to database!\",\r\n          });\r\n\r\n        // } catch (e) {\r\n        //   createNotification({\r\n        //     type: \"error\",\r\n        //     value: typeof e === \"object\" ? e.message : e,\r\n        //   });\r\n        // }\r\n      }\r\n\r\n      getCertificate();\r\n\r\n\r\n    } catch (e) {\r\n      createNotification({\r\n        type: \"error\",\r\n        value: typeof e === \"object\" ? e.message : e,\r\n      });\r\n    }\r\n\r\n    setProcessing(false);\r\n  };\r\n\r\n  const shareToLinkedIn = () => {\r\n    const dateArr = certificate.date.split(\"-\");\r\n    //To Do : change ip address, add token id\r\n    window.open(\r\n      `https://www.linkedin.com/profile/add?startTask=Spasi%20Blockchain%20Based%20Digital%20Certificate&name=${certificate.name}&organizationId=75615928&issueYear=${dateArr[2]}&issueMonth=${dateArr[1]}&expirationYear=0&expirationMonth=0&certUrl=http%3A%2F%2F103.172.204.60%2F%3Fcontract_address%3D${certificate.sc_address}`\r\n    );\r\n  };\r\n\r\n  console.log(\"##################################################\");\r\n  console.log(certificateStatus);\r\n  console.log(allowToSigning);\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <div className={styles.documentContainer}>\r\n        <form className={styles[\"form-document-status\"]}>\r\n          <div className={styles[\"document-name\"]}>\r\n            <span className={styles[\"document-name-title\"]}>\r\n              Document Name:\r\n            </span>\r\n            <span className={styles[\"document-name-value\"]}>\r\n              {certificate?.name}\r\n            </span>\r\n          </div>\r\n          <div className={styles[\"status\"]}>\r\n            <span className={styles[\"status-title\"]}>Status:</span>\r\n            <Status value={CERTIFICATE_STATUS[certificateStatus]} />\r\n          </div>\r\n        </form>\r\n        <ProgressBar progress={progressBarContent} />\r\n        <div className={styles[\"view-action-btn\"]}>\r\n          {isReceiver ? (\r\n            <div className={styles[\"share-btn\"]}>\r\n              <img\r\n                alt=\"\"\r\n                src={linkedinLogo}\r\n                onClick={() => {\r\n                  shareToLinkedIn();\r\n                }}\r\n              />\r\n            </div>\r\n          ) : (\r\n            <></>\r\n          )}\r\n          {isReceiver ? (\r\n            <SubmitButton\r\n              buttonText=\"Download\"\r\n              onClick={() => {\r\n                LazyDownloadPDFButton();\r\n              }}\r\n            ></SubmitButton>\r\n          ) : (\r\n            <></>\r\n          )}\r\n          {!isReceiver ? (\r\n            <SubmitButton\r\n              buttonText=\"Upload\"\r\n              onClick={async () => {\r\n                await UploadPNGButton();\r\n              }}\r\n            ></SubmitButton>\r\n          ) : (\r\n            <div />\r\n          )}\r\n          <SubmitButton\r\n            buttonText=\"View\"\r\n            onClick={async () => {\r\n              window.open(\r\n                `https://testnets.opensea.io/assets/goerli/${certificate.sc_address}/${certificate.token_id}`,\r\n                \"__blank\"\r\n              );\r\n            }}\r\n          ></SubmitButton>\r\n        </div>\r\n      </div>\r\n      <div className={styles[\"view-pdf\"]}>\r\n        <CertificatePDF\r\n          certificateTitle={certificate.title}\r\n          receiverName={certificate.receiver_name}\r\n          certificateNo={certificate.no}\r\n          certificateDescription={certificate.description}\r\n          certificateScore={certificate.score}\r\n          certificateDate={certificate.date}\r\n          scAddress={certificate.sc_address}\r\n          tokenId={certificate.token_id}\r\n          certificateLogo={certificate.logo}\r\n          certificateSigners={certificate.CertificateSigners}\r\n        />\r\n        \r\n        {isSigner ? ( \r\n          <div className={styles[\"btn-done\"]}>\r\n            <SubmitButton\r\n              isProcessing={isProcessing}\r\n              disabled={!allowToSigning || certificate.is_accepted}\r\n              buttonText={\r\n                isSigned && !isReceiver\r\n                  ? \"Signed\"\r\n                  : isSigned && isReceiver\r\n                  ? \"Accepted\"\r\n                  : isReceiver\r\n                  ? \"Accept\"\r\n                  : \"Sign\"\r\n              }\r\n              onClick={() => {\r\n                onSign();\r\n              }}\r\n            ></SubmitButton>\r\n          </div>\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </div>\r\n      {props.actor ? (\r\n        <div className={styles[\"btn-done\"]}>\r\n          <SubmitButton\r\n            buttonText=\"Back\"\r\n            onClick={() => {\r\n              history.push(`/dashboard/${props.actor}?menu=manage-certificate`);\r\n            }}\r\n          ></SubmitButton>\r\n        </div>\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(withRouter(ViewCertificate));\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}