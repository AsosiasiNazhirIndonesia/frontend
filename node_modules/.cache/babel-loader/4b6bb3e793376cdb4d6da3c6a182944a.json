{"ast":null,"code":"/**\r\n * MIT License\r\n *\r\n * Copyright (c) 2021 Andrew Raffensperger\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n *\r\n * This is a near carbon-copy of the original source (link below) with the\r\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\r\n *\r\n * See: https://github.com/adraffy/ens-normalize.js\r\n */\nimport { toUtf8CodePoints } from \"@ethersproject/strings\";\nimport { getData } from './include.js';\nconst r = getData();\nimport { read_member_array, read_mapped_map, read_emoji_trie } from './decoder.js';\n// @TODO: This should be lazily loaded\nconst VALID = new Set(read_member_array(r));\nconst IGNORED = new Set(read_member_array(r));\nconst MAPPED = read_mapped_map(r);\nconst EMOJI_ROOT = read_emoji_trie(r);\n//const NFC_CHECK = new Set(read_member_array(r, Array.from(VALID.values()).sort((a, b) => a - b)));\n//const STOP = 0x2E;\nconst HYPHEN = 0x2D;\nconst UNDERSCORE = 0x5F;\nfunction explode_cp(name) {\n  return toUtf8CodePoints(name);\n}\nfunction filter_fe0f(cps) {\n  return cps.filter(cp => cp != 0xFE0F);\n}\nexport function ens_normalize_post_check(name) {\n  for (let label of name.split('.')) {\n    let cps = explode_cp(label);\n    try {\n      for (let i = cps.lastIndexOf(UNDERSCORE) - 1; i >= 0; i--) {\n        if (cps[i] !== UNDERSCORE) {\n          throw new Error(`underscore only allowed at start`);\n        }\n      }\n      if (cps.length >= 4 && cps.every(cp => cp < 0x80) && cps[2] === HYPHEN && cps[3] === HYPHEN) {\n        throw new Error(`invalid label extension`);\n      }\n    } catch (err) {\n      throw new Error(`Invalid label \"${label}\": ${err.message}`);\n    }\n  }\n  return name;\n}\nexport function ens_normalize(name) {\n  return ens_normalize_post_check(normalize(name, filter_fe0f));\n}\nfunction normalize(name, emoji_filter) {\n  let input = explode_cp(name).reverse(); // flip for pop\n  let output = [];\n  while (input.length) {\n    let emoji = consume_emoji_reversed(input);\n    if (emoji) {\n      output.push(...emoji_filter(emoji));\n      continue;\n    }\n    let cp = input.pop();\n    if (VALID.has(cp)) {\n      output.push(cp);\n      continue;\n    }\n    if (IGNORED.has(cp)) {\n      continue;\n    }\n    let cps = MAPPED[cp];\n    if (cps) {\n      output.push(...cps);\n      continue;\n    }\n    throw new Error(`Disallowed codepoint: 0x${cp.toString(16).toUpperCase()}`);\n  }\n  return ens_normalize_post_check(nfc(String.fromCodePoint(...output)));\n}\nfunction nfc(s) {\n  return s.normalize('NFC');\n}\nfunction consume_emoji_reversed(cps, eaten) {\n  var _a;\n  let node = EMOJI_ROOT;\n  let emoji;\n  let saved;\n  let stack = [];\n  let pos = cps.length;\n  if (eaten) eaten.length = 0; // clear input buffer (if needed)\n  while (pos) {\n    let cp = cps[--pos];\n    node = (_a = node.branches.find(x => x.set.has(cp))) === null || _a === void 0 ? void 0 : _a.node;\n    if (!node) break;\n    if (node.save) {\n      // remember\n      saved = cp;\n    } else if (node.check) {\n      // check exclusion\n      if (cp === saved) break;\n    }\n    stack.push(cp);\n    if (node.fe0f) {\n      stack.push(0xFE0F);\n      if (pos > 0 && cps[pos - 1] == 0xFE0F) pos--; // consume optional FE0F\n    }\n\n    if (node.valid) {\n      // this is a valid emoji (so far)\n      emoji = stack.slice(); // copy stack\n      if (node.valid == 2) emoji.splice(1, 1); // delete FE0F at position 1 (RGI ZWJ don't follow spec!)\n      if (eaten) eaten.push(...cps.slice(pos).reverse()); // copy input (if needed)\n      cps.length = pos; // truncate\n    }\n  }\n\n  return emoji;\n}","map":{"version":3,"sources":["../../src.ts/ens-normalize/lib.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * MIT License\r\n *\r\n * Copyright (c) 2021 Andrew Raffensperger\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n *\r\n * This is a near carbon-copy of the original source (link below) with the\r\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\r\n *\r\n * See: https://github.com/adraffy/ens-normalize.js\r\n */\r\nimport { toUtf8CodePoints } from \"@ethersproject/strings\";\r\nimport { getData } from './include.js';\r\nconst r = getData();\r\nimport { read_member_array, read_mapped_map, read_emoji_trie } from './decoder.js';\r\n// @TODO: This should be lazily loaded\r\nconst VALID = new Set(read_member_array(r));\r\nconst IGNORED = new Set(read_member_array(r));\r\nconst MAPPED = read_mapped_map(r);\r\nconst EMOJI_ROOT = read_emoji_trie(r);\r\n//const NFC_CHECK = new Set(read_member_array(r, Array.from(VALID.values()).sort((a, b) => a - b)));\r\n//const STOP = 0x2E;\r\nconst HYPHEN = 0x2D;\r\nconst UNDERSCORE = 0x5F;\r\nfunction explode_cp(name) {\r\n    return toUtf8CodePoints(name);\r\n}\r\nfunction filter_fe0f(cps) {\r\n    return cps.filter(cp => cp != 0xFE0F);\r\n}\r\nexport function ens_normalize_post_check(name) {\r\n    for (let label of name.split('.')) {\r\n        let cps = explode_cp(label);\r\n        try {\r\n            for (let i = cps.lastIndexOf(UNDERSCORE) - 1; i >= 0; i--) {\r\n                if (cps[i] !== UNDERSCORE) {\r\n                    throw new Error(`underscore only allowed at start`);\r\n                }\r\n            }\r\n            if (cps.length >= 4 && cps.every(cp => cp < 0x80) && cps[2] === HYPHEN && cps[3] === HYPHEN) {\r\n                throw new Error(`invalid label extension`);\r\n            }\r\n        }\r\n        catch (err) {\r\n            throw new Error(`Invalid label \"${label}\": ${err.message}`);\r\n        }\r\n    }\r\n    return name;\r\n}\r\nexport function ens_normalize(name) {\r\n    return ens_normalize_post_check(normalize(name, filter_fe0f));\r\n}\r\nfunction normalize(name, emoji_filter) {\r\n    let input = explode_cp(name).reverse(); // flip for pop\r\n    let output = [];\r\n    while (input.length) {\r\n        let emoji = consume_emoji_reversed(input);\r\n        if (emoji) {\r\n            output.push(...emoji_filter(emoji));\r\n            continue;\r\n        }\r\n        let cp = input.pop();\r\n        if (VALID.has(cp)) {\r\n            output.push(cp);\r\n            continue;\r\n        }\r\n        if (IGNORED.has(cp)) {\r\n            continue;\r\n        }\r\n        let cps = MAPPED[cp];\r\n        if (cps) {\r\n            output.push(...cps);\r\n            continue;\r\n        }\r\n        throw new Error(`Disallowed codepoint: 0x${cp.toString(16).toUpperCase()}`);\r\n    }\r\n    return ens_normalize_post_check(nfc(String.fromCodePoint(...output)));\r\n}\r\nfunction nfc(s) {\r\n    return s.normalize('NFC');\r\n}\r\nfunction consume_emoji_reversed(cps, eaten) {\r\n    var _a;\r\n    let node = EMOJI_ROOT;\r\n    let emoji;\r\n    let saved;\r\n    let stack = [];\r\n    let pos = cps.length;\r\n    if (eaten)\r\n        eaten.length = 0; // clear input buffer (if needed)\r\n    while (pos) {\r\n        let cp = cps[--pos];\r\n        node = (_a = node.branches.find(x => x.set.has(cp))) === null || _a === void 0 ? void 0 : _a.node;\r\n        if (!node)\r\n            break;\r\n        if (node.save) { // remember\r\n            saved = cp;\r\n        }\r\n        else if (node.check) { // check exclusion\r\n            if (cp === saved)\r\n                break;\r\n        }\r\n        stack.push(cp);\r\n        if (node.fe0f) {\r\n            stack.push(0xFE0F);\r\n            if (pos > 0 && cps[pos - 1] == 0xFE0F)\r\n                pos--; // consume optional FE0F\r\n        }\r\n        if (node.valid) { // this is a valid emoji (so far)\r\n            emoji = stack.slice(); // copy stack\r\n            if (node.valid == 2)\r\n                emoji.splice(1, 1); // delete FE0F at position 1 (RGI ZWJ don't follow spec!)\r\n            if (eaten)\r\n                eaten.push(...cps.slice(pos).reverse()); // copy input (if needed)\r\n            cps.length = pos; // truncate\r\n        }\r\n    }\r\n    return emoji;\r\n}\r\n//# sourceMappingURL=lib.js.map"]},"metadata":{},"sourceType":"module"}