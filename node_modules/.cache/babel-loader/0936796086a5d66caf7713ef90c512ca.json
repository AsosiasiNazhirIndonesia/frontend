{"ast":null,"code":"var m = (n => (n.MissingApiKey = \"MISSING_API_KEY\", n.ModalNotReady = \"MODAL_NOT_READY\", n.MalformedResponse = \"MALFORMED_RESPONSE\", n.InvalidArgument = \"INVALID_ARGUMENT\", n.ExtensionNotInitialized = \"EXTENSION_NOT_INITIALIZED\", n.IncompatibleExtensions = \"INCOMPATIBLE_EXTENSIONS\", n))(m || {}),\n  a = (i => (i.SyncWeb3Method = \"SYNC_WEB3_METHOD\", i.DuplicateIframe = \"DUPLICATE_IFRAME\", i.ReactNativeEndpointConfiguration = \"REACT_NATIVE_ENDPOINT_CONFIGURATION\", i.DeprecationNotice = \"DEPRECATION_NOTICE\", i))(a || {}),\n  p = (t => (t[t.ParseError = -32700] = \"ParseError\", t[t.InvalidRequest = -32600] = \"InvalidRequest\", t[t.MethodNotFound = -32601] = \"MethodNotFound\", t[t.InvalidParams = -32602] = \"InvalidParams\", t[t.InternalError = -32603] = \"InternalError\", t[t.MagicLinkFailedVerification = -1e4] = \"MagicLinkFailedVerification\", t[t.MagicLinkExpired = -10001] = \"MagicLinkExpired\", t[t.MagicLinkRateLimited = -10002] = \"MagicLinkRateLimited\", t[t.MagicLinkInvalidRedirectURL = -10006] = \"MagicLinkInvalidRedirectURL\", t[t.UserAlreadyLoggedIn = -10003] = \"UserAlreadyLoggedIn\", t[t.UpdateEmailFailed = -10004] = \"UpdateEmailFailed\", t[t.UserRequestEditEmail = -10005] = \"UserRequestEditEmail\", t[t.InactiveRecipient = -10010] = \"InactiveRecipient\", t[t.AccessDeniedToUser = -10011] = \"AccessDeniedToUser\", t))(p || {});\nvar u = (e => (e.LoginWithSms = \"magic_auth_login_with_sms\", e.LoginWithEmailOTP = \"magic_auth_login_with_email_otp\", e.LoginWithMagicLink = \"magic_auth_login_with_magic_link\", e.LoginWithCredential = \"magic_auth_login_with_credential\", e.GetIdToken = \"magic_auth_get_id_token\", e.GenerateIdToken = \"magic_auth_generate_id_token\", e.GetMetadata = \"magic_auth_get_metadata\", e.IsLoggedIn = \"magic_auth_is_logged_in\", e.Logout = \"magic_auth_logout\", e.UpdateEmail = \"magic_auth_update_email\", e.UserSettings = \"magic_auth_settings\", e.UserSettingsTestMode = \"magic_auth_settings_testing_mode\", e.LoginWithSmsTestMode = \"magic_auth_login_with_sms_testing_mode\", e.LoginWithEmailOTPTestMode = \"magic_auth_login_with_email_otp_testing_mode\", e.LoginWithMagicLinkTestMode = \"magic_login_with_magic_link_testing_mode\", e.LoginWithCredentialTestMode = \"magic_auth_login_with_credential_testing_mode\", e.GetIdTokenTestMode = \"magic_auth_get_id_token_testing_mode\", e.GenerateIdTokenTestMode = \"magic_auth_generate_id_token_testing_mode\", e.GetMetadataTestMode = \"magic_auth_get_metadata_testing_mode\", e.IsLoggedInTestMode = \"magic_auth_is_logged_in_testing_mode\", e.LogoutTestMode = \"magic_auth_logout_testing_mode\", e.UpdateEmailTestMode = \"magic_auth_update_email_testing_mode\", e.IntermediaryEvent = \"magic_intermediary_event\", e.RequestAccounts = \"eth_requestAccounts\", e.GetInfo = \"mc_get_wallet_info\", e.ShowUI = \"mc_wallet\", e.RequestUserInfoWithUI = \"mc_request_user_info\", e.Disconnect = \"mc_disconnect\", e.UpdatePhoneNumber = \"magic_auth_update_phone_number\", e.UpdatePhoneNumberTestMode = \"magic_auth_update_phone_number_testing_mode\", e.RecoverAccount = \"magic_auth_recover_account\", e.RecoverAccountTestMode = \"magic_auth_recover_account_testing_mode\", e))(u || {});\nvar o = (_ => (_.MAGIC_HANDLE_RESPONSE = \"MAGIC_HANDLE_RESPONSE\", _.MAGIC_OVERLAY_READY = \"MAGIC_OVERLAY_READY\", _.MAGIC_SHOW_OVERLAY = \"MAGIC_SHOW_OVERLAY\", _.MAGIC_HIDE_OVERLAY = \"MAGIC_HIDE_OVERLAY\", _.MAGIC_HANDLE_EVENT = \"MAGIC_HANDLE_EVENT\", _))(o || {}),\n  r = (s => (s.MAGIC_HANDLE_REQUEST = \"MAGIC_HANDLE_REQUEST\", s))(r || {});\nvar c = (s => (s.Harmony = \"HARMONY\", s))(c || {});\nexport { c as EthChainType, o as MagicIncomingWindowMessage, r as MagicOutgoingWindowMessage, u as MagicPayloadMethod, p as RPCErrorCode, m as SDKErrorCode, a as SDKWarningCode };","map":{"version":3,"sources":["../../src/core/exception-types.ts","../../src/core/json-rpc-types.ts","../../src/core/message-types.ts","../../src/modules/rpc-provider-types.ts"],"names":["SDKErrorCode","SDKWarningCode","RPCErrorCode","MagicPayloadMethod","MagicIncomingWindowMessage","MagicOutgoingWindowMessage","EthChainType"],"mappings":"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","sourcesContent":["export enum SDKErrorCode {\n  MissingApiKey = 'MISSING_API_KEY',\n  ModalNotReady = 'MODAL_NOT_READY',\n  MalformedResponse = 'MALFORMED_RESPONSE',\n  InvalidArgument = 'INVALID_ARGUMENT',\n  ExtensionNotInitialized = 'EXTENSION_NOT_INITIALIZED',\n  IncompatibleExtensions = 'INCOMPATIBLE_EXTENSIONS',\n}\n\nexport enum SDKWarningCode {\n  SyncWeb3Method = 'SYNC_WEB3_METHOD',\n  DuplicateIframe = 'DUPLICATE_IFRAME',\n  ReactNativeEndpointConfiguration = 'REACT_NATIVE_ENDPOINT_CONFIGURATION',\n  DeprecationNotice = 'DEPRECATION_NOTICE',\n}\n\nexport enum RPCErrorCode {\n  // Standard JSON RPC 2.0 Error Codes\n  ParseError = -32700,\n  InvalidRequest = -32600,\n  MethodNotFound = -32601,\n  InvalidParams = -32602,\n  InternalError = -32603,\n\n  // Custom RPC Error Codes\n  MagicLinkFailedVerification = -10000,\n  MagicLinkExpired = -10001,\n  MagicLinkRateLimited = -10002,\n  MagicLinkInvalidRedirectURL = -10006,\n  UserAlreadyLoggedIn = -10003,\n  UpdateEmailFailed = -10004,\n  UserRequestEditEmail = -10005,\n  InactiveRecipient = -10010,\n  AccessDeniedToUser = -10011,\n}\n\nexport type ErrorCode = SDKErrorCode | RPCErrorCode;\nexport type WarningCode = SDKWarningCode;\n","import { RPCErrorCode } from './exception-types';\n\n// --- Request interfaces\n\nexport interface JsonRpcRequestPayload<TParams = any> {\n  jsonrpc: string;\n  id: string | number | null;\n  method: string;\n  params?: TParams;\n}\n\nexport interface JsonRpcRequestCallback {\n  /** Callback executed upon JSON RPC response. */\n  (err: JsonRpcError | null, result?: JsonRpcResponsePayload | null): void;\n}\n\nexport interface JsonRpcBatchRequestCallback {\n  /** Callback executed upon JSON RPC response. */\n  (err: JsonRpcError | null, result?: (JsonRpcResponsePayload | null)[] | null): void;\n}\n\n// --- Response interfaces\n\nexport interface JsonRpcError {\n  message: string;\n  code: RPCErrorCode;\n}\n\nexport interface JsonRpcResponsePayload<ResultType = any> {\n  jsonrpc: string;\n  id: string | number | null;\n  result?: ResultType | null;\n  error?: JsonRpcError | null;\n}\n\nexport interface UserInfo {\n  email?: string;\n}\n\nexport interface WalletInfo {\n  walletType: 'magic' | 'metamask' | 'coinbase_wallet' | 'wallet_connect';\n}\n\nexport interface RequestUserInfoScope {\n  scope?: {\n    email?: 'required' | 'optional';\n  };\n}\n\n// --- Payload methods\n\n/**\n * Enum of JSON RPC methods for interacting with the Magic SDK authentication\n * relayer.\n */\nexport enum MagicPayloadMethod {\n  LoginWithSms = 'magic_auth_login_with_sms',\n  LoginWithEmailOTP = 'magic_auth_login_with_email_otp',\n  LoginWithMagicLink = 'magic_auth_login_with_magic_link',\n  LoginWithCredential = 'magic_auth_login_with_credential',\n  GetIdToken = 'magic_auth_get_id_token',\n  GenerateIdToken = 'magic_auth_generate_id_token',\n  GetMetadata = 'magic_auth_get_metadata',\n  IsLoggedIn = 'magic_auth_is_logged_in',\n  Logout = 'magic_auth_logout',\n  UpdateEmail = 'magic_auth_update_email',\n  UserSettings = 'magic_auth_settings',\n  UserSettingsTestMode = 'magic_auth_settings_testing_mode',\n  LoginWithSmsTestMode = 'magic_auth_login_with_sms_testing_mode',\n  LoginWithEmailOTPTestMode = 'magic_auth_login_with_email_otp_testing_mode',\n  LoginWithMagicLinkTestMode = 'magic_login_with_magic_link_testing_mode',\n  LoginWithCredentialTestMode = 'magic_auth_login_with_credential_testing_mode',\n  GetIdTokenTestMode = 'magic_auth_get_id_token_testing_mode',\n  GenerateIdTokenTestMode = 'magic_auth_generate_id_token_testing_mode',\n  GetMetadataTestMode = 'magic_auth_get_metadata_testing_mode',\n  IsLoggedInTestMode = 'magic_auth_is_logged_in_testing_mode',\n  LogoutTestMode = 'magic_auth_logout_testing_mode',\n  UpdateEmailTestMode = 'magic_auth_update_email_testing_mode',\n  IntermediaryEvent = 'magic_intermediary_event',\n  RequestAccounts = 'eth_requestAccounts',\n  GetInfo = 'mc_get_wallet_info',\n  ShowUI = 'mc_wallet',\n  RequestUserInfoWithUI = 'mc_request_user_info',\n  Disconnect = 'mc_disconnect',\n  UpdatePhoneNumber = 'magic_auth_update_phone_number',\n  UpdatePhoneNumberTestMode = 'magic_auth_update_phone_number_testing_mode',\n  RecoverAccount = 'magic_auth_recover_account',\n  RecoverAccountTestMode = 'magic_auth_recover_account_testing_mode',\n}\n","import { JsonRpcResponsePayload, JsonRpcError, JsonRpcRequestPayload } from './json-rpc-types';\n\nexport enum MagicIncomingWindowMessage {\n  MAGIC_HANDLE_RESPONSE = 'MAGIC_HANDLE_RESPONSE',\n  MAGIC_OVERLAY_READY = 'MAGIC_OVERLAY_READY',\n  MAGIC_SHOW_OVERLAY = 'MAGIC_SHOW_OVERLAY',\n  MAGIC_HIDE_OVERLAY = 'MAGIC_HIDE_OVERLAY',\n  MAGIC_HANDLE_EVENT = 'MAGIC_HANDLE_EVENT',\n}\n\nexport enum MagicOutgoingWindowMessage {\n  MAGIC_HANDLE_REQUEST = 'MAGIC_HANDLE_REQUEST',\n}\n\n/** The shape of responding window message datas from the Magic iframe context. */\nexport interface MagicMessageRequest {\n  msgType: string;\n  payload: JsonRpcRequestPayload | JsonRpcRequestPayload[];\n  rt?: string;\n  jwt?: string;\n}\n\n/** The shape of responding window message datas from the Magic iframe context. */\nexport interface MagicMessageResponse<ResultType = any> {\n  msgType: string;\n  response: Partial<JsonRpcError> & Partial<JsonRpcResponsePayload<ResultType>>;\n  rt?: string;\n}\n\n/** The expected message event returned by the Magic iframe context. */\nexport interface MagicMessageEvent extends Partial<MessageEvent> {\n  data: MagicMessageResponse;\n}\n","export type EthNetworkName = 'mainnet' | 'goerli';\n\nexport enum EthChainType {\n  Harmony = 'HARMONY',\n}\n\nexport interface CustomNodeConfiguration {\n  rpcUrl: string;\n  chainId?: number;\n  chainType?: EthChainType;\n}\n\nexport type EthNetworkConfiguration = EthNetworkName | CustomNodeConfiguration;\n"]},"metadata":{},"sourceType":"module"}