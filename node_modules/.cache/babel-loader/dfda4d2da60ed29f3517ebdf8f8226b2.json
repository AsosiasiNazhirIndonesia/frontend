{"ast":null,"code":"// Wrap\n// wraps a string by a certain width\n\nvar makeString = require('./helper/makeString');\nmodule.exports = function wrap(str, options) {\n  str = makeString(str);\n  options = options || {};\n  var width = options.width || 75;\n  var seperator = options.seperator || '\\n';\n  var cut = options.cut || false;\n  var preserveSpaces = options.preserveSpaces || false;\n  var trailingSpaces = options.trailingSpaces || false;\n  var result;\n  if (width <= 0) {\n    return str;\n  } else if (!cut) {\n    var words = str.split(' ');\n    var current_column = 0;\n    result = '';\n    while (words.length > 0) {\n      // if adding a space and the next word would cause this line to be longer than width...\n      if (1 + words[0].length + current_column > width) {\n        //start a new line if this line is not already empty\n        if (current_column > 0) {\n          // add a space at the end of the line is preserveSpaces is true\n          if (preserveSpaces) {\n            result += ' ';\n            current_column++;\n          }\n          // fill the rest of the line with spaces if trailingSpaces option is true\n          else if (trailingSpaces) {\n            while (current_column < width) {\n              result += ' ';\n              current_column++;\n            }\n          }\n          //start new line\n          result += seperator;\n          current_column = 0;\n        }\n      }\n\n      // if not at the begining of the line, add a space in front of the word\n      if (current_column > 0) {\n        result += ' ';\n        current_column++;\n      }\n\n      // tack on the next word, update current column, a pop words array\n      result += words[0];\n      current_column += words[0].length;\n      words.shift();\n    }\n\n    // fill the rest of the line with spaces if trailingSpaces option is true\n    if (trailingSpaces) {\n      while (current_column < width) {\n        result += ' ';\n        current_column++;\n      }\n    }\n    return result;\n  } else {\n    var index = 0;\n    result = '';\n\n    // walk through each character and add seperators where appropriate\n    while (index < str.length) {\n      if (index % width == 0 && index > 0) {\n        result += seperator;\n      }\n      result += str.charAt(index);\n      index++;\n    }\n\n    // fill the rest of the line with spaces if trailingSpaces option is true\n    if (trailingSpaces) {\n      while (index % width > 0) {\n        result += ' ';\n        index++;\n      }\n    }\n    return result;\n  }\n};","map":{"version":3,"names":["makeString","require","module","exports","wrap","str","options","width","seperator","cut","preserveSpaces","trailingSpaces","result","words","split","current_column","length","shift","index","charAt"],"sources":["C:/spasi/frontend/node_modules/underscore.string/wrap.js"],"sourcesContent":["// Wrap\r\n// wraps a string by a certain width\r\n\r\nvar makeString = require('./helper/makeString');\r\n\r\nmodule.exports = function wrap(str, options){\r\n  str = makeString(str);\r\n  \r\n  options = options || {};\r\n  \r\n  var width = options.width || 75;\r\n  var seperator = options.seperator || '\\n';\r\n  var cut = options.cut || false;\r\n  var preserveSpaces = options.preserveSpaces || false;\r\n  var trailingSpaces = options.trailingSpaces || false;\r\n  \r\n  var result;\r\n  \r\n  if(width <= 0){\r\n    return str;\r\n  }\r\n  \r\n  else if(!cut){\r\n  \r\n    var words = str.split(' ');\r\n    var current_column = 0;\r\n    result = '';\r\n  \r\n    while(words.length > 0){\r\n      \r\n      // if adding a space and the next word would cause this line to be longer than width...\r\n      if(1 + words[0].length + current_column > width){\r\n        //start a new line if this line is not already empty\r\n        if(current_column > 0){\r\n          // add a space at the end of the line is preserveSpaces is true\r\n          if (preserveSpaces){\r\n            result += ' ';\r\n            current_column++;\r\n          }\r\n          // fill the rest of the line with spaces if trailingSpaces option is true\r\n          else if(trailingSpaces){\r\n            while(current_column < width){\r\n              result += ' ';\r\n              current_column++;\r\n            }            \r\n          }\r\n          //start new line\r\n          result += seperator;\r\n          current_column = 0;\r\n        }\r\n      }\r\n  \r\n      // if not at the begining of the line, add a space in front of the word\r\n      if(current_column > 0){\r\n        result += ' ';\r\n        current_column++;\r\n      }\r\n  \r\n      // tack on the next word, update current column, a pop words array\r\n      result += words[0];\r\n      current_column += words[0].length;\r\n      words.shift();\r\n  \r\n    }\r\n  \r\n    // fill the rest of the line with spaces if trailingSpaces option is true\r\n    if(trailingSpaces){\r\n      while(current_column < width){\r\n        result += ' ';\r\n        current_column++;\r\n      }            \r\n    }\r\n  \r\n    return result;\r\n  \r\n  }\r\n  \r\n  else {\r\n  \r\n    var index = 0;\r\n    result = '';\r\n  \r\n    // walk through each character and add seperators where appropriate\r\n    while(index < str.length){\r\n      if(index % width == 0 && index > 0){\r\n        result += seperator;\r\n      }\r\n      result += str.charAt(index);\r\n      index++;\r\n    }\r\n  \r\n    // fill the rest of the line with spaces if trailingSpaces option is true\r\n    if(trailingSpaces){\r\n      while(index % width > 0){\r\n        result += ' ';\r\n        index++;\r\n      }            \r\n    }\r\n    \r\n    return result;\r\n  }\r\n};\r\n"],"mappings":"AAAA;AACA;;AAEA,IAAIA,UAAU,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AAE/CC,MAAM,CAACC,OAAO,GAAG,SAASC,IAAIA,CAACC,GAAG,EAAEC,OAAO,EAAC;EAC1CD,GAAG,GAAGL,UAAU,CAACK,GAAG,CAAC;EAErBC,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EAEvB,IAAIC,KAAK,GAAGD,OAAO,CAACC,KAAK,IAAI,EAAE;EAC/B,IAAIC,SAAS,GAAGF,OAAO,CAACE,SAAS,IAAI,IAAI;EACzC,IAAIC,GAAG,GAAGH,OAAO,CAACG,GAAG,IAAI,KAAK;EAC9B,IAAIC,cAAc,GAAGJ,OAAO,CAACI,cAAc,IAAI,KAAK;EACpD,IAAIC,cAAc,GAAGL,OAAO,CAACK,cAAc,IAAI,KAAK;EAEpD,IAAIC,MAAM;EAEV,IAAGL,KAAK,IAAI,CAAC,EAAC;IACZ,OAAOF,GAAG;EACZ,CAAC,MAEI,IAAG,CAACI,GAAG,EAAC;IAEX,IAAII,KAAK,GAAGR,GAAG,CAACS,KAAK,CAAC,GAAG,CAAC;IAC1B,IAAIC,cAAc,GAAG,CAAC;IACtBH,MAAM,GAAG,EAAE;IAEX,OAAMC,KAAK,CAACG,MAAM,GAAG,CAAC,EAAC;MAErB;MACA,IAAG,CAAC,GAAGH,KAAK,CAAC,CAAC,CAAC,CAACG,MAAM,GAAGD,cAAc,GAAGR,KAAK,EAAC;QAC9C;QACA,IAAGQ,cAAc,GAAG,CAAC,EAAC;UACpB;UACA,IAAIL,cAAc,EAAC;YACjBE,MAAM,IAAI,GAAG;YACbG,cAAc,EAAE;UAClB;UACA;UAAA,KACK,IAAGJ,cAAc,EAAC;YACrB,OAAMI,cAAc,GAAGR,KAAK,EAAC;cAC3BK,MAAM,IAAI,GAAG;cACbG,cAAc,EAAE;YAClB;UACF;UACA;UACAH,MAAM,IAAIJ,SAAS;UACnBO,cAAc,GAAG,CAAC;QACpB;MACF;;MAEA;MACA,IAAGA,cAAc,GAAG,CAAC,EAAC;QACpBH,MAAM,IAAI,GAAG;QACbG,cAAc,EAAE;MAClB;;MAEA;MACAH,MAAM,IAAIC,KAAK,CAAC,CAAC,CAAC;MAClBE,cAAc,IAAIF,KAAK,CAAC,CAAC,CAAC,CAACG,MAAM;MACjCH,KAAK,CAACI,KAAK,EAAE;IAEf;;IAEA;IACA,IAAGN,cAAc,EAAC;MAChB,OAAMI,cAAc,GAAGR,KAAK,EAAC;QAC3BK,MAAM,IAAI,GAAG;QACbG,cAAc,EAAE;MAClB;IACF;IAEA,OAAOH,MAAM;EAEf,CAAC,MAEI;IAEH,IAAIM,KAAK,GAAG,CAAC;IACbN,MAAM,GAAG,EAAE;;IAEX;IACA,OAAMM,KAAK,GAAGb,GAAG,CAACW,MAAM,EAAC;MACvB,IAAGE,KAAK,GAAGX,KAAK,IAAI,CAAC,IAAIW,KAAK,GAAG,CAAC,EAAC;QACjCN,MAAM,IAAIJ,SAAS;MACrB;MACAI,MAAM,IAAIP,GAAG,CAACc,MAAM,CAACD,KAAK,CAAC;MAC3BA,KAAK,EAAE;IACT;;IAEA;IACA,IAAGP,cAAc,EAAC;MAChB,OAAMO,KAAK,GAAGX,KAAK,GAAG,CAAC,EAAC;QACtBK,MAAM,IAAI,GAAG;QACbM,KAAK,EAAE;MACT;IACF;IAEA,OAAON,MAAM;EACf;AACF,CAAC"},"metadata":{},"sourceType":"script"}