{"ast":null,"code":"var ip = exports;\nvar {\n  Buffer\n} = require('buffer');\nvar os = require('os');\nip.toBuffer = function (ip, buff, offset) {\n  offset = ~~offset;\n  var result;\n  if (this.isV4Format(ip)) {\n    result = buff || new Buffer(offset + 4);\n    ip.split(/\\./g).map(byte => {\n      result[offset++] = parseInt(byte, 10) & 0xff;\n    });\n  } else if (this.isV6Format(ip)) {\n    var sections = ip.split(':', 8);\n    var i;\n    for (i = 0; i < sections.length; i++) {\n      var isv4 = this.isV4Format(sections[i]);\n      var v4Buffer;\n      if (isv4) {\n        v4Buffer = this.toBuffer(sections[i]);\n        sections[i] = v4Buffer.slice(0, 2).toString('hex');\n      }\n      if (v4Buffer && ++i < 8) {\n        sections.splice(i, 0, v4Buffer.slice(2, 4).toString('hex'));\n      }\n    }\n    if (sections[0] === '') {\n      while (sections.length < 8) sections.unshift('0');\n    } else if (sections[sections.length - 1] === '') {\n      while (sections.length < 8) sections.push('0');\n    } else if (sections.length < 8) {\n      for (i = 0; i < sections.length && sections[i] !== ''; i++);\n      var argv = [i, 1];\n      for (i = 9 - sections.length; i > 0; i--) {\n        argv.push('0');\n      }\n      sections.splice.apply(sections, argv);\n    }\n    result = buff || new Buffer(offset + 16);\n    for (i = 0; i < sections.length; i++) {\n      var word = parseInt(sections[i], 16);\n      result[offset++] = word >> 8 & 0xff;\n      result[offset++] = word & 0xff;\n    }\n  }\n  if (!result) {\n    throw Error(`Invalid ip address: ${ip}`);\n  }\n  return result;\n};\nip.toString = function (buff, offset, length) {\n  offset = ~~offset;\n  length = length || buff.length - offset;\n  var result = [];\n  var i;\n  if (length === 4) {\n    // IPv4\n    for (i = 0; i < length; i++) {\n      result.push(buff[offset + i]);\n    }\n    result = result.join('.');\n  } else if (length === 16) {\n    // IPv6\n    for (i = 0; i < length; i += 2) {\n      result.push(buff.readUInt16BE(offset + i).toString(16));\n    }\n    result = result.join(':');\n    result = result.replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3');\n    result = result.replace(/:{3,4}/, '::');\n  }\n  return result;\n};\nvar ipv4Regex = /^(\\d{1,3}\\.){3,3}\\d{1,3}$/;\nvar ipv6Regex = /^(::)?(((\\d{1,3}\\.){3}(\\d{1,3}){1})?([0-9a-f]){0,4}:{0,2}){1,8}(::)?$/i;\nip.isV4Format = function (ip) {\n  return ipv4Regex.test(ip);\n};\nip.isV6Format = function (ip) {\n  return ipv6Regex.test(ip);\n};\nfunction _normalizeFamily(family) {\n  if (family === 4) {\n    return 'ipv4';\n  }\n  if (family === 6) {\n    return 'ipv6';\n  }\n  return family ? family.toLowerCase() : 'ipv4';\n}\nip.fromPrefixLen = function (prefixlen, family) {\n  if (prefixlen > 32) {\n    family = 'ipv6';\n  } else {\n    family = _normalizeFamily(family);\n  }\n  var len = 4;\n  if (family === 'ipv6') {\n    len = 16;\n  }\n  var buff = new Buffer(len);\n  for (var i = 0, n = buff.length; i < n; ++i) {\n    var bits = 8;\n    if (prefixlen < 8) {\n      bits = prefixlen;\n    }\n    prefixlen -= bits;\n    buff[i] = ~(0xff >> bits) & 0xff;\n  }\n  return ip.toString(buff);\n};\nip.mask = function (addr, mask) {\n  addr = ip.toBuffer(addr);\n  mask = ip.toBuffer(mask);\n  var result = new Buffer(Math.max(addr.length, mask.length));\n\n  // Same protocol - do bitwise and\n  var i;\n  if (addr.length === mask.length) {\n    for (i = 0; i < addr.length; i++) {\n      result[i] = addr[i] & mask[i];\n    }\n  } else if (mask.length === 4) {\n    // IPv6 address and IPv4 mask\n    // (Mask low bits)\n    for (i = 0; i < mask.length; i++) {\n      result[i] = addr[addr.length - 4 + i] & mask[i];\n    }\n  } else {\n    // IPv6 mask and IPv4 addr\n    for (i = 0; i < result.length - 6; i++) {\n      result[i] = 0;\n    }\n\n    // ::ffff:ipv4\n    result[10] = 0xff;\n    result[11] = 0xff;\n    for (i = 0; i < addr.length; i++) {\n      result[i + 12] = addr[i] & mask[i + 12];\n    }\n    i += 12;\n  }\n  for (; i < result.length; i++) {\n    result[i] = 0;\n  }\n  return ip.toString(result);\n};\nip.cidr = function (cidrString) {\n  var cidrParts = cidrString.split('/');\n  var addr = cidrParts[0];\n  if (cidrParts.length !== 2) {\n    throw new Error(`invalid CIDR subnet: ${addr}`);\n  }\n  var mask = ip.fromPrefixLen(parseInt(cidrParts[1], 10));\n  return ip.mask(addr, mask);\n};\nip.subnet = function (addr, mask) {\n  var networkAddress = ip.toLong(ip.mask(addr, mask));\n\n  // Calculate the mask's length.\n  var maskBuffer = ip.toBuffer(mask);\n  var maskLength = 0;\n  for (var i = 0; i < maskBuffer.length; i++) {\n    if (maskBuffer[i] === 0xff) {\n      maskLength += 8;\n    } else {\n      var octet = maskBuffer[i] & 0xff;\n      while (octet) {\n        octet = octet << 1 & 0xff;\n        maskLength++;\n      }\n    }\n  }\n  var numberOfAddresses = Math.pow(2, 32 - maskLength);\n  return {\n    networkAddress: ip.fromLong(networkAddress),\n    firstAddress: numberOfAddresses <= 2 ? ip.fromLong(networkAddress) : ip.fromLong(networkAddress + 1),\n    lastAddress: numberOfAddresses <= 2 ? ip.fromLong(networkAddress + numberOfAddresses - 1) : ip.fromLong(networkAddress + numberOfAddresses - 2),\n    broadcastAddress: ip.fromLong(networkAddress + numberOfAddresses - 1),\n    subnetMask: mask,\n    subnetMaskLength: maskLength,\n    numHosts: numberOfAddresses <= 2 ? numberOfAddresses : numberOfAddresses - 2,\n    length: numberOfAddresses,\n    contains(other) {\n      return networkAddress === ip.toLong(ip.mask(other, mask));\n    }\n  };\n};\nip.cidrSubnet = function (cidrString) {\n  var cidrParts = cidrString.split('/');\n  var addr = cidrParts[0];\n  if (cidrParts.length !== 2) {\n    throw new Error(`invalid CIDR subnet: ${addr}`);\n  }\n  var mask = ip.fromPrefixLen(parseInt(cidrParts[1], 10));\n  return ip.subnet(addr, mask);\n};\nip.not = function (addr) {\n  var buff = ip.toBuffer(addr);\n  for (var i = 0; i < buff.length; i++) {\n    buff[i] = 0xff ^ buff[i];\n  }\n  return ip.toString(buff);\n};\nip.or = function (a, b) {\n  var i;\n  a = ip.toBuffer(a);\n  b = ip.toBuffer(b);\n\n  // same protocol\n  if (a.length === b.length) {\n    for (i = 0; i < a.length; ++i) {\n      a[i] |= b[i];\n    }\n    return ip.toString(a);\n\n    // mixed protocols\n  }\n\n  var buff = a;\n  var other = b;\n  if (b.length > a.length) {\n    buff = b;\n    other = a;\n  }\n  var offset = buff.length - other.length;\n  for (i = offset; i < buff.length; ++i) {\n    buff[i] |= other[i - offset];\n  }\n  return ip.toString(buff);\n};\nip.isEqual = function (a, b) {\n  var i;\n  a = ip.toBuffer(a);\n  b = ip.toBuffer(b);\n\n  // Same protocol\n  if (a.length === b.length) {\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n\n  // Swap\n  if (b.length === 4) {\n    var t = b;\n    b = a;\n    a = t;\n  }\n\n  // a - IPv4, b - IPv6\n  for (i = 0; i < 10; i++) {\n    if (b[i] !== 0) return false;\n  }\n  var word = b.readUInt16BE(10);\n  if (word !== 0 && word !== 0xffff) return false;\n  for (i = 0; i < 4; i++) {\n    if (a[i] !== b[i + 12]) return false;\n  }\n  return true;\n};\nip.isPrivate = function (addr) {\n  return /^(::f{4}:)?10\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr) || /^(::f{4}:)?192\\.168\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr) || /^(::f{4}:)?172\\.(1[6-9]|2\\d|30|31)\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr) || /^(::f{4}:)?127\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr) || /^(::f{4}:)?169\\.254\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr) || /^f[cd][0-9a-f]{2}:/i.test(addr) || /^fe80:/i.test(addr) || /^::1$/.test(addr) || /^::$/.test(addr);\n};\nip.isPublic = function (addr) {\n  return !ip.isPrivate(addr);\n};\nip.isLoopback = function (addr) {\n  return /^(::f{4}:)?127\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})/.test(addr) || /^fe80::1$/.test(addr) || /^::1$/.test(addr) || /^::$/.test(addr);\n};\nip.loopback = function (family) {\n  //\n  // Default to `ipv4`\n  //\n  family = _normalizeFamily(family);\n  if (family !== 'ipv4' && family !== 'ipv6') {\n    throw new Error('family must be ipv4 or ipv6');\n  }\n  return family === 'ipv4' ? '127.0.0.1' : 'fe80::1';\n};\n\n//\n// ### function address (name, family)\n// #### @name {string|'public'|'private'} **Optional** Name or security\n//      of the network interface.\n// #### @family {ipv4|ipv6} **Optional** IP family of the address (defaults\n//      to ipv4).\n//\n// Returns the address for the network interface on the current system with\n// the specified `name`:\n//   * String: First `family` address of the interface.\n//             If not found see `undefined`.\n//   * 'public': the first public ip address of family.\n//   * 'private': the first private ip address of family.\n//   * undefined: First address with `ipv4` or loopback address `127.0.0.1`.\n//\nip.address = function (name, family) {\n  var interfaces = os.networkInterfaces();\n\n  //\n  // Default to `ipv4`\n  //\n  family = _normalizeFamily(family);\n\n  //\n  // If a specific network interface has been named,\n  // return the address.\n  //\n  if (name && name !== 'private' && name !== 'public') {\n    var res = interfaces[name].filter(details => {\n      var itemFamily = _normalizeFamily(details.family);\n      return itemFamily === family;\n    });\n    if (res.length === 0) {\n      return undefined;\n    }\n    return res[0].address;\n  }\n  var all = Object.keys(interfaces).map(nic => {\n    //\n    // Note: name will only be `public` or `private`\n    // when this is called.\n    //\n    var addresses = interfaces[nic].filter(details => {\n      details.family = _normalizeFamily(details.family);\n      if (details.family !== family || ip.isLoopback(details.address)) {\n        return false;\n      }\n      if (!name) {\n        return true;\n      }\n      return name === 'public' ? ip.isPrivate(details.address) : ip.isPublic(details.address);\n    });\n    return addresses.length ? addresses[0].address : undefined;\n  }).filter(Boolean);\n  return !all.length ? ip.loopback(family) : all[0];\n};\nip.toLong = function (ip) {\n  var ipl = 0;\n  ip.split('.').forEach(octet => {\n    ipl <<= 8;\n    ipl += parseInt(octet);\n  });\n  return ipl >>> 0;\n};\nip.fromLong = function (ipl) {\n  return `${ipl >>> 24}.${ipl >> 16 & 255}.${ipl >> 8 & 255}.${ipl & 255}`;\n};","map":{"version":3,"names":["ip","exports","Buffer","require","os","toBuffer","buff","offset","result","isV4Format","split","map","byte","parseInt","isV6Format","sections","i","length","isv4","v4Buffer","slice","toString","splice","unshift","push","argv","apply","word","Error","join","readUInt16BE","replace","ipv4Regex","ipv6Regex","test","_normalizeFamily","family","toLowerCase","fromPrefixLen","prefixlen","len","n","bits","mask","addr","Math","max","cidr","cidrString","cidrParts","subnet","networkAddress","toLong","maskBuffer","maskLength","octet","numberOfAddresses","pow","fromLong","firstAddress","lastAddress","broadcastAddress","subnetMask","subnetMaskLength","numHosts","contains","other","cidrSubnet","not","or","a","b","isEqual","t","isPrivate","isPublic","isLoopback","loopback","address","name","interfaces","networkInterfaces","res","filter","details","itemFamily","undefined","all","Object","keys","nic","addresses","Boolean","ipl","forEach"],"sources":["C:/frontend/node_modules/ip/lib/ip.js"],"sourcesContent":["var ip = exports;\r\nvar { Buffer } = require('buffer');\r\nvar os = require('os');\r\n\r\nip.toBuffer = function (ip, buff, offset) {\r\n  offset = ~~offset;\r\n\r\n  var result;\r\n\r\n  if (this.isV4Format(ip)) {\r\n    result = buff || new Buffer(offset + 4);\r\n    ip.split(/\\./g).map((byte) => {\r\n      result[offset++] = parseInt(byte, 10) & 0xff;\r\n    });\r\n  } else if (this.isV6Format(ip)) {\r\n    var sections = ip.split(':', 8);\r\n\r\n    var i;\r\n    for (i = 0; i < sections.length; i++) {\r\n      var isv4 = this.isV4Format(sections[i]);\r\n      var v4Buffer;\r\n\r\n      if (isv4) {\r\n        v4Buffer = this.toBuffer(sections[i]);\r\n        sections[i] = v4Buffer.slice(0, 2).toString('hex');\r\n      }\r\n\r\n      if (v4Buffer && ++i < 8) {\r\n        sections.splice(i, 0, v4Buffer.slice(2, 4).toString('hex'));\r\n      }\r\n    }\r\n\r\n    if (sections[0] === '') {\r\n      while (sections.length < 8) sections.unshift('0');\r\n    } else if (sections[sections.length - 1] === '') {\r\n      while (sections.length < 8) sections.push('0');\r\n    } else if (sections.length < 8) {\r\n      for (i = 0; i < sections.length && sections[i] !== ''; i++);\r\n      var argv = [i, 1];\r\n      for (i = 9 - sections.length; i > 0; i--) {\r\n        argv.push('0');\r\n      }\r\n      sections.splice.apply(sections, argv);\r\n    }\r\n\r\n    result = buff || new Buffer(offset + 16);\r\n    for (i = 0; i < sections.length; i++) {\r\n      var word = parseInt(sections[i], 16);\r\n      result[offset++] = (word >> 8) & 0xff;\r\n      result[offset++] = word & 0xff;\r\n    }\r\n  }\r\n\r\n  if (!result) {\r\n    throw Error(`Invalid ip address: ${ip}`);\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nip.toString = function (buff, offset, length) {\r\n  offset = ~~offset;\r\n  length = length || (buff.length - offset);\r\n\r\n  var result = [];\r\n  var i;\r\n  if (length === 4) {\r\n    // IPv4\r\n    for (i = 0; i < length; i++) {\r\n      result.push(buff[offset + i]);\r\n    }\r\n    result = result.join('.');\r\n  } else if (length === 16) {\r\n    // IPv6\r\n    for (i = 0; i < length; i += 2) {\r\n      result.push(buff.readUInt16BE(offset + i).toString(16));\r\n    }\r\n    result = result.join(':');\r\n    result = result.replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3');\r\n    result = result.replace(/:{3,4}/, '::');\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nvar ipv4Regex = /^(\\d{1,3}\\.){3,3}\\d{1,3}$/;\r\nvar ipv6Regex = /^(::)?(((\\d{1,3}\\.){3}(\\d{1,3}){1})?([0-9a-f]){0,4}:{0,2}){1,8}(::)?$/i;\r\n\r\nip.isV4Format = function (ip) {\r\n  return ipv4Regex.test(ip);\r\n};\r\n\r\nip.isV6Format = function (ip) {\r\n  return ipv6Regex.test(ip);\r\n};\r\n\r\nfunction _normalizeFamily(family) {\r\n  if (family === 4) {\r\n    return 'ipv4';\r\n  }\r\n  if (family === 6) {\r\n    return 'ipv6';\r\n  }\r\n  return family ? family.toLowerCase() : 'ipv4';\r\n}\r\n\r\nip.fromPrefixLen = function (prefixlen, family) {\r\n  if (prefixlen > 32) {\r\n    family = 'ipv6';\r\n  } else {\r\n    family = _normalizeFamily(family);\r\n  }\r\n\r\n  var len = 4;\r\n  if (family === 'ipv6') {\r\n    len = 16;\r\n  }\r\n  var buff = new Buffer(len);\r\n\r\n  for (var i = 0, n = buff.length; i < n; ++i) {\r\n    var bits = 8;\r\n    if (prefixlen < 8) {\r\n      bits = prefixlen;\r\n    }\r\n    prefixlen -= bits;\r\n\r\n    buff[i] = ~(0xff >> bits) & 0xff;\r\n  }\r\n\r\n  return ip.toString(buff);\r\n};\r\n\r\nip.mask = function (addr, mask) {\r\n  addr = ip.toBuffer(addr);\r\n  mask = ip.toBuffer(mask);\r\n\r\n  var result = new Buffer(Math.max(addr.length, mask.length));\r\n\r\n  // Same protocol - do bitwise and\r\n  var i;\r\n  if (addr.length === mask.length) {\r\n    for (i = 0; i < addr.length; i++) {\r\n      result[i] = addr[i] & mask[i];\r\n    }\r\n  } else if (mask.length === 4) {\r\n    // IPv6 address and IPv4 mask\r\n    // (Mask low bits)\r\n    for (i = 0; i < mask.length; i++) {\r\n      result[i] = addr[addr.length - 4 + i] & mask[i];\r\n    }\r\n  } else {\r\n    // IPv6 mask and IPv4 addr\r\n    for (i = 0; i < result.length - 6; i++) {\r\n      result[i] = 0;\r\n    }\r\n\r\n    // ::ffff:ipv4\r\n    result[10] = 0xff;\r\n    result[11] = 0xff;\r\n    for (i = 0; i < addr.length; i++) {\r\n      result[i + 12] = addr[i] & mask[i + 12];\r\n    }\r\n    i += 12;\r\n  }\r\n  for (; i < result.length; i++) {\r\n    result[i] = 0;\r\n  }\r\n\r\n  return ip.toString(result);\r\n};\r\n\r\nip.cidr = function (cidrString) {\r\n  var cidrParts = cidrString.split('/');\r\n\r\n  var addr = cidrParts[0];\r\n  if (cidrParts.length !== 2) {\r\n    throw new Error(`invalid CIDR subnet: ${addr}`);\r\n  }\r\n\r\n  var mask = ip.fromPrefixLen(parseInt(cidrParts[1], 10));\r\n\r\n  return ip.mask(addr, mask);\r\n};\r\n\r\nip.subnet = function (addr, mask) {\r\n  var networkAddress = ip.toLong(ip.mask(addr, mask));\r\n\r\n  // Calculate the mask's length.\r\n  var maskBuffer = ip.toBuffer(mask);\r\n  var maskLength = 0;\r\n\r\n  for (var i = 0; i < maskBuffer.length; i++) {\r\n    if (maskBuffer[i] === 0xff) {\r\n      maskLength += 8;\r\n    } else {\r\n      var octet = maskBuffer[i] & 0xff;\r\n      while (octet) {\r\n        octet = (octet << 1) & 0xff;\r\n        maskLength++;\r\n      }\r\n    }\r\n  }\r\n\r\n  var numberOfAddresses = Math.pow(2, 32 - maskLength);\r\n\r\n  return {\r\n    networkAddress: ip.fromLong(networkAddress),\r\n    firstAddress: numberOfAddresses <= 2\r\n      ? ip.fromLong(networkAddress)\r\n      : ip.fromLong(networkAddress + 1),\r\n    lastAddress: numberOfAddresses <= 2\r\n      ? ip.fromLong(networkAddress + numberOfAddresses - 1)\r\n      : ip.fromLong(networkAddress + numberOfAddresses - 2),\r\n    broadcastAddress: ip.fromLong(networkAddress + numberOfAddresses - 1),\r\n    subnetMask: mask,\r\n    subnetMaskLength: maskLength,\r\n    numHosts: numberOfAddresses <= 2\r\n      ? numberOfAddresses : numberOfAddresses - 2,\r\n    length: numberOfAddresses,\r\n    contains(other) {\r\n      return networkAddress === ip.toLong(ip.mask(other, mask));\r\n    },\r\n  };\r\n};\r\n\r\nip.cidrSubnet = function (cidrString) {\r\n  var cidrParts = cidrString.split('/');\r\n\r\n  var addr = cidrParts[0];\r\n  if (cidrParts.length !== 2) {\r\n    throw new Error(`invalid CIDR subnet: ${addr}`);\r\n  }\r\n\r\n  var mask = ip.fromPrefixLen(parseInt(cidrParts[1], 10));\r\n\r\n  return ip.subnet(addr, mask);\r\n};\r\n\r\nip.not = function (addr) {\r\n  var buff = ip.toBuffer(addr);\r\n  for (var i = 0; i < buff.length; i++) {\r\n    buff[i] = 0xff ^ buff[i];\r\n  }\r\n  return ip.toString(buff);\r\n};\r\n\r\nip.or = function (a, b) {\r\n  var i;\r\n\r\n  a = ip.toBuffer(a);\r\n  b = ip.toBuffer(b);\r\n\r\n  // same protocol\r\n  if (a.length === b.length) {\r\n    for (i = 0; i < a.length; ++i) {\r\n      a[i] |= b[i];\r\n    }\r\n    return ip.toString(a);\r\n\r\n  // mixed protocols\r\n  }\r\n  var buff = a;\r\n  var other = b;\r\n  if (b.length > a.length) {\r\n    buff = b;\r\n    other = a;\r\n  }\r\n\r\n  var offset = buff.length - other.length;\r\n  for (i = offset; i < buff.length; ++i) {\r\n    buff[i] |= other[i - offset];\r\n  }\r\n\r\n  return ip.toString(buff);\r\n};\r\n\r\nip.isEqual = function (a, b) {\r\n  var i;\r\n\r\n  a = ip.toBuffer(a);\r\n  b = ip.toBuffer(b);\r\n\r\n  // Same protocol\r\n  if (a.length === b.length) {\r\n    for (i = 0; i < a.length; i++) {\r\n      if (a[i] !== b[i]) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // Swap\r\n  if (b.length === 4) {\r\n    var t = b;\r\n    b = a;\r\n    a = t;\r\n  }\r\n\r\n  // a - IPv4, b - IPv6\r\n  for (i = 0; i < 10; i++) {\r\n    if (b[i] !== 0) return false;\r\n  }\r\n\r\n  var word = b.readUInt16BE(10);\r\n  if (word !== 0 && word !== 0xffff) return false;\r\n\r\n  for (i = 0; i < 4; i++) {\r\n    if (a[i] !== b[i + 12]) return false;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nip.isPrivate = function (addr) {\r\n  return /^(::f{4}:)?10\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/i\r\n    .test(addr)\r\n    || /^(::f{4}:)?192\\.168\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr)\r\n    || /^(::f{4}:)?172\\.(1[6-9]|2\\d|30|31)\\.([0-9]{1,3})\\.([0-9]{1,3})$/i\r\n      .test(addr)\r\n    || /^(::f{4}:)?127\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr)\r\n    || /^(::f{4}:)?169\\.254\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr)\r\n    || /^f[cd][0-9a-f]{2}:/i.test(addr)\r\n    || /^fe80:/i.test(addr)\r\n    || /^::1$/.test(addr)\r\n    || /^::$/.test(addr);\r\n};\r\n\r\nip.isPublic = function (addr) {\r\n  return !ip.isPrivate(addr);\r\n};\r\n\r\nip.isLoopback = function (addr) {\r\n  return /^(::f{4}:)?127\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})/\r\n    .test(addr)\r\n    || /^fe80::1$/.test(addr)\r\n    || /^::1$/.test(addr)\r\n    || /^::$/.test(addr);\r\n};\r\n\r\nip.loopback = function (family) {\r\n  //\r\n  // Default to `ipv4`\r\n  //\r\n  family = _normalizeFamily(family);\r\n\r\n  if (family !== 'ipv4' && family !== 'ipv6') {\r\n    throw new Error('family must be ipv4 or ipv6');\r\n  }\r\n\r\n  return family === 'ipv4' ? '127.0.0.1' : 'fe80::1';\r\n};\r\n\r\n//\r\n// ### function address (name, family)\r\n// #### @name {string|'public'|'private'} **Optional** Name or security\r\n//      of the network interface.\r\n// #### @family {ipv4|ipv6} **Optional** IP family of the address (defaults\r\n//      to ipv4).\r\n//\r\n// Returns the address for the network interface on the current system with\r\n// the specified `name`:\r\n//   * String: First `family` address of the interface.\r\n//             If not found see `undefined`.\r\n//   * 'public': the first public ip address of family.\r\n//   * 'private': the first private ip address of family.\r\n//   * undefined: First address with `ipv4` or loopback address `127.0.0.1`.\r\n//\r\nip.address = function (name, family) {\r\n  var interfaces = os.networkInterfaces();\r\n\r\n  //\r\n  // Default to `ipv4`\r\n  //\r\n  family = _normalizeFamily(family);\r\n\r\n  //\r\n  // If a specific network interface has been named,\r\n  // return the address.\r\n  //\r\n  if (name && name !== 'private' && name !== 'public') {\r\n    var res = interfaces[name].filter((details) => {\r\n      var itemFamily = _normalizeFamily(details.family);\r\n      return itemFamily === family;\r\n    });\r\n    if (res.length === 0) {\r\n      return undefined;\r\n    }\r\n    return res[0].address;\r\n  }\r\n\r\n  var all = Object.keys(interfaces).map((nic) => {\r\n    //\r\n    // Note: name will only be `public` or `private`\r\n    // when this is called.\r\n    //\r\n    var addresses = interfaces[nic].filter((details) => {\r\n      details.family = _normalizeFamily(details.family);\r\n      if (details.family !== family || ip.isLoopback(details.address)) {\r\n        return false;\r\n      } if (!name) {\r\n        return true;\r\n      }\r\n\r\n      return name === 'public' ? ip.isPrivate(details.address)\r\n        : ip.isPublic(details.address);\r\n    });\r\n\r\n    return addresses.length ? addresses[0].address : undefined;\r\n  }).filter(Boolean);\r\n\r\n  return !all.length ? ip.loopback(family) : all[0];\r\n};\r\n\r\nip.toLong = function (ip) {\r\n  var ipl = 0;\r\n  ip.split('.').forEach((octet) => {\r\n    ipl <<= 8;\r\n    ipl += parseInt(octet);\r\n  });\r\n  return (ipl >>> 0);\r\n};\r\n\r\nip.fromLong = function (ipl) {\r\n  return (`${ipl >>> 24}.${\r\n    ipl >> 16 & 255}.${\r\n    ipl >> 8 & 255}.${\r\n    ipl & 255}`);\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}