{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar _1 = require(\".\");\nvar TransactionFactory = /** @class */function () {\n  // It is not possible to instantiate a TransactionFactory object.\n  function TransactionFactory() {}\n  /**\r\n   * Create a transaction from a `txData` object\r\n   *\r\n   * @param txData - The transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)\r\n   * @param txOptions - Options to pass on to the constructor of the transaction\r\n   */\n  TransactionFactory.fromTxData = function (txData, txOptions) {\n    if (txOptions === void 0) {\n      txOptions = {};\n    }\n    if (!('type' in txData) || txData.type === undefined) {\n      // Assume legacy transaction\n      return _1.Transaction.fromTxData(txData, txOptions);\n    } else {\n      var txType = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(txData.type)).toNumber();\n      if (txType === 0) {\n        return _1.Transaction.fromTxData(txData, txOptions);\n      } else if (txType === 1) {\n        return _1.AccessListEIP2930Transaction.fromTxData(txData, txOptions);\n      } else if (txType === 2) {\n        return _1.FeeMarketEIP1559Transaction.fromTxData(txData, txOptions);\n      } else {\n        throw new Error(\"Tx instantiation with type \".concat(txType, \" not supported\"));\n      }\n    }\n  };\n  /**\r\n   * This method tries to decode serialized data.\r\n   *\r\n   * @param data - The data Buffer\r\n   * @param txOptions - The transaction options\r\n   */\n  TransactionFactory.fromSerializedData = function (data, txOptions) {\n    if (txOptions === void 0) {\n      txOptions = {};\n    }\n    if (data[0] <= 0x7f) {\n      // Determine the type.\n      var EIP = void 0;\n      switch (data[0]) {\n        case 1:\n          EIP = 2930;\n          break;\n        case 2:\n          EIP = 1559;\n          break;\n        default:\n          throw new Error(\"TypedTransaction with ID \".concat(data[0], \" unknown\"));\n      }\n      if (EIP === 1559) {\n        return _1.FeeMarketEIP1559Transaction.fromSerializedTx(data, txOptions);\n      } else {\n        // EIP === 2930\n        return _1.AccessListEIP2930Transaction.fromSerializedTx(data, txOptions);\n      }\n    } else {\n      return _1.Transaction.fromSerializedTx(data, txOptions);\n    }\n  };\n  /**\r\n   * When decoding a BlockBody, in the transactions field, a field is either:\r\n   * A Buffer (a TypedTransaction - encoded as TransactionType || rlp(TransactionPayload))\r\n   * A Buffer[] (Legacy Transaction)\r\n   * This method returns the right transaction.\r\n   *\r\n   * @param data - A Buffer or Buffer[]\r\n   * @param txOptions - The transaction options\r\n   */\n  TransactionFactory.fromBlockBodyData = function (data, txOptions) {\n    if (txOptions === void 0) {\n      txOptions = {};\n    }\n    if (Buffer.isBuffer(data)) {\n      return this.fromSerializedData(data, txOptions);\n    } else if (Array.isArray(data)) {\n      // It is a legacy transaction\n      return _1.Transaction.fromValuesArray(data, txOptions);\n    } else {\n      throw new Error('Cannot decode transaction: unknown type input');\n    }\n  };\n  /**\r\n   * This helper method allows one to retrieve the class which matches the transactionID\r\n   * If transactionID is undefined, returns the legacy transaction class.\r\n   * @deprecated - This method is deprecated and will be removed on the next major release\r\n   * @param transactionID\r\n   * @param _common - This option is not used\r\n   */\n  TransactionFactory.getTransactionClass = function (transactionID, _common) {\n    if (transactionID === void 0) {\n      transactionID = 0;\n    }\n    var legacyTxn = transactionID == 0 || transactionID >= 0x80 && transactionID <= 0xff;\n    if (legacyTxn) {\n      return _1.Transaction;\n    }\n    switch (transactionID) {\n      case 1:\n        return _1.AccessListEIP2930Transaction;\n      case 2:\n        return _1.FeeMarketEIP1559Transaction;\n      default:\n        throw new Error(\"TypedTransaction with ID \".concat(transactionID, \" unknown\"));\n    }\n  };\n  return TransactionFactory;\n}();\nexports.default = TransactionFactory;","map":{"version":3,"sources":["../src/transactionFactory.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\r\nvar _1 = require(\".\");\r\nvar TransactionFactory = /** @class */ (function () {\r\n    // It is not possible to instantiate a TransactionFactory object.\r\n    function TransactionFactory() {\r\n    }\r\n    /**\r\n     * Create a transaction from a `txData` object\r\n     *\r\n     * @param txData - The transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)\r\n     * @param txOptions - Options to pass on to the constructor of the transaction\r\n     */\r\n    TransactionFactory.fromTxData = function (txData, txOptions) {\r\n        if (txOptions === void 0) { txOptions = {}; }\r\n        if (!('type' in txData) || txData.type === undefined) {\r\n            // Assume legacy transaction\r\n            return _1.Transaction.fromTxData(txData, txOptions);\r\n        }\r\n        else {\r\n            var txType = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(txData.type)).toNumber();\r\n            if (txType === 0) {\r\n                return _1.Transaction.fromTxData(txData, txOptions);\r\n            }\r\n            else if (txType === 1) {\r\n                return _1.AccessListEIP2930Transaction.fromTxData(txData, txOptions);\r\n            }\r\n            else if (txType === 2) {\r\n                return _1.FeeMarketEIP1559Transaction.fromTxData(txData, txOptions);\r\n            }\r\n            else {\r\n                throw new Error(\"Tx instantiation with type \".concat(txType, \" not supported\"));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * This method tries to decode serialized data.\r\n     *\r\n     * @param data - The data Buffer\r\n     * @param txOptions - The transaction options\r\n     */\r\n    TransactionFactory.fromSerializedData = function (data, txOptions) {\r\n        if (txOptions === void 0) { txOptions = {}; }\r\n        if (data[0] <= 0x7f) {\r\n            // Determine the type.\r\n            var EIP = void 0;\r\n            switch (data[0]) {\r\n                case 1:\r\n                    EIP = 2930;\r\n                    break;\r\n                case 2:\r\n                    EIP = 1559;\r\n                    break;\r\n                default:\r\n                    throw new Error(\"TypedTransaction with ID \".concat(data[0], \" unknown\"));\r\n            }\r\n            if (EIP === 1559) {\r\n                return _1.FeeMarketEIP1559Transaction.fromSerializedTx(data, txOptions);\r\n            }\r\n            else {\r\n                // EIP === 2930\r\n                return _1.AccessListEIP2930Transaction.fromSerializedTx(data, txOptions);\r\n            }\r\n        }\r\n        else {\r\n            return _1.Transaction.fromSerializedTx(data, txOptions);\r\n        }\r\n    };\r\n    /**\r\n     * When decoding a BlockBody, in the transactions field, a field is either:\r\n     * A Buffer (a TypedTransaction - encoded as TransactionType || rlp(TransactionPayload))\r\n     * A Buffer[] (Legacy Transaction)\r\n     * This method returns the right transaction.\r\n     *\r\n     * @param data - A Buffer or Buffer[]\r\n     * @param txOptions - The transaction options\r\n     */\r\n    TransactionFactory.fromBlockBodyData = function (data, txOptions) {\r\n        if (txOptions === void 0) { txOptions = {}; }\r\n        if (Buffer.isBuffer(data)) {\r\n            return this.fromSerializedData(data, txOptions);\r\n        }\r\n        else if (Array.isArray(data)) {\r\n            // It is a legacy transaction\r\n            return _1.Transaction.fromValuesArray(data, txOptions);\r\n        }\r\n        else {\r\n            throw new Error('Cannot decode transaction: unknown type input');\r\n        }\r\n    };\r\n    /**\r\n     * This helper method allows one to retrieve the class which matches the transactionID\r\n     * If transactionID is undefined, returns the legacy transaction class.\r\n     * @deprecated - This method is deprecated and will be removed on the next major release\r\n     * @param transactionID\r\n     * @param _common - This option is not used\r\n     */\r\n    TransactionFactory.getTransactionClass = function (transactionID, _common) {\r\n        if (transactionID === void 0) { transactionID = 0; }\r\n        var legacyTxn = transactionID == 0 || (transactionID >= 0x80 && transactionID <= 0xff);\r\n        if (legacyTxn) {\r\n            return _1.Transaction;\r\n        }\r\n        switch (transactionID) {\r\n            case 1:\r\n                return _1.AccessListEIP2930Transaction;\r\n            case 2:\r\n                return _1.FeeMarketEIP1559Transaction;\r\n            default:\r\n                throw new Error(\"TypedTransaction with ID \".concat(transactionID, \" unknown\"));\r\n        }\r\n    };\r\n    return TransactionFactory;\r\n}());\r\nexports.default = TransactionFactory;\r\n//# sourceMappingURL=transactionFactory.js.map"]},"metadata":{},"sourceType":"script"}